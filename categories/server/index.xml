<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>server on shinayoshi&#39;s note</title>
    <link>https://www.shinayoshi.net/categories/server/</link>
    <description>Recent content in server on shinayoshi&#39;s note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Copyright (c) 2019 shinayoshi</copyright>
    <lastBuildDate>Wed, 17 May 2017 22:43:05 +0900</lastBuildDate><atom:link href="https://www.shinayoshi.net/categories/server/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LinuxでUTF-8のBOMを削除する</title>
      <link>https://www.shinayoshi.net/post/2017/05/17/remove-bom-code/</link>
      <pubDate>Wed, 17 May 2017 22:43:05 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2017/05/17/remove-bom-code/</guid>
      <description>Linux上でUTF-8のファイルに含まれるBOM(Byte Order Mark)を削除する方法です。Webで検索するとたくさん情報が出てきますが、今回はvimを使った方法を残しておきます。
きっかけとしては、Windowsで作成したシェルスクリプト(UTF-8)をLinuxで実行した際に1行目でエラーが出力されたことです。なぜエラーが出るのか調べてみるとBOMが原因であることがわかりました。 Windowsのnotepadで保存するとBOM付きで保存されるようです。
BOMの確認 ファイルをcatやemacsで表示しても通常はBOMを見ることはできません。これはプログラムがBOM付き、BOMなしに関わらずうまく解釈して表示してくれるからです。ですが、lessやmoreではBOMをそのまま表示してくれますので、BOM有無の判断に使用できます。&amp;lt;U+FEFF&amp;gt;がBOMです。
$ less bom.txt &amp;lt;U+FEFF&amp;gt;#!/bin/sh echo hoge BOMの削除 通常vimでファイルを開くとBOM付き、BOMなしを意識せず開いてくれます。ここで「-b(バイナリモード)」オプションをつけてvimを起動するとBOMを表示することができます。
$ vim -b bom.txt &amp;lt;feff\&amp;gt;#!/bin/sh echo hoge あとはBOM(↑でいうところの&amp;lt;feff&amp;gt;)を削除して保存すれば、BOMなしファイルができます。
以上</description>
    </item>
    
    <item>
      <title>CentOS 7.3にLet&#39;s Encryptの証明書を導入する</title>
      <link>https://www.shinayoshi.net/post/2017/05/03/install-lets-encrypt/</link>
      <pubDate>Wed, 03 May 2017 15:50:26 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2017/05/03/install-lets-encrypt/</guid>
      <description>前提  OS  CentOS Linux release 7.3.1611 (Core)   Web Server  Apache 2.4.6   firewalld  enabled   SELinux  disabled    firewalldでhttpsを有効化 インターネットからhttpsアクセスを許可する。
$ sudo firewall-cmd --permanent --zone=public --add-service=https success $ sudo firewall-cmd --reload success $ sudo firewall-cmd --zone=public --list-all public (active) target: default icmp-block-inversion: no interfaces: eth0 sources: services: http https ports: protocols: masquerade: no forward-ports: sourceports: icmp-blocks: rich rules: EPELリポジトリのインストール EPELリポジトリをインストールする。</description>
    </item>
    
    <item>
      <title>Raspberry Pi 2のイメージバックアップを行う</title>
      <link>https://www.shinayoshi.net/post/2017/01/15/backup-raspberrypi/</link>
      <pubDate>Sun, 15 Jan 2017 00:51:03 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2017/01/15/backup-raspberrypi/</guid>
      <description>FortiGate 60DとRaspberry Piを使用して家庭内インターネット接続環境を構築します。 最終的には以下のような構成を想定しています。
今回はhomenas1のバックアップを行います。
gitのインストール $ sudo -E apt-get install git パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています 状態情報を読み取っています... 完了 以下の追加パッケージがインストールされます: git-man liberror-perl 提案パッケージ: gettext-base git-daemon-run git-daemon-sysvinit git-doc git-el git-email git-gui gitk gitweb git-arch git-cvs git-mediawiki git-svn 以下のパッケージが新たにインストールされます: git git-man liberror-perl アップグレード: 0 個、新規インストール: 3 個、削除: 0 個、保留: 1 個。 4,015 kB のアーカイブを取得する必要があります。 この操作後に追加で 20.4 MB のディスク容量が消費されます。 続行しますか? [Y/n] y 取得:1 http://mirrordirector.raspbian.org/raspbian/ jessie/main liberror-perl all 0.17-1.1 [22.4 kB] 取得:2 http://mirrordirector.raspbian.org/raspbian/ jessie/main git-man all 1:2.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 2でファイルバックアップを行う</title>
      <link>https://www.shinayoshi.net/post/2017/01/12/setting-rsnapshot/</link>
      <pubDate>Thu, 12 Jan 2017 17:52:47 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2017/01/12/setting-rsnapshot/</guid>
      <description>FortiGate 60DとRaspberry Piを使用して家庭内インターネット接続環境を構築します。 最終的には以下のような構成を想定しています。
今回はhomenas1にrsnapshotを導入してファイルバックアップを行う設定を行います。
なおバックアップ元は/mnt/nas/、バックアップ先は/mnt/backup/を想定しています。
$ df -h /dev/sdc1 917G 72M 871G 1% /mnt/backup /dev/md0 394G 71M 374G 1% /mnt/nas $ rsnapshotのインストール $ sudo -E apt-get install rsnapshot パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています 状態情報を読み取っています... 完了 以下の追加パッケージがインストールされます: liblchown-perl rsync 以下のパッケージが新たにインストールされます: liblchown-perl rsnapshot rsync アップグレード: 0 個、新規インストール: 3 個、削除: 0 個、保留: 1 個。 507 kB のアーカイブを取得する必要があります。 この操作後に追加で 1,133 kB のディスク容量が消費されます。 続行しますか? [Y/n] y 取得:1 http://mirrordirector.raspbian.org/raspbian/ jessie/main liblchown-perl armhf 1.01-2+b1 [8,828 B] 取得:2 http://mirrordirector.raspbian.org/raspbian/ jessie/main rsync armhf 3.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 2でCactiを導入する(サーバの登録)</title>
      <link>https://www.shinayoshi.net/post/2017/01/09/setting-snmpd/</link>
      <pubDate>Mon, 09 Jan 2017 17:30:57 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2017/01/09/setting-snmpd/</guid>
      <description>FortiGate 60DとRaspberry Piを使用して家庭内インターネット接続環境を構築します。 最終的には以下のような構成を想定しています。
前回はCactiを導入しました。 今回はCactiにhomenas1、homemon1、homemon2、homepxy1、homepot1を登録していきます。SNMPv3を使用してSNMPの値を取得します。
snmpdのインストール 追加するデバイス(Server)にsnmpdをインストールする。
$ sudo -E apt-get install snmpd snmp パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています 状態情報を読み取っています... 完了 以下の追加パッケージがインストールされます: libperl5.20 libsensors4 libsnmp-base libsnmp30 提案パッケージ: lm-sensors snmp-mibs-downloader snmptrapd 以下のパッケージが新たにインストールされます: libperl5.20 libsensors4 libsnmp-base libsnmp30 snmp snmpd アップグレード: 0 個、新規インストール: 6 個、削除: 0 個、保留: 1 個。 3,836 kB のアーカイブを取得する必要があります。 この操作後に追加で 7,088 kB のディスク容量が消費されます。 続行しますか? [Y/n] y 取得:1 http://mirrordirector.raspbian.org/raspbian/ jessie/main libperl5.20 armhf 5.20.2-3+deb8u6 [1,354 B] 取得:2 http://mirrordirector.raspbian.org/raspbian/ jessie/main libsensors4 armhf 1:3.3.5-2 [48.9 kB] 取得:3 http://mirrordirector.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 2でCactiを導入する</title>
      <link>https://www.shinayoshi.net/post/2017/01/09/setting-cacti/</link>
      <pubDate>Mon, 09 Jan 2017 14:45:15 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2017/01/09/setting-cacti/</guid>
      <description>FortiGate 60DとRaspberry Piを使用して家庭内インターネット接続環境を構築します。 最終的には以下のような構成を想定しています。
今回はhomemon1、homemon2にCactiを導入します。
Cactiのインストール Cactiをインストールします。 途中でApache2の設定やMySQLのパスワードについて聞かれるので適宜回答します。
$ sudo -E apt-get install cacti cacti-spine パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています 状態情報を読み取っています... 完了 以下の追加パッケージがインストールされます: dbconfig-common fontconfig javascript-common libcairo2 libdatrie1 libdbi1 libgraphite2-3 libharfbuzz0b libjs-jquery libjs-jquery-cookie libpango-1.0-0 libpangocairo-1.0-0 libpangoft2-1.0-0 libphp-adodb libpixman-1-0 librrd4 libthai-data libthai0 libxcb-render0 libxcb-shm0 libxrender1 php5-snmp rrdtool snmp 提案パッケージ: moreutils snmp-mibs-downloader php5-adodb librrds-perl 以下のパッケージが新たにインストールされます: cacti cacti-spine dbconfig-common fontconfig javascript-common libcairo2 libdatrie1 libdbi1 libgraphite2-3 libharfbuzz0b libjs-jquery libjs-jquery-cookie libpango-1.0-0 libpangocairo-1.0-0 libpangoft2-1.0-0 libphp-adodb libpixman-1-0 librrd4 libthai-data libthai0 libxcb-render0 libxcb-shm0 libxrender1 php5-snmp rrdtool snmp アップグレード: 0 個、新規インストール: 26 個、削除: 0 個、保留: 1 個。 6,777 kB のアーカイブを取得する必要があります。 この操作後に追加で 16.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 2でZabbixサーバを構築する(Agent導入)</title>
      <link>https://www.shinayoshi.net/post/2017/01/09/setting-zabbix-agent/</link>
      <pubDate>Mon, 09 Jan 2017 12:04:12 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2017/01/09/setting-zabbix-agent/</guid>
      <description>FortiGate 60DとRaspberry Piを使用して家庭内インターネット接続環境を構築します。 最終的には以下のような構成を想定しています。
前回はZabbix Serverを導入しました。 今回はhomenas1、homemon1、homemon2、homepxy1、homepot1にZabbix Agentを導入していきます。
Zabbix Agentのインストール Zabbix Agentをインストールします。
$ sudo -E apt-get install zabbix-agent パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています 状態情報を読み取っています... 完了 以下の追加パッケージがインストールされます: libcurl3-gnutls libpci3 pciutils 以下のパッケージが新たにインストールされます: libcurl3-gnutls libpci3 pciutils zabbix-agent アップグレード: 0 個、新規インストール: 4 個、削除: 0 個、保留: 1 個。 819 kB のアーカイブを取得する必要があります。 この操作後に追加で 2,344 kB のディスク容量が消費されます。 続行しますか? [Y/n] y 取得:1 http://mirrordirector.raspbian.org/raspbian/ jessie/main libpci3 armhf 1:3.2.1-3 [48.2 kB] 取得:2 http://mirrordirector.raspbian.org/raspbian/ jessie/main libcurl3-gnutls armhf 7.38.0-4+deb8u5 [225 kB] 取得:3 http://mirrordirector.raspbian.org/raspbian/ jessie/main pciutils armhf 1:3.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 2でZabbixサーバを構築する</title>
      <link>https://www.shinayoshi.net/post/2017/01/08/setting-zabbix-server/</link>
      <pubDate>Sun, 08 Jan 2017 20:40:44 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2017/01/08/setting-zabbix-server/</guid>
      <description>FortiGate 60DとRaspberry Piを使用して家庭内インターネット接続環境を構築します。 最終的には以下のような構成を想定しています。
前回に引き続きhomemon1、homemon2を構築していきます。 本環境の監視を行うためにZabbixを導入します。
Zabbix Serverのインストール $ sudo -E apt-get install zabbix-server-mysql zabbix-frontend-php php5-mysql task-japanese パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています 状態情報を読み取っています... 完了 以下の追加パッケージがインストールされます: apache2 apache2-bin apache2-data apache2-utils bdf2psf fbterm fontconfig-config fonts-dejavu-core fping libaio1 libapache2-mod-php5 libapr1 libaprutil1 libaprutil1-dbd-sqlite3 libaprutil1-ldap libcurl3-gnutls libdbd-mysql-perl libdbi-perl libfontconfig1 libfontenc1 libgd3 libhtml-template-perl libiksemel3 libjbig0 libltdl7 liblua5.1-0 libmysqlclient18 libodbc1 libonig2 libopenipmi0 libpci3 libperl4-corelibs-perl libperl5.20 libqdbm14 libsensors4 libsnmp-base libsnmp30 libterm-readkey-perl libtiff5 libvpx1 libxfont1 libxpm4 lsof lv manpages-ja manpages-ja-dev mysql-client-5.5 mysql-common mysql-server mysql-server-5.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 2でSyslogサーバを構築する</title>
      <link>https://www.shinayoshi.net/post/2017/01/07/setting-rsyslog/</link>
      <pubDate>Sat, 07 Jan 2017 16:09:11 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2017/01/07/setting-rsyslog/</guid>
      <description>FortiGate 60DとRaspberry Piを使用して家庭内インターネット接続環境を構築します。 最終的には以下のような構成を想定しています。
前回に引き続きhomemon1、homemon2を構築していきます。 FortiGate 60Dの通過ログやセキュリティイベントログを記録するためにSyslogサーバを構築します。
rsyslogの設定 ネットワーク機器のSyslogを保存する用の設定
ネットワーク機器のIPアドレスまたはホスト名でディレクトリを作成し、IPアドレスまたはホスト名でログファイルを作成する。 例）/var/log/network-device/ホスト名/ホスト名.log
$ sudo cp -p /etc/rsyslog.conf{,.org} $ ls -l /etc/rsyslog.conf* -rw-r--r-- 1 root root 2632 12月 14 2015 /etc/rsyslog.conf -rw-r--r-- 1 root root 2632 12月 14 2015 /etc/rsyslog.conf.org $ $ sudo vi /etc/rsyslog.conf #$ModLoad imudp #$UDPServerRun 514 $ModLoad imudp $UDPServerRun 514 $WorkDirectory /var/spool/rsyslog # # Queue # $MainMsgQueueType LinkedList #$ActionQueueType Direct $ diff /etc/rsyslog.conf.org /etc/rsyslog.conf 16,17c16,17 &amp;lt; #$ModLoad imudp &amp;lt; #$UDPServerRun 514 --- &amp;gt; $ModLoad imudp &amp;gt; $UDPServerRun 514 46a47,52 &amp;gt; &amp;gt; # &amp;gt; # Queue &amp;gt; # &amp;gt; $MainMsgQueueType LinkedList &amp;gt; #$ActionQueueType Direct $ $ sudo vi /etc/rsyslog.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 2でNTPサーバを構築する</title>
      <link>https://www.shinayoshi.net/post/2017/01/07/setting-ntp-server/</link>
      <pubDate>Sat, 07 Jan 2017 13:05:24 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2017/01/07/setting-ntp-server/</guid>
      <description>FortiGate 60DとRaspberry Piを使用して家庭内インターネット接続環境を構築します。 最終的には以下のような構成を想定しています。
今回はhomemon1、homemon2を構築していきます。 まずは本環境内の機器から時刻同期を行えるようにNTPサーバを構築します。
NTPサーバの構築 $ sudo cp -p /etc/ntp.conf{,.backup20170107} $ ls -l /etc/ntp.conf* -rw-r--r-- 1 root root 2052 9月 23 13:25 /etc/ntp.conf -rw-r--r-- 1 root root 2052 9月 23 13:25 /etc/ntp.conf.backup20170107 -rw-r--r-- 1 root root 1988 7月 26 07:36 /etc/ntp.conf.org $ $ sudo vi /etc/ntp.conf # Clients from this (example!) subnet have unlimited access, but only if # cryptographically authenticated. #restrict 192.168.123.0 mask 255.255.255.0 notrust restrict 192.168.10.0 mask 255.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 2のセキュリティ設定を強化する</title>
      <link>https://www.shinayoshi.net/post/2017/01/07/setting-cowrie-security/</link>
      <pubDate>Sat, 07 Jan 2017 01:02:37 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2017/01/07/setting-cowrie-security/</guid>
      <description>FortiGate 60DとRaspberry Piを使用して家庭内インターネット接続環境を構築します。 最終的には以下のような構成を想定しています。
前回に引き続きhomepot1を構築していきます。 Cowrieを使用するにあたりやっておきたいセキュリティ設定を行っていきます。
IPv6の無効化 IPv6は使用しないため、IPv6を無効化します。
$ sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1 net.ipv6.conf.all.disable_ipv6 = 1 $ $ sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1 net.ipv6.conf.default.disable_ipv6 = 1 $ $ sudo sysctl -a | grep disable_ipv6 sysctl: reading key &amp;quot;net.ipv6.conf.all.stable_secret&amp;quot; net.ipv6.conf.all.disable_ipv6 = 1 sysctl: reading key &amp;quot;net.ipv6.conf.default.stable_secret&amp;quot; net.ipv6.conf.default.disable_ipv6 = 1 sysctl: reading key &amp;quot;net.ipv6.conf.eth0.stable_secret&amp;quot; net.ipv6.conf.eth0.disable_ipv6 = 1 sysctl: reading key &amp;quot;net.ipv6.conf.eth1.stable_secret&amp;quot; net.ipv6.conf.eth1.disable_ipv6 = 1 sysctl: reading key &amp;quot;net.ipv6.conf.lo.stable_secret&amp;quot; net.ipv6.conf.lo.disable_ipv6 = 1 $ 再起動後もIPv6が無効化するように設定します。</description>
    </item>
    
    <item>
      <title>Raspberry Pi 2でHoney Pot(Cowrie)を視覚化する</title>
      <link>https://www.shinayoshi.net/post/2017/01/05/setting-kippo-graph/</link>
      <pubDate>Thu, 05 Jan 2017 03:34:58 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2017/01/05/setting-kippo-graph/</guid>
      <description>FortiGate 60DとRaspberry Piを使用して家庭内インターネット接続環境を構築します。 最終的には以下のような構成を想定しています。
前回に引き続きhomepot1を構築していきます。
Kippo-GraphによるSSHハニーポット(Cowrie)の可視化 MySQLのインストールと初期化 MySQLをインストールします。 インストール途中でMySQLのrootアカウントのパスワードを求められるので、適宜設定します。
$ sudo -E apt-get install mysql-server パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています 状態情報を読み取っています... 完了 以下の追加パッケージがインストールされます: libaio1 libdbd-mysql-perl libdbi-perl libhtml-template-perl libmysqlclient18 libterm-readkey-perl mysql-client-5.5 mysql-common mysql-server-5.5 mysql-server-core-5.5 提案パッケージ: libclone-perl libmldbm-perl libnet-daemon-perl libsql-statement-perl libipc-sharedcache-perl mailx tinyca 以下のパッケージが新たにインストールされます: libaio1 libdbd-mysql-perl libdbi-perl libhtml-template-perl libmysqlclient18 libterm-readkey-perl mysql-client-5.5 mysql-common mysql-server mysql-server-5.5 mysql-server-core-5.5 アップグレード: 0 個、新規インストール: 11 個、削除: 0 個、保留: 0 個。 8,275 kB のアーカイブを取得する必要があります。 この操作後に追加で 89.3 MB のディスク容量が消費されます。 続行しますか? [Y/n] y 取得:1 http://mirrordirector.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 2でHoney Pot(Cowrie)を構築する</title>
      <link>https://www.shinayoshi.net/post/2017/01/04/setting-cowrie/</link>
      <pubDate>Wed, 04 Jan 2017 17:53:55 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2017/01/04/setting-cowrie/</guid>
      <description>FortiGate 60DとRaspberry Piを使用して家庭内インターネット接続環境を構築します。 最終的には以下のような構成を想定しています。
今回はhomepot1を構築していきます。
Raspberry Pi 2でSSHハニーポット(Cowrie)構築 インターネットの怖さを知るためにSSHハニーポットを構築します。
公開鍵認証方式の設定 公開鍵・秘密鍵の作成
$ ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/home/pi/.ssh/id_rsa): Created directory &#39;/home/pi/.ssh&#39;. Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/pi/.ssh/id_rsa. Your public key has been saved in /home/pi/.ssh/id_rsa.pub. The key fingerprint is: XX:XX:XX:39:e2:be:63:99:e1:a2:a5:32:f4:XX:XX:XX pi@homepot1 The key&#39;s randomart image is: +---[RSA 2048]----+ | | | | | | | | | .</description>
    </item>
    
    <item>
      <title>Raspberry Pi 2でSquidサーバを構築する</title>
      <link>https://www.shinayoshi.net/post/2017/01/03/setting-proxy/</link>
      <pubDate>Tue, 03 Jan 2017 23:25:23 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2017/01/03/setting-proxy/</guid>
      <description>FortiGate 60DとRaspberry Piを使用して家庭内インターネット接続環境を構築します。 最終的には以下のような構成を想定しています。
前回に引き続きhomepxy1を構築していきます。
Raspberry Pi 2でプロキシサーバ構築 家庭内インターネット接続環境からインターネットに接続するためにキャッシュDNSサーバとプロキシサーバを構築します。 今回はプロキシサーバを構築していきます。
Squidの設定 squidのインストール
$ sudo apt-get install squid パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています 状態情報を読み取っています... 完了 以下の追加パッケージがインストールされます: squid-common squid-langpack 提案パッケージ: squidclient squid-cgi logcheck-database smbclient winbind 以下のパッケージが新たにインストールされます: squid squid-common squid-langpack アップグレード: 0 個、新規インストール: 3 個、削除: 0 個、保留: 1 個。 1,106 kB のアーカイブを取得する必要があります。 この操作後に追加で 3,882 kB のディスク容量が消費されます。 続行しますか? [Y/n] y 取得:1 http://mirrordirector.raspbian.org/raspbian/ jessie/main squid-langpack all 20140506-1 [150 kB] 取得:2 http://mirrordirector.raspbian.org/raspbian/ jessie/main squid-common all 2.7.STABLE9-4.1 [352 kB] 取得:3 http://mirrordirector.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 2でCache DNSを構築する</title>
      <link>https://www.shinayoshi.net/post/2017/01/03/setting-cache-dns/</link>
      <pubDate>Tue, 03 Jan 2017 22:22:47 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2017/01/03/setting-cache-dns/</guid>
      <description>FortiGate 60DとRaspberry Piを使用して家庭内インターネット接続環境を構築します。 最終的には以下のような構成を想定しています。
今回はhomepxy1を構築していきます。
Raspberry Pi 2でキャッシュDNSサーバ構築 家庭内インターネット接続環境からインターネットに接続するためにキャッシュDNSサーバとプロキシサーバを構築します。 まずはキャッシュDNSサーバを構築していきます。
bind9の設定 bind9のインストール
$ sudo apt-get install bind9 dnsutils パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています 状態情報を読み取っています... 完了 以下の追加パッケージがインストールされます: bind9utils 提案パッケージ: bind9-doc ufw rblcheck 以下のパッケージが新たにインストールされます: bind9 bind9utils dnsutils アップグレード: 0 個、新規インストール: 3 個、削除: 0 個、保留: 1 個。 562 kB のアーカイブを取得する必要があります。 この操作後に追加で 1,620 kB のディスク容量が消費されます。 続行しますか? [Y/n] y 取得:1 http://mirrordirector.raspbian.org/raspbian/ jessie/main dnsutils armhf 1:9.9.5.dfsg-9+deb8u8 [113 kB] 取得:2 http://mirrordirector.raspbian.org/raspbian/ jessie/main bind9utils armhf 1:9.9.5.dfsg-9+deb8u8 [157 kB] 取得:3 http://mirrordirector.raspbian.org/raspbian/ jessie/main bind9 armhf 1:9.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 2でファイルサーバを構築する(NFS/Samba)</title>
      <link>https://www.shinayoshi.net/post/2017/01/02/setting-fileserver/</link>
      <pubDate>Mon, 02 Jan 2017 20:30:05 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2017/01/02/setting-fileserver/</guid>
      <description>FortiGate 60DとRaspberry Piを使用して家庭内インターネット接続環境を構築します。 最終的には以下のような構成を想定しています。
前回に引き続きhomenas1を構築していきます。
Raspberry Pi 2でファイルサーバ構築(NFS/Samba) 前回はUSB Storageを使用してRAIDデバイスを設定しました。 今回はNFSやSambaの設定を行っていきます。
NFSの設定 NFSのインストール
$ sudo apt-get install nfs-kernel-server パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています 状態情報を読み取っています... 完了 以下のパッケージが新たにインストールされます: nfs-kernel-server アップグレード: 0 個、新規インストール: 1 個、削除: 0 個、保留: 1 個。 101 kB のアーカイブを取得する必要があります。 この操作後に追加で 373 kB のディスク容量が消費されます。 取得:1 http://mirrordirector.raspbian.org/raspbian/ jessie/main nfs-kernel-server armhf 1:1.2.8-9 [101 kB] 101 kB を 1秒 で取得しました (66.7 kB/s) 以前に未選択のパッケージ nfs-kernel-server を選択しています。 (データベースを読み込んでいます ... 現在 31534 個のファイルとディレクトリがインストールされています。) .../nfs-kernel-server_1%3a1.2.8-9_armhf.deb を展開する準備をしています ... nfs-kernel-server (1:1.2.8-9) を展開しています... systemd (215-17+deb8u5) のトリガを処理しています .</description>
    </item>
    
    <item>
      <title>Raspberry Pi 2でファイルサーバを構築する(mdadm)</title>
      <link>https://www.shinayoshi.net/post/2017/01/01/setting-usb-storage/</link>
      <pubDate>Sun, 01 Jan 2017 18:28:38 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2017/01/01/setting-usb-storage/</guid>
      <description>FortiGate 60DとRaspberry Piを使用して家庭内インターネット接続環境を構築します。 最終的には以下のような構成を想定しています。
今回はhomenas1を構築していきます。
Raspberry Pi 2でファイルサーバ構築(mdadm) 家庭内インターネット接続環境で使用するファイルサーバを構築します。 ファイルサーバの利用目的は以下の3つです。
 LAN内のファイル共有 Raspberry Piバックアップ Syslog等のログ保管  今回はUSB Storageを使用する準備までを行います。 次回はNFSやSambaの設定を行っていきます。
用意したもの    品名 台数     Raspberry Pi 2 1台   USB Storage 1TB 3台   USB Hub 1台    物理構成 物理構成は以下のような構成を想定しています。
設定 mdadmのインストール $ sudo apt-get update $ sudo apt-get upgrade $ sudo apt-get install mdadm パッケージリストを読み込んでいます... 完了 依存関係ツリーを作成しています 状態情報を読み取っています... 完了 以下の追加パッケージがインストールされます: bsd-mailx exim4-base exim4-config exim4-daemon-light liblockfile-bin liblockfile1 提案パッケージ: mail-reader eximon4 exim4-doc-html exim4-doc-info spf-tools-perl swaks 推奨パッケージ: mailx default-mta mail-transport-agent 以下のパッケージが新たにインストールされます: bsd-mailx exim4-base exim4-config exim4-daemon-light liblockfile-bin liblockfile1 mdadm アップグレード: 0 個、新規インストール: 7 個、削除: 0 個、保留: 1 個。 2,630 kB のアーカイブを取得する必要があります。 この操作後に追加で 4,960 kB のディスク容量が消費されます。 続行しますか?</description>
    </item>
    
    <item>
      <title>Raspberry Pi 2の初期設定</title>
      <link>https://www.shinayoshi.net/post/2016/10/22/raspberrypi-initial-setup/</link>
      <pubDate>Sat, 22 Oct 2016 22:43:46 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2016/10/22/raspberrypi-initial-setup/</guid>
      <description>Raspberry Pi 2共通初期設定 家庭内インターネット接続環境で使用するRaspberry Pi 2の初期設定を行います。
前提 Raspberry Pi 2にRaspbian Jessie(2016-09-23-raspbian-jessie-lite.img)をインストールした環境の初期設定を想定します。 セキュリティ関連の設定は個別に行いますので、ここでは省略します。
パッケージ更新 $ sudo apt-get update $ sudo apt-get upgrade  Updating and Upgrading Raspbian - Raspberry Pi Documentation  IPアドレス固定化 Raspberry Pi 2のIPアドレスを固定する。
$ sudo cp -p /etc/dhcpcd.conf /etc/dhcpcd.conf.org $ sudo vi /etc/dhcpcd.conf #Add the following line interface eth0 static ip_address=192.168.40.10/24 static routers=192.168.40.254 static domain_name_servers=192.168.100.1 #static domain_name= #static domain_search= interface eth1 static ip_address=172.31.10.110/24 static routers= static domain_name_servers= #static domain_name= #static domain_search=  &amp;ldquo;man dhcpcd.</description>
    </item>
    
    <item>
      <title>家庭内インターネット接続環境を構築する</title>
      <link>https://www.shinayoshi.net/post/2016/10/22/build-home-network-01/</link>
      <pubDate>Sat, 22 Oct 2016 19:59:16 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2016/10/22/build-home-network-01/</guid>
      <description>FortiGate 60DとRaspberry Piを使用して家庭内インターネット接続環境を構築します。 最終的には以下のような構成を想定しています。
機材 本環境を構築するために以下の機材を用意しました。
 FortiGate 60D : 1台 Raspberry Pi 2 : 5台 USB LANアダプタ : 5個 Switching HUB : 3台 WANルータ : 1台  具体的な構築内容は次回から記載します。</description>
    </item>
    
    <item>
      <title>Raspbian(Jessie)でキャッシュDNSを構築する</title>
      <link>https://www.shinayoshi.net/post/2016/08/24/cache-dns-on-raspbian/</link>
      <pubDate>Wed, 24 Aug 2016 19:15:14 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2016/08/24/cache-dns-on-raspbian/</guid>
      <description>Raspbian(Jessie)でキャッシュDNSを構築するまでのメモです。 Raspbianの基本的な設定は完了している前提です。
bind9のインストール $ sudo apt-get install bind9 dnsutils bind9の設定を行う。変更箇所が多かったので、変更箇所ではなく変更後のコンフィグを提示する。
$ sudo cat /etc/bind/named.conf.options controls { inet 127.0.0.1 allow { localhost; } keys { rndc-key; }; }; include &amp;quot;/etc/bind/rndc.key&amp;quot;; acl &amp;quot;internal-network&amp;quot; { localhost; 127.0.0.1/32; 192.168.10.0/24; 192.168.20.0/24; 192.168.30.0/24; 192.168.40.0/24; }; options { version &amp;quot;unknown&amp;quot;; directory &amp;quot;/var/cache/bind&amp;quot;; listen-on { internal-network; }; querylog yes; allow-query { internal-network; }; recursion yes; allow-recursion { internal-network; }; forwarders { 192.168.100.1; }; notify no; max-ncache-ttl	300; max-cache-ttl	3600; recursive-clients	300; cleaning-interval	60; lame-ttl	600; max-cache-size	256m; allow-transfer { none; }; allow-update { none; }; }; logging { channel &amp;quot;log_default&amp;quot; { file &amp;quot;/var/log/bind/named.</description>
    </item>
    
    <item>
      <title>Raspbian(Jessie)にSquidをインストールする</title>
      <link>https://www.shinayoshi.net/post/2016/08/22/installing-squid-on-raspbian/</link>
      <pubDate>Mon, 22 Aug 2016 22:24:35 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2016/08/22/installing-squid-on-raspbian/</guid>
      <description>Raspbian(Jessie)にSquidをインストールして内部NW向けプロキシサーバを構築するまでのメモです。
Raspbianの初期設定 過去のブログ記事を参考に初期設定を実施する。
 パッケージの最新化 パッケージのインストール &amp;ndash; chkconfig &amp;ndash; tcpdump &amp;ndash; telnet &amp;ndash; dnsutils IPアドレスの固定化 NTP設定 rpi-configの設定 &amp;ndash; ディスク拡張 &amp;ndash; 文字コード設定 &amp;ndash; タイムゾーン設定 &amp;ndash; Wifiの国設定 &amp;ndash; ホスト名変更 公開鍵認証方式の設定 IPv6の無効化 SELinuxの無効化 iptablesの設定 logwatchのインストール Zabbix Agentのインストール・監視登録 SNMPDのインストール・Cacti登録  Squidのインストール Squidをインストールする。
$ sudo apt-get install squid Squidを設定する。
$ sudo cp -p /etc/squid/squid.conf{,.org} $ sudo vi /etc/squid/squid.conf $ sudo diff /etc/squid/squid.conf.org /etc/squid/squid.conf 609,611c609,616 &amp;lt; acl localnet src 10.0.0.0/8	# RFC1918 possible internal network &amp;lt; acl localnet src 172.</description>
    </item>
    
    <item>
      <title>Cactiにデバイスを登録する</title>
      <link>https://www.shinayoshi.net/post/2016/08/21/to-register-the-device-in-cacti/</link>
      <pubDate>Sun, 21 Aug 2016 11:05:38 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2016/08/21/to-register-the-device-in-cacti/</guid>
      <description>Cactiに新規デバイスを登録するメモです。 SNMPv3を使用してSNMPの値を取得します。
snmpdのインストール 追加するデバイス(Server)にsnmpdをインストールする。
$ sudo apt-get install snmpd snmp snmpconfツールを使用してsnmpd.confを作成する。 SNMPv3を使用する前提で質問に回答していきます。
$ snmpconf -g basic_setup The following installed configuration files were found: 1: /etc/snmp/snmp.conf 2: /etc/snmp/snmpd.conf Would you like me to read them in? Their content will be merged with the output files created by this session. Valid answer examples: &amp;quot;all&amp;quot;, &amp;quot;none&amp;quot;,&amp;quot;3&amp;quot;,&amp;quot;1,2,5&amp;quot; Read in which (default = all): 2 ************************************************ *** Beginning basic system information setup *** ************************************************ Do you want to configure the information returned in the system MIB group (contact info, etc)?</description>
    </item>
    
    <item>
      <title>Raspbian(Jessie)にCactiをインストールする</title>
      <link>https://www.shinayoshi.net/post/2016/08/20/installing-cacti-on-raspberrypi/</link>
      <pubDate>Sat, 20 Aug 2016 20:46:05 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2016/08/20/installing-cacti-on-raspberrypi/</guid>
      <description>Raspbian(Jessie)にCactiを導入するまでのメモです。 Apache2やMySQLはインストール済みであることを前提としています。
Cactiのインストール Cactiをインストールする。 途中でApache2の設定やMySQLのパスワードについて聞かれるので適宜回答する。
$ sudo apt-get install cacti cacti-spine ↓&amp;lt;了解&amp;gt;を選択してEnter ┌─────────────────────┤ libphp-adodb を設定しています ├─────────────────────┐ │ │ │ 警告: php に対するインクルードパスが変更されています! │ │ │ │ libphp-adobd は /usr/share/adodb にインストールされなくなっています。新 │ │ しいインストールのパスは /usr/share/php/adodb です。 │ │ │ │ php.ini ファイルを更新してください。web サーバの設定も変更する必要がある │ │ かもしれません。 │ │ │ │ &amp;lt;了解&amp;gt; │ │ │ └───────────────────────────────────────────────────────────────────────────┘ ↓apache2を選択してEnter ┌────────────────────────┤ cacti を設定しています ├─────────────────────────┐ │ Cacti が自動的に設定するウェブサーバを選んでください。 │ │ │ │ ウェブサーバを手作業で設定したい場合は「どれでもない」を選んでください。 │ │ │ │ ウェブサーバ: │ │ │ │ apache2 │ │ lighttpd │ │ どれでもない │ │ │ │ │ │ &amp;lt;了解&amp;gt; │ │ │ └───────────────────────────────────────────────────────────────────────────┘ ↓&amp;lt;はい&amp;gt;を選択してEnter ┌────────────────────────┤ cacti を設定しています ├─────────────────────────┐ │ │ │ cacti は利用できるようになる前にはデータベースをインストールして設定する │ │ 必要があります。この設定を dbconfig-common で管理するようにもできます。 │ │ │ │ あなたが熟練したデータベース管理者でこの設定について手動で何をするのかを │ │ 知っている場合、あるいはデータベースが既にインストール及び設定されている │ │ 場合は、この選択を選ばない方が良いでしょう。何をすればいいのかについての │ │ 詳細については、大抵 /usr/share/doc/cacti に置かれています。 │ │ │ │ そうでない場合は、恐らくこの設定を選ぶのが良いでしょう。 │ │ │ │ cacti のデータベースを dbconfig-common で設定しますか?</description>
    </item>
    
    <item>
      <title>Cowrieのセキュリティ設定</title>
      <link>https://www.shinayoshi.net/post/2016/08/16/security-setting-on-cowrie/</link>
      <pubDate>Tue, 16 Aug 2016 18:59:00 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2016/08/16/security-setting-on-cowrie/</guid>
      <description>前回まででCowrieのインストールやKippo-Graphでの可視化を行った。 Cowrieを使用するにあたり追加でやっておきたいセキュリティ設定をメモする。
IPv6の無効化 IPv6は使用しないため、IPv6を無効化する。
$ sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1 $ sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1 $ sudo sysctl -a | grep disable_ipv6 再起動後もIPv6が無効化するように設定する。
$ sudo vi /etc/sysctl.d/10-disableipv6.conf net.ipv6.conf.all.disable_ipv6=1 net.ipv6.conf.default.disable_ipv6=1 SELinuxの無効化 Raspbian(Jessie)ではデフォルトでSELinuxが使えないようなので、特にやることなし。
iptablesの設定 iptablesでfirewallを設定する。
#Cowrieポートのポートフォワード(別手順で設定済み) #$ sudo iptables -t nat -A PREROUTING -p tcp --dport 22 -j REDIRECT --to-port 2222 ##INPUTチェーン #IPスプーフィング対策 $ sudo iptables -A INPUT -p tcp --tcp-flags SYN,ACK SYN,ACK -m state --state NEW -j REJECT --reject-with tcp-reset #セッションハイジャック対策 $ sudo iptables -A INPUT -p tcp !</description>
    </item>
    
    <item>
      <title>Kippo-GraphをインストールしてCowrieのログを可視化する</title>
      <link>https://www.shinayoshi.net/post/2016/08/16/install-kippo-graph/</link>
      <pubDate>Tue, 16 Aug 2016 08:43:57 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2016/08/16/install-kippo-graph/</guid>
      <description>Kippo-Graphの公式(Kippo-Graph - BruteForce Lab&amp;rsquo;s Blog)を参考にKippo-Graphをインストールするまでのメモです。
MySQLのインストールと初期設定 MySQLをインストールする。
インストール途中でMySQLのrootアカウントのパスワードを求められるので、適宜設定する。
$ sudo apt-get update $ sudo apt-get install mysql-server MySQLのセキュア設定
$ mysql_secure_installation NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL SERVERS IN PRODUCTION USE! PLEASE READ EACH STEP CAREFULLY! In order to log into MySQL to secure it, we&#39;ll need the current password for the root user. If you&#39;ve just installed MySQL, and you haven&#39;t set the root password yet, the password will be blank, so you should just press enter here.</description>
    </item>
    
    <item>
      <title>Raspbian(Jessie)にCowrieをインストールする</title>
      <link>https://www.shinayoshi.net/post/2016/08/15/install-cowrie-on-raspbian/</link>
      <pubDate>Mon, 15 Aug 2016 20:46:34 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2016/08/15/install-cowrie-on-raspbian/</guid>
      <description>Raspbian(jessie)にCowrieをインストールしてSSHハニーポットを構築するメモです。 はじめはKippoを使用する予定だったのですが、Kippoの改良版であるCowrieを使用することにしました。
個人のメモですので、もし本メモを参考にハニーポットを構築する際は自己責任でお願いします。
Raspbianの初期設定 Raspbianの初期設定として以下を行いました。
パッケージの最新化 $ sudo apt-get update $ sudo apt-get upgrade IPアドレスの固定化 $ sudo vi /etc/dhcpcd.conf #Add the following line interface eth0 static ip_address=192.168.10.10/24 static routers=192.168.10.254 static domain_name_servers=192.168.100.1 #static domain_name= #static domain_search= NTP設定 NTP同期先を設定する。
$ sudo vi /etc/ntp.conf #Add the line server ntp.nict.jp iburst server ntp.jst.mfeed.ad.jp iburst # comment out #server 0.debian.pool.ntp.org iburst #server 1.debian.pool.ntp.org iburst #server 2.debian.pool.ntp.org iburst #server 3.debian.pool.ntp.org iburst NTPサーバを再起動する。
$ sudo systemctl restart ntp 時刻同期の状態を確認する。</description>
    </item>
    
    <item>
      <title>Raspbian(Jessie)にFortiGateのプライベートMIBを追加する</title>
      <link>https://www.shinayoshi.net/post/2016/08/13/add-fortigate-mib-on-raspbian/</link>
      <pubDate>Sat, 13 Aug 2016 00:34:26 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2016/08/13/add-fortigate-mib-on-raspbian/</guid>
      <description>Raspbian(Jessie)にFortiGateのプライベートMIBを追加するまでのメモです。
MIBファイルのアップロード FortiGateのプライベートMIB(FORTINET-CORE-MIB.mib、FORTINET-FORTIGATE-MIB.mib)を/home/pi直下にアップロードします。
プライベートMIBの設定 プライベートMIBファイルを/usr/share/snmp/mibs/vendorに移動する。
$ sudo mkdir /usr/share/snmp/mibs/vendor $ sudo mv FORTINET-* /usr/share/snmp/mibs/vendor/ $ sudo chown root:root /usr/share/snmp/mibs/vendor/FORTINET-* プライベートMIBを使用するようにsnmp.confを設定する。
$ sudo vi /etc/snmp/snmp.conf mibdirs +/usr/share/snmp/mibs/vendor mibs +FORTINET-CORE-MIB:FORTINET-FORTIGATE-MIB プライベートMIBの設定確認 FortiGateのMIBフィールド名が表示されることを確認する。
$ snmpwalk -v 2c -c public 192.168.1.1 .1.3.6.1.4.1.12356.101.4.1.4 FORTINET-FORTIGATE-MIB::fgSysMemUsage.0 = Gauge32: 29 以上</description>
    </item>
    
    <item>
      <title>ZabbixでSNMPデバイスの監視を行う</title>
      <link>https://www.shinayoshi.net/post/2016/08/11/monitoring-snmp-devices-on-zabbix/</link>
      <pubDate>Thu, 11 Aug 2016 15:51:09 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2016/08/11/monitoring-snmp-devices-on-zabbix/</guid>
      <description>Raspbian(Jessie)にインストールしたZabbixでSNMPデバイスの監視を行うまでのメモです。
とりあえずSNMP Deviceの監視ができるようになりましたが、なぜこの手順でよいのか理解できていない部分が多いです。
パッケージの更新 Zabbix Serverのパッケージを最新する。
$ sudo apt-get update $ sudo apt-get upgrade SNMP関連パッケージのインストール Zabbix ServerにSNMP関連のパッケージをインストールする。
$ sudo apt-get install snmp snmp-mibs-downloader SNMPの設定 /usr/bin/download-mibsでダウンロードしたMIBSを読み込めるように設定する。
$ sudo vi /etc/snmp/snmp.conf #mibs : メモ：デフォルトでは以下のディレクトリを検索する。snmpstatus --helpの出力で確認。
${HOME}/.snmp/mibs /usr/share/snmp/mibs /usr/share/snmp/mibs/iana /usr/share/snmp/mibs/ietf /usr/share/mibs/site /usr/share/snmp/mibs /usr/share/mibs/iana /usr/share/mibs/ietf /usr/share/mibs/netsnmp Zabbix Serverの再起動 Zabbix Serverを再起動してSNMPの設定を読み込む(本当に必要？)。
$ sudo systemctl restart zabbix-server Zabbix ServerでのSNMP Device監視設定 ブラウザからZabbix ServerのURL(http://IPアドレス/zabbix)にアクセスしてログインする。
「設定」⇒「ホスト」⇒「ホストの作成」を選択する。
ホストの設定画面が表示されるので最低限以下を設定する。
&amp;ldquo;ホスト&amp;quot;タブ
 ホスト名：監視対象機器のホスト名。 グループ：所属するグループ。適切なグループがなければ新規作成。 エージェントのインターフェース：削除。 SNMPインターフェース：追加。監視対象機器のIPアドレスを設定。  &amp;ldquo;テンプレート&amp;quot;タブ
 テンプレートとのリンク：&amp;ldquo;Template SNMP Device&amp;quot;を追加。  &amp;ldquo;マクロ&amp;quot;タブ</description>
    </item>
    
    <item>
      <title>Raspbian(Jessie)にZabbix Agentをインストール</title>
      <link>https://www.shinayoshi.net/post/2016/08/11/install-zabbix-agent-on-raspbian/</link>
      <pubDate>Thu, 11 Aug 2016 11:51:20 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2016/08/11/install-zabbix-agent-on-raspbian/</guid>
      <description>Raspbian(Jessie)にZabbix Agentをインストールしてサーバ監視を行うまでのメモです。 Zabbix Serverのインストールは別のメモになります。
パッケージの更新 Raspbianのパッケージを最新する。
$ sudo apt-get update $ sudo apt-get upgrade Zabbix Agentのインストール Zabbix Agentのインストール
$ sudo apt-get install zabbix-agent Zabbix Agentの設定 Zabbix Agentを設定する。
$ sudo vi /etc/zabbix/zabbix_agentd.conf Server=(Zabbix server IP address) ServerActive=(Zabbix server IP address) Hostname=(Hostname) $ sudo systemctl restart zabbix-agent Zabbix Serverでの監視登録 ブラウザからZabbix ServerのURL(http://IPアドレス/zabbix)にアクセスしてログインする。
「設定」⇒「ホスト」⇒「ホストの作成」を選択する。
ホスト名の設定やテンプレートの選択を行い、保存を選択する。
以上</description>
    </item>
    
    <item>
      <title>Raspbian(Jessie)にZabbix Serverをインストール</title>
      <link>https://www.shinayoshi.net/post/2016/08/10/install-zabbix-server-on-raspbian/</link>
      <pubDate>Wed, 10 Aug 2016 00:04:16 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2016/08/10/install-zabbix-server-on-raspbian/</guid>
      <description>Raspbian(Jessie)にZabbix Serverをインストールするメモです。 Zabbix Agentのインストールは別のメモになります。
 3 Installation from packages [Zabbix Documentation 2.2]  パッケージの更新 Raspbianのパッケージを最新する。
$ sudo apt-get update $ sudo apt-get upgrade Zabbix Serverのインストール Zabbix Serverのインストール
インストール途中でMySQLのrootアカウントのパスワードを求められるので、適宜設定する。
$ sudo apt-get install zabbix-server-mysql zabbix-frontend-php $ sudo apt-get install php5-mysql $ sudo apt-get install task-japanese MySQLの初期設定 MySQLのセキュア設定
$ mysql_secure_installation In order to log into MySQL to secure it, we&#39;ll need the current password for the root user. If you&#39;ve just installed MySQL, and you haven&#39;t set the root password yet, the password will be blank, so you should just press enter here.</description>
    </item>
    
    <item>
      <title>Raspbianをバックアップ・リストアする</title>
      <link>https://www.shinayoshi.net/post/2016/08/07/backup-raspbian/</link>
      <pubDate>Sun, 07 Aug 2016 22:29:12 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2016/08/07/backup-raspbian/</guid>
      <description>RaspbianをSDカード丸ごとバックアップ・リストアするメモです。 今回はddコマンドを使ってディスクイメージを書き出す方法でバックアップ・リストアを行います。
バックアップ SDカードデバイスを確認する。
$ diskutil list /dev/disk1 #: TYPE NAME SIZE IDENTIFIER 0: FDisk_partition_scheme *32.2 GB disk1 1: Windows_FAT_32 boot 66.1 MB disk1s1 2: Linux 32.2 GB disk1s2 SDカードデバイスをアンマウントする。
$ diskutil unmountDisk /dev/disk1 Unmount of all volumes on disk1 was successful SDカードのディスクイメージをバックアップする。
$ sudo dd bs=1m if=/dev/rdisk1 of=~/Desktop/raspi_backup.img Password: 30735+0 records in 30735+0 records out 32227983360 bytes transferred in 1610.088954 secs (20016275 bytes/sec) SDカードデバイスを取り出す。
$ diskutil eject /dev/disk1 Disk /dev/disk1 ejected リストア SDカードデバイスを確認する。</description>
    </item>
    
    <item>
      <title>RaspbianにKivyをセットアップ</title>
      <link>https://www.shinayoshi.net/post/2016/07/16/raspberrypi-kivy-setup/</link>
      <pubDate>Sat, 16 Jul 2016 20:49:31 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2016/07/16/raspberrypi-kivy-setup/</guid>
      <description>Raspberry Pi 7&amp;quot; Touch Screen LCDに接続したRaspberry Pi 3 (Raspbian)にKivyをインストールしてデモを動かすまでのメモです。
Kivyのインストール Kivyに必要なパッケージをインストールする。
$ sudo apt-get update $ sudo apt-get install libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev pkg-config libgl1-mesa-dev libgles2-mesa-dev python-setuptools libgstreamer1.0-dev git-core gstreamer1.0-plugins-{bad,base,good,ugly} gstreamer1.0-{omx,alsa} python-dev cython $ sudo reboot Kivyをインストールする。
$ git clone https://github.com/kivy/kivy $ cd kivy $ make $ echo &amp;quot;export PYTHONPATH=$(pwd):\$PYTHONPATH&amp;quot; &amp;gt;&amp;gt; ~/.profile $ source ~/.profile  Installation on Raspberry Pi — Kivy 1.9.2-dev0 documentation  Raspberry Pi 7&amp;quot; Touch Screen LCDの利用設定 $ vi ~/.</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3にRaspberry Pi 7&#34; Touch Screen LCDを接続</title>
      <link>https://www.shinayoshi.net/post/2016/07/12/raspberrypi-touchscreen-setup/</link>
      <pubDate>Tue, 12 Jul 2016 21:16:20 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2016/07/12/raspberrypi-touchscreen-setup/</guid>
      <description>Raspberry Pi 3のディスプレイとして「Official 7&amp;quot; Touchscreen Display＋フレーム セット（青）」を購入した。 Raspberry Pi 3に接続して最低限使えるようにするまでをメモする。
接続 以下のWebサイトを参考に接続する。
 Raspberry Pi 7インチ タッチ・スクリーン ディスプレイ 接続・取り付け方法 - Raspberry Pi Shop by KSY: The Eagerly Awaited Raspberry Pi Display - Raspberry Pi  天地逆転を直す 購入したフレームを使用すると天地が逆転した状態で起動する(製品仕様)。Raspberry Pi 3側で画面の回転を設定することで天地逆転を直す。
$ sudo vi /boot/config.txt #Add the following line lcd_rotate=2 $ sudo reboot  Getting Started with the Raspberry Pi 7&amp;quot; Touchscreen LCD - Pimoroni Yarr-niversity  日本語環境の整備 日本語関連パッケージをインストールする。余計なパッケージもインストールされてしまいますが、楽な方法ではあります。
$ sudo apt-get install task-japanese task-japanese-desktop スクリーンキーボードのインストール Touchscreen Displayだけで操作を行うために、On Screen Keyboardを導入する。</description>
    </item>
    
    <item>
      <title>Raspberry Pi 3でWiFi設定</title>
      <link>https://www.shinayoshi.net/post/2016/07/10/raspbian-wifi-setup/</link>
      <pubDate>Sun, 10 Jul 2016 09:37:19 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2016/07/10/raspbian-wifi-setup/</guid>
      <description>Raspberry Pi 3には標準でWiFiモジュールが搭載されている。 今回はWiFi設定を行う。
WiFiネットワークのスキャン 接続するWiFiネットワークを確認する。
$ sudo iwlist wlan0 scan アクセスポイントの設定 アクセスポイントを設定する。
$ sudo cp -p /etc/wpa_supplicant/wpa_supplicant.conf{,.org} $ sudo sh -c &amp;quot;wpa_passphrase &#39;アクセスポイント名(ESSID)&#39; &#39;アクセスポイントのパスワード&#39; &amp;gt;&amp;gt; /etc/wpa_supplicant/wpa_supplicant.conf&amp;quot; $ sudo cat /etc/wpa_supplicant/wpa_supplicant.conf country=JP ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=&amp;quot;アクセスポイント名(ESSID)&amp;quot; #psk=&amp;quot;先ほどのコマンドで入力したパスワード(不要であれば削除する)&amp;quot; psk=暗号化されたパスワード } WiFiの有効化 WiFiを有効化する。
$ sudo ifdown wlan0 $ sudo ifup wlan0 $ ifconfig wlan0 IPアドレスの固定化 IPアドレスを固定化する。
$ sudo vi /etc/dhcpcd.conf #Add the following line interface wlan0 static ip_address=192.168.100.10⁄24 static routers=192.168.100.1 static domain_name_servers=192.</description>
    </item>
    
    <item>
      <title>Raspbianの初期設定</title>
      <link>https://www.shinayoshi.net/post/2016/07/09/raspbian-jessie-setup/</link>
      <pubDate>Sat, 09 Jul 2016 21:43:58 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2016/07/09/raspbian-jessie-setup/</guid>
      <description>こちらも何番煎じかわかりませんが、Raspbianをインストールした後の初期設定メモです。
前提 Raspberry Pi 3にRaspbian Jessie (2016-05-27版)をインストールした環境の初期設定を想定する。ただし、セキュリティ関連の設定は省略する(例えば、SSH接続の公開鍵認証設定やFirewall設定、不要サービスの停止など)。
パッケージ更新 $ sudo apt-get update $ sudo apt-get upgrade  Updating and Upgrading Raspbian - Raspberry Pi Documentation  IPアドレス固定化 Raspberry Pi 3のIPアドレスを固定する。
$ sudo vi /etc/dhcpcd.conf #Add the following line interface eth0 static ip_address=192.168.40.10/24 static routers=192.168.40.254 static domain_name_servers=192.168.100.1 #static domain_name= #static domain_search=  &amp;ldquo;man dhcpcd.conf&amp;rdquo;  USBポートの電流供給増加 USBポートの電流供給を1.2A(4ポート合計)まで供給できるようにする。
$ sudo vi /boot/config.txt #Add the following line max_usb_current=1  RPiconfig - eLinux.org  NTP設定 NTP同期先を設定する。</description>
    </item>
    
    <item>
      <title>Raspbianのインストール</title>
      <link>https://www.shinayoshi.net/post/2016/07/09/raspbian-jessie-install/</link>
      <pubDate>Sat, 09 Jul 2016 15:55:37 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2016/07/09/raspbian-jessie-install/</guid>
      <description>何番煎じかわかりませんが、ディスプレイ、キーボード、マウスを使用せずにRaspbianのインストールを行い、リモートPCからSSH接続が行えるようにするまでのメモです。
使用したもの  Raspberry Pi 3 Model B micro SDカード(32GB) USB ACアダプタ(Raspberry Pi 3の電源用) USBケーブル(Raspberry Pi 3の電源用) LANケーブル(Raspberry Pi 3の有線LAN接続用) Mac(作業用)  Raspbianダウンロード 公式サイトからRaspbianをダウンロードする。 2016年7月9日時点の最新バージョンは「2016-05-27-raspbian-jessie.zip」でした。
 Download Raspbian for Raspberry Pi  Raspbian書き込み SDカードにRaspbianのイメージを書き込む。
SDカードデバイスを確認する。
$ diskutil list /dev/disk1 #: TYPE NAME SIZE IDENTIFIER 0: FDisk_partition_scheme *32.2 GB disk1 1: Windows_FAT_32 NO NAME 32.2 GB disk1s1 SDカードデバイスをアンマウントする。
$ diskutil unmountDisk /dev/disk1 Unmount of all volumes on disk1 was successful SDカードにRaspbianのイメージを書き込む。</description>
    </item>
    
    <item>
      <title>ApacheでWebサイトを公開する</title>
      <link>https://www.shinayoshi.net/post/2016/05/15/apache-setup/</link>
      <pubDate>Sun, 15 May 2016 22:14:46 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2016/05/15/apache-setup/</guid>
      <description>ApacheでWebサイトを公開するまでの手順のメモです。
ApacheとPHPのインストール Webサーバ(Apache)とPHPをインストールします。
# yum install httpd php php-mbstring Apacheの設定 Apacheを設定します。
# vi /etc/httpd/conf/httpd.conf #ServerName www.example.com:80 ↓変更 ServerName www.example.com:80 # # AllowOverride controls what directives may be placed in .htaccess files. # It can be &amp;quot;All&amp;quot;, &amp;quot;None&amp;quot;, or any combination of the keywords: # Options FileInfo AuthConfig Limit # AllowOverride None ↓変更 AllowOverride All AddDefaultCharset UTF-8 ↓変更 #AddDefaultCharset UTF-8 Apacheの起動 Apacheを起動します。
$ sudo systemctl start httpd $ sudo systemctl enable httpd Firewallの設定 FirewallでWeb通信を許可します。</description>
    </item>
    
    <item>
      <title>お名前.com VPS(KVM)の初期設定(CentOS 7 1511)</title>
      <link>https://www.shinayoshi.net/post/2016/01/16/onamae-vpn-setup/</link>
      <pubDate>Sat, 16 Jan 2016 22:30:25 +0900</pubDate>
      
      <guid>https://www.shinayoshi.net/post/2016/01/16/onamae-vpn-setup/</guid>
      <description>お名前.comのVPS(KVM)の初期設定メモを残しておく。 「CentOS-7-x86_64-Minimal-1511.iso」を使用して再インストール後からの設定を記載しています。
rootでログイン お名前.comのコンソール画面でログインを行います。
login: root Password: ログインに成功すると以下のようなプロンプトが表示されます。
[root@&amp;lt;ホスト名&amp;gt; ~]# 以降の手順では、rootアカウントのプロンプトを#で表現します。
シリアルコンソール接続の有効化 シリアルコンソールで接続できるように設定します。
# vi /etc/default/grub GRUB_CMDLINE_LINUX=&amp;quot;rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet&amp;quot; ↓変更 GRUB_CMDLINE_LINUX=&amp;quot;rd.lvm.lv=centos/root rd.lvm.lv=centos/swap rhgb quiet console=tty0 console=ttyS0,115200n8r&amp;quot; # grub2-mkconfig -o /boot/grub2/grub.cfg # reboot 共用SSHサーバ経由のシリアルコンソール接続 お名前.comのVPS(KVM)には、VPSにシリアルコンソール接続するための共用SSHサーバが用意されています。以降の設定はこのSSHサーバ経由のシリアルコンソール接続で作業します。
SSH接続経由のシリアルコンソールの接続方法については、お名前.comのサイトに詳しく書かれているのでそちらをご確認ください。SSH接続経由のシリアルコンソール | SSH接続 | VPS (KVM) 活用ガイド
ホスト名変更 ホスト名の変更を行います。
# hostnamectl set-hostname newhost.example.com ホスト名の変更を反映するために再起動を行います。
# reboot 再度、お名前.comのコンソール画面でログインを行い、ホスト名が変更されていることを確認します。
パッケージの更新 パッケージを最新の状態に更新します。
# yum -y update kernelのバージョンアップがあった場合にはサーバの再起動を実施します。
# reboot 管理者アカウントの作成 通常使用する管理者アカウントを作成します。また、管理者アカウントにパスワードを設定します。
# useradd centos # passwd centos Changing password for user centos.</description>
    </item>
    
  </channel>
</rss>
