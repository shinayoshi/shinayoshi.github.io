<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on shinayoshi&#39;s note</title>
    <link>http://www.shinayoshi.net/post/</link>
    <description>Recent content in Posts on shinayoshi&#39;s note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Copyright (c) 2016 shinayoshi</copyright>
    <lastBuildDate>Tue, 03 Jan 2017 23:25:23 +0900</lastBuildDate>
    <atom:link href="http://www.shinayoshi.net/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>家庭内インターネット接続環境を構築する その6</title>
      <link>http://www.shinayoshi.net/post/2017/01/03/setting-proxy/</link>
      <pubDate>Tue, 03 Jan 2017 23:25:23 +0900</pubDate>
      
      <guid>http://www.shinayoshi.net/post/2017/01/03/setting-proxy/</guid>
      <description>

&lt;h2 id=&#34;raspberry-pi-2でプロキシサーバ構築:4d2b653e7f73799c1b8de9cc6a404282&#34;&gt;Raspberry Pi 2でプロキシサーバ構築&lt;/h2&gt;

&lt;p&gt;家庭内インターネット接続環境からインターネットに接続するためにキャッシュDNSサーバとプロキシサーバを構築します。
今回はプロキシサーバを構築していきます。&lt;/p&gt;

&lt;h3 id=&#34;squidの設定:4d2b653e7f73799c1b8de9cc6a404282&#34;&gt;Squidの設定&lt;/h3&gt;

&lt;p&gt;squidのインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install squid
パッケージリストを読み込んでいます... 完了
依存関係ツリーを作成しています                
状態情報を読み取っています... 完了
以下の追加パッケージがインストールされます:
  squid-common squid-langpack
提案パッケージ:
  squidclient squid-cgi logcheck-database smbclient winbind
以下のパッケージが新たにインストールされます:
  squid squid-common squid-langpack
アップグレード: 0 個、新規インストール: 3 個、削除: 0 個、保留: 1 個。
1,106 kB のアーカイブを取得する必要があります。
この操作後に追加で 3,882 kB のディスク容量が消費されます。
続行しますか? [Y/n] y
取得:1 http://mirrordirector.raspbian.org/raspbian/ jessie/main squid-langpack all 20140506-1 [150 kB]
取得:2 http://mirrordirector.raspbian.org/raspbian/ jessie/main squid-common all 2.7.STABLE9-4.1 [352 kB]
取得:3 http://mirrordirector.raspbian.org/raspbian/ jessie/main squid armhf 2.7.STABLE9-4.1+b1 [604 kB]
1,106 kB を 4秒 で取得しました (267 kB/s)
パッケージを事前設定しています ...
以前に未選択のパッケージ squid-langpack を選択しています。
(データベースを読み込んでいます ... 現在 31342 個のファイルとディレクトリがインストールされています。)
.../squid-langpack_20140506-1_all.deb を展開する準備をしています ...
squid-langpack (20140506-1) を展開しています...
以前に未選択のパッケージ squid-common を選択しています。
.../squid-common_2.7.STABLE9-4.1_all.deb を展開する準備をしています ...
squid-common (2.7.STABLE9-4.1) を展開しています...
以前に未選択のパッケージ squid を選択しています。
.../squid_2.7.STABLE9-4.1+b1_armhf.deb を展開する準備をしています ...
squid (2.7.STABLE9-4.1+b1) を展開しています...
systemd (215-17+deb8u5) のトリガを処理しています ...
man-db (2.7.0.2-5) のトリガを処理しています ...
squid-langpack (20140506-1) を設定しています ...
squid-common (2.7.STABLE9-4.1) を設定しています ...
squid (2.7.STABLE9-4.1+b1) を設定しています ...
Creating squid spool directory structure
2017/01/03 23:26:35| Creating Swap Directories
systemd (215-17+deb8u5) のトリガを処理しています ...
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Squidの設定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cp -p /etc/squid/squid.conf{,.org}
$ ls -l /etc/squid/squid.conf*
-rw------- 1 root root 169404  1月  3 23:26 /etc/squid/squid.conf
-rw------- 1 root root 169404  1月  3 23:26 /etc/squid/squid.conf.org
$
$ sudo vi /etc/squid/squid.conf
$ sudo diff /etc/squid/squid.conf.org /etc/squid/squid.conf
609,611c609,616
&amp;lt; acl localnet src 10.0.0.0/8	# RFC1918 possible internal network
&amp;lt; acl localnet src 172.16.0.0/12	# RFC1918 possible internal network
&amp;lt; acl localnet src 192.168.0.0/16	# RFC1918 possible internal network
---
&amp;gt; #acl localnet src 10.0.0.0/8	# RFC1918 possible internal network
&amp;gt; #acl localnet src 172.16.0.0/12	# RFC1918 possible internal network
&amp;gt; #acl localnet src 192.168.0.0/16	# RFC1918 possible internal network
&amp;gt; acl localnet src 192.168.10.0/24
&amp;gt; acl localnet src 192.168.20.0/24
&amp;gt; acl localnet src 192.168.30.0/24
&amp;gt; acl localnet src 192.168.40.0/24
&amp;gt; 
676c681
&amp;lt; #http_access allow localnet
---
&amp;gt; http_access allow localnet
1738a1744
&amp;gt; cache_mem 256 MB
1747a1754
&amp;gt; maximum_object_size_in_memory 512 KB
1945a1953
&amp;gt; cache_dir ufs /var/spool/squid 10000 16 256
1988a1997
&amp;gt; maximum_object_size 20480 KB
2097a2107
&amp;gt; logformat combined %&amp;gt;a %ui %un [%tl] &amp;quot;%rm %ru HTTP/%rv&amp;quot; %Hs %&amp;lt;st &amp;quot;%{Referer}&amp;gt;h&amp;quot; &amp;quot;%{User-Agent}&amp;gt;h&amp;quot; %Ss:%Sh
2121c2131,2132
&amp;lt; access_log /var/log/squid/access.log squid
---
&amp;gt; #access_log /var/log/squid/access.log squid
&amp;gt; access_log /var/log/squid/access.log combined
2217a2229
&amp;gt; emulate_httpd_log off
2751c2763,2768
&amp;lt; refresh_pattern .		0	20%	4320
---
&amp;gt; refresh_pattern -i \.(gif|png|jpe?g|tif?f|bmp)$ 1440 25% 10080
&amp;gt; refresh_pattern -i \.(mpe?g|avi|ra?m|wmv|mov)$ 1440 25% 10080
&amp;gt; refresh_pattern -i \.(wav|mp3|mid)$ 1440 25% 10080
&amp;gt; refresh_pattern -i \.(class|swf|pdf)$ 1440 25% 10080
&amp;gt; refresh_pattern -i \.(js|css)$ 1440 25% 10080
&amp;gt; refresh_pattern . 45 20% 4320
2944a2962
&amp;gt; via off
3100a3119,3122
&amp;gt; header_access Referer deny all
&amp;gt; header_access X-Forwarded-For deny all
&amp;gt; header_access Via deny all
&amp;gt; header_access Cache-Control deny all
3392a3415
&amp;gt; visible_hostname unknown
4699a4723
&amp;gt; forwarded_for off
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Squidの設定不備を確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo squid -k parse
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Squidの起動&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl restart squid
$ sudo systemctl enable squid
Synchronizing state for squid.service with sysvinit using update-rc.d...
Executing /usr/sbin/update-rc.d squid defaults
Executing /usr/sbin/update-rc.d squid enable
$
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.unix-power.net/linux/squid.html&#34;&gt;CentOS Squidの設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tech.ckme.co.jp/proxy.shtml&#34;&gt;Proxyサーバの設定（squid）：tech.ckme.co.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nabeshiki.tumblr.com/post/20000083416/2001-sd-squid&#34;&gt;Proxyキャッシュサーバ設定術・Squidの設定(2001年掲載) | なべしき&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.asial.co.jp/1076&#34;&gt;Privoxy + Ziproxy + Squidで高速フィルタリングサーバを作ってみた : アシアルブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ブラウザのプロキシ設定:4d2b653e7f73799c1b8de9cc6a404282&#34;&gt;ブラウザのプロキシ設定&lt;/h3&gt;

&lt;p&gt;ブラウザ使用するプロキシ設定をSquidに変更する。&lt;/p&gt;

&lt;p&gt;Squidのログを確認してSquid経由でWebアクセスができていることを確認する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cat /var/log/squid/access.log
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;raspbianのプロキシ設定:4d2b653e7f73799c1b8de9cc6a404282&#34;&gt;Raspbianのプロキシ設定&lt;/h3&gt;

&lt;p&gt;起動時にプロキシを使用するように設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vi /etc/profile.d/proxy.sh
PROXY=&amp;quot;192.168.20.10:3128&amp;quot;
export http_proxy=&amp;quot;http://${PROXY}&amp;quot;
export https_proxy=&amp;quot;http://${PROXY}&amp;quot;
export no_proxy=&amp;quot;localhost,127.0.0.1,192.168.*&amp;quot;

export HTTP_PROXY=&amp;quot;${http_proxy}&amp;quot;
export HTTPS_PROXY=&amp;quot;${https_proxy}&amp;quot;
export NO_PROXY=&amp;quot;${no_proxy}&amp;quot;
$ source /etc/profile.d/proxy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記コマンドではsudo時の環境変数には反映されない。そのため、sudo時には&lt;code&gt;-E&lt;/code&gt;オプションを指定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo -E apt-get update
$ sudo -E apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://karaage.hatenadiary.jp/entry/2015/11/26/073000&#34;&gt;Mac/Linux/Raspberry Piでプロキシサーバを手軽に設定する方法 - karaage. [からあげ]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>家庭内インターネット接続環境を構築する その5</title>
      <link>http://www.shinayoshi.net/post/2017/01/03/setting-cache-dns/</link>
      <pubDate>Tue, 03 Jan 2017 22:22:47 +0900</pubDate>
      
      <guid>http://www.shinayoshi.net/post/2017/01/03/setting-cache-dns/</guid>
      <description>

&lt;h2 id=&#34;raspberry-pi-2でキャッシュdnsサーバ構築:a3b948e685fd47b3236875750b0610c7&#34;&gt;Raspberry Pi 2でキャッシュDNSサーバ構築&lt;/h2&gt;

&lt;p&gt;家庭内インターネット接続環境からインターネットに接続するためにキャッシュDNSサーバとプロキシサーバを構築します。
まずはキャッシュDNSサーバを構築していきます。&lt;/p&gt;

&lt;h3 id=&#34;bind9の設定:a3b948e685fd47b3236875750b0610c7&#34;&gt;bind9の設定&lt;/h3&gt;

&lt;p&gt;bind9のインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install bind9 dnsutils
パッケージリストを読み込んでいます... 完了
依存関係ツリーを作成しています                
状態情報を読み取っています... 完了
以下の追加パッケージがインストールされます:
  bind9utils
提案パッケージ:
  bind9-doc ufw rblcheck
以下のパッケージが新たにインストールされます:
  bind9 bind9utils dnsutils
アップグレード: 0 個、新規インストール: 3 個、削除: 0 個、保留: 1 個。
562 kB のアーカイブを取得する必要があります。
この操作後に追加で 1,620 kB のディスク容量が消費されます。
続行しますか? [Y/n] y
取得:1 http://mirrordirector.raspbian.org/raspbian/ jessie/main dnsutils armhf 1:9.9.5.dfsg-9+deb8u8 [113 kB]
取得:2 http://mirrordirector.raspbian.org/raspbian/ jessie/main bind9utils armhf 1:9.9.5.dfsg-9+deb8u8 [157 kB]
取得:3 http://mirrordirector.raspbian.org/raspbian/ jessie/main bind9 armhf 1:9.9.5.dfsg-9+deb8u8 [292 kB]
562 kB を 2秒 で取得しました (229 kB/s)
パッケージを事前設定しています ...
以前に未選択のパッケージ dnsutils を選択しています。
(データベースを読み込んでいます ... 現在 31244 個のファイルとディレクトリがインストールされています。)
.../dnsutils_1%3a9.9.5.dfsg-9+deb8u8_armhf.deb を展開する準備をしています ...
dnsutils (1:9.9.5.dfsg-9+deb8u8) を展開しています...
以前に未選択のパッケージ bind9utils を選択しています。
.../bind9utils_1%3a9.9.5.dfsg-9+deb8u8_armhf.deb を展開する準備をしています ...
bind9utils (1:9.9.5.dfsg-9+deb8u8) を展開しています...
以前に未選択のパッケージ bind9 を選択しています。
.../bind9_1%3a9.9.5.dfsg-9+deb8u8_armhf.deb を展開する準備をしています ...
bind9 (1:9.9.5.dfsg-9+deb8u8) を展開しています...
man-db (2.7.0.2-5) のトリガを処理しています ...
systemd (215-17+deb8u5) のトリガを処理しています ...
dnsutils (1:9.9.5.dfsg-9+deb8u8) を設定しています ...
bind9utils (1:9.9.5.dfsg-9+deb8u8) を設定しています ...
bind9 (1:9.9.5.dfsg-9+deb8u8) を設定しています ...
グループ `bind&#39; (グループ ID 114) を追加しています...
完了。
システムユーザ `bind&#39; (UID 109) を追加しています...
新しいユーザ `bind&#39; (UID 109) をグループ `bind&#39; に追加しています...
ホームディレクトリ `/var/cache/bind&#39; は作成しません。
wrote key file &amp;quot;/etc/bind/rndc.key&amp;quot;
#
systemd (215-17+deb8u5) のトリガを処理しています ...
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bind9の設定&lt;/p&gt;

&lt;p&gt;※変更箇所が多いため、変更箇所ではなく変更後のコンフィグを記載します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cp -p /etc/bind/named.conf.options{,.org}
$ ls -l /etc/bind/named.conf.options*
-rw-r--r-- 1 root bind 890  1月  3 22:26 /etc/bind/named.conf.options
-rw-r--r-- 1 root bind 890  1月  3 22:26 /etc/bind/named.conf.options.org
$
$ sudo vi /etc/bind/named.conf.options
controls {
	inet 127.0.0.1 allow { localhost; } keys { rndc-key; };
};
include &amp;quot;/etc/bind/rndc.key&amp;quot;;

acl &amp;quot;internal-network&amp;quot; {
	localhost;
	127.0.0.1/32;
	192.168.10.0/24;
	192.168.20.0/24;
	192.168.30.0/24;
	192.168.40.0/24;
};

options {
	version &amp;quot;unknown&amp;quot;;

	directory &amp;quot;/var/cache/bind&amp;quot;;

	listen-on {
		internal-network;
	};

	querylog yes;
	allow-query {
		internal-network;
	};

	recursion yes;
	allow-recursion {
		internal-network;
	};

	forwarders {
		192.168.100.1;
	};

	notify no;

	max-ncache-ttl	300;
	max-cache-ttl	3600;
	recursive-clients	300;
	cleaning-interval	60;
	lame-ttl	600;
	max-cache-size	256m;

	allow-transfer {
		none;
	};

	allow-update {
		none;
	};
};

logging {
	channel &amp;quot;log_default&amp;quot; {
		file &amp;quot;/var/log/bind/named.log&amp;quot; versions 5 size 5m;
		print-time yes;
		severity info;
		print-category yes;
	};
	channel &amp;quot;alert&amp;quot; {
		file &amp;quot;/var/log/bind/alert.log&amp;quot; versions 8 size 4m;
		severity info;
		print-time yes;
		print-severity yes;
		print-category yes;
	};
	channel &amp;quot;query&amp;quot; {
		file &amp;quot;/var/log/bind/query.log&amp;quot; versions 8 size 50m;
		severity debug;
		print-time yes;
		print-severity yes;
		print-category yes;
	};

	category default { &amp;quot;log_default&amp;quot;; };
	category security { &amp;quot;alert&amp;quot;; };
	category queries { &amp;quot;query&amp;quot;; };
	category lame-servers { null; };
};
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bind9のコンフィグ不備を確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo named-checkconf /etc/bind/named.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ログ保存先のディレクトリ作成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkdir -p /var/log/bind
$ sudo chown bind:bind /var/log/bind
$ ls -ld /var/log/bind
drwxr-xr-x 2 bind bind 4096  1月  3 22:39 /var/log/bind
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bind9の起動&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl restart bind9
$ sudo systemctl enable bind9
Synchronizing state for bind9.service with sysvinit using update-rc.d...
Executing /usr/sbin/update-rc.d bind9 defaults
Executing /usr/sbin/update-rc.d bind9 enable
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dnsクライアントの設定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cp -p /etc/dhcpcd.conf{,.backup20160103}
$ ls -l /etc/dhcpcd.conf*
-rw-rw-r-- 1 root netdev 1553  9月 23 13:24 /etc/dhcpcd.conf
-rw-rw-r-- 1 root netdev 1553  9月 23 13:24 /etc/dhcpcd.conf.backup20160103
-rw-rw-r-- 1 root netdev 1247 10月 17  2015 /etc/dhcpcd.conf.org
$
$ sudo vi /etc/dhcpcd.conf
static domain_name_servers=127.0.0.1
$
$ diff /etc/dhcpcd.conf.backup20160103 /etc/dhcpcd.conf
46c46
&amp;lt; static domain_name_servers=192.168.100.1
---
&amp;gt; static domain_name_servers=127.0.0.1
$
$ sudo systemctl restart dhcpcd
$ cat /etc/resolv.conf 
# Generated by resolvconf
nameserver 127.0.0.1
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bind9による名前解決の確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dig www.google.co.jp

; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.9.5-9+deb8u8-Raspbian &amp;lt;&amp;lt;&amp;gt;&amp;gt; www.google.co.jp
;; global options: +cmd
;; Got answer:
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 455
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;www.google.co.jp.		IN	A

;; ANSWER SECTION:
www.google.co.jp.	187	IN	A	172.217.26.99

;; Query time: 70 msec
;; SERVER: 127.0.0.1#53(127.0.0.1)
;; WHEN: Tue Jan 03 22:55:14 JST 2017
;; MSG SIZE  rcvd: 61

$ dig -x 8.8.8.8

; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.9.5-9+deb8u8-Raspbian &amp;lt;&amp;lt;&amp;gt;&amp;gt; -x 8.8.8.8
;; global options: +cmd
;; Got answer:
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 3656
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 13, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;8.8.8.8.in-addr.arpa.		IN	PTR

;; ANSWER SECTION:
8.8.8.8.in-addr.arpa.	3600	IN	PTR	google-public-dns-a.google.com.

;; AUTHORITY SECTION:
.			3449	IN	NS	h.root-servers.net.
.			3449	IN	NS	m.root-servers.net.
.			3449	IN	NS	c.root-servers.net.
.			3449	IN	NS	l.root-servers.net.
.			3449	IN	NS	b.root-servers.net.
.			3449	IN	NS	f.root-servers.net.
.			3449	IN	NS	g.root-servers.net.
.			3449	IN	NS	k.root-servers.net.
.			3449	IN	NS	e.root-servers.net.
.			3449	IN	NS	d.root-servers.net.
.			3449	IN	NS	a.root-servers.net.
.			3449	IN	NS	j.root-servers.net.
.			3449	IN	NS	i.root-servers.net.

;; Query time: 70 msec
;; SERVER: 127.0.0.1#53(127.0.0.1)
;; WHEN: Tue Jan 03 22:57:45 JST 2017
;; MSG SIZE  rcvd: 304

$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>家庭内インターネット接続環境を構築する その4</title>
      <link>http://www.shinayoshi.net/post/2017/01/02/setting-fileserver/</link>
      <pubDate>Mon, 02 Jan 2017 20:30:05 +0900</pubDate>
      
      <guid>http://www.shinayoshi.net/post/2017/01/02/setting-fileserver/</guid>
      <description>

&lt;h2 id=&#34;raspberry-pi-2でファイルサーバ構築:7daa4bd7d9cd8ea181b8fb40ded40309&#34;&gt;Raspberry Pi 2でファイルサーバ構築&lt;/h2&gt;

&lt;p&gt;前回はUSB Storageを使用してRAIDデバイスを設定しました。
今回はNFSやSambaの設定を行っていきます。&lt;/p&gt;

&lt;h2 id=&#34;nfsの設定:7daa4bd7d9cd8ea181b8fb40ded40309&#34;&gt;NFSの設定&lt;/h2&gt;

&lt;p&gt;NFSのインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install nfs-kernel-server
パッケージリストを読み込んでいます... 完了
依存関係ツリーを作成しています                
状態情報を読み取っています... 完了
以下のパッケージが新たにインストールされます:
  nfs-kernel-server
アップグレード: 0 個、新規インストール: 1 個、削除: 0 個、保留: 1 個。
101 kB のアーカイブを取得する必要があります。
この操作後に追加で 373 kB のディスク容量が消費されます。
取得:1 http://mirrordirector.raspbian.org/raspbian/ jessie/main nfs-kernel-server armhf 1:1.2.8-9 [101 kB]
101 kB を 1秒 で取得しました (66.7 kB/s)  
以前に未選択のパッケージ nfs-kernel-server を選択しています。
(データベースを読み込んでいます ... 現在 31534 個のファイルとディレクトリがインストールされています。)
.../nfs-kernel-server_1%3a1.2.8-9_armhf.deb を展開する準備をしています ...
nfs-kernel-server (1:1.2.8-9) を展開しています...
systemd (215-17+deb8u5) のトリガを処理しています ...
man-db (2.7.0.2-5) のトリガを処理しています ...
nfs-kernel-server (1:1.2.8-9) を設定しています ...

Creating config file /etc/exports with new version

Creating config file /etc/default/nfs-kernel-server with new version
systemd (215-17+deb8u5) のトリガを処理しています ...
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NFSの設定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cp -p /etc/exports{,.org}
$ ls -l /etc/exports*
-rw-r--r-- 1 root root 389  8月 13  2014 /etc/exports
-rw-r--r-- 1 root root 389  8月 13  2014 /etc/exports.org
$
$ sudo vi /etc/exports
/mnt/rpibackup	172.31.10.0/24(rw,sync,insecure,all_squash,no_subtree_check)
/mnt/syslog	172.31.10.0/24(rw,sync,insecure,all_squash,no_subtree_check)
$
$ diff /etc/exports.org /etc/exports
10a11,12
&amp;gt; /mnt/rpibackup	172.31.10.0/24(rw,sync,insecure,all_squash,no_subtree_check)
&amp;gt; /mnt/syslog	172.31.10.0/24(rw,sync,insecure,all_squash,no_subtree_check)
&lt;/code&gt;&lt;/pre&gt;

&lt;dl&gt;
    &lt;dt&gt;rw&lt;/dt&gt;
    &lt;dd&gt;ファイルシステムに対して変更(読み込み/書き込み)ができるようにする&lt;/dd&gt;
    &lt;dt&gt;sync&lt;/dt&gt;
    &lt;dd&gt;ディスクへの書き込みを同期する&lt;/dd&gt;
    &lt;dt&gt;insecure&lt;/dt&gt;
    &lt;dd&gt;クライアントからのアクセスに使用するポートを制限しない&lt;/dd&gt;
    &lt;dt&gt;all_squash&lt;/dt&gt;
    &lt;dd&gt;すべてのuidとgidをanonymousにマッピングする&lt;/dd&gt;
    &lt;dt&gt;no_subtree_check&lt;/dt&gt;
    &lt;dd&gt;サブツリーのチェックを無効にする&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;NFSの起動&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl start rpcbind
$ sudo systemctl enable rpcbind
Synchronizing state for rpcbind.service with sysvinit using update-rc.d...
Executing /usr/sbin/update-rc.d rpcbind defaults
insserv: warning: current start runlevel(s) (empty) of script `rpcbind&#39; overrides LSB defaults (S).
insserv: warning: current stop runlevel(s) (0 1 6 S) of script `rpcbind&#39; overrides LSB defaults (0 1 6).
Executing /usr/sbin/update-rc.d rpcbind enable
$
$ sudo systemctl restart nfs-kernel-server
$ sudo systemctl enable nfs-kernel-server
Synchronizing state for nfs-kernel-server.service with sysvinit using update-rc.d...
Executing /usr/sbin/update-rc.d nfs-kernel-server defaults
Executing /usr/sbin/update-rc.d nfs-kernel-server enable
$
$ sudo showmount -e
Export list for homenas1:
/mnt/syslog    172.31.10.0/24
/mnt/rpibackup 172.31.10.0/24
$
$ sudo exportfs -v
/mnt/rpibackup	172.31.10.0/24(rw,wdelay,insecure,root_squash,all_squash,no_subtree_check,sec=sys,rw,root_squash,all_squash)
/mnt/syslog   	172.31.10.0/24(rw,wdelay,insecure,root_squash,all_squash,no_subtree_check,sec=sys,rw,root_squash,all_squash)
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NFSクライアント側の設定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install -y nfs-client
パッケージリストを読み込んでいます... 完了
依存関係ツリーを作成しています                
状態情報を読み取っています... 完了
Note, selecting &#39;nfs-common&#39; instead of &#39;nfs-client&#39;
nfs-common はすでに最新版です。
アップグレード: 0 個、新規インストール: 0 個、削除: 0 個、保留: 1 個。
$
$ sudo mkdir /mnt/rpibackup
$ sudo mkdir /mnt/syslog
$
$ sudo cp -p /etc/fstab{,.org}
$ ls -l /etc/fstab*
-rw-r--r-- 1 root root 302  9月 23 12:53 /etc/fstab
-rw-r--r-- 1 root root 302  9月 23 12:53 /etc/fstab.org
$
$ sudo vi /etc/fstab
172.31.10.110:/mnt/rpibackup	/mnt/rpibackup	nfs	defaults,nofail	0	0
172.31.10.110:/mnt/syslog	/mnt/syslog	nfs	defaults,nofail	0	0
$
$ sudo mount -a
$ df -h
ファイルシス                 サイズ  使用  残り 使用% マウント位置
/dev/root                       29G  963M   27G    4% /
devtmpfs                       459M     0  459M    0% /dev
tmpfs                          463M     0  463M    0% /dev/shm
tmpfs                          463M  6.2M  457M    2% /run
tmpfs                          5.0M  4.0K  5.0M    1% /run/lock
tmpfs                          463M     0  463M    0% /sys/fs/cgroup
/dev/mmcblk0p1                  63M   21M   43M   34% /boot
172.31.10.110:/mnt/rpibackup   325G   67M  308G    1% /mnt/rpibackup
172.31.10.110:/mnt/syslog      197G   60M  187G    1% /mnt/syslog
$
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sambaの設定:7daa4bd7d9cd8ea181b8fb40ded40309&#34;&gt;Sambaの設定&lt;/h2&gt;

&lt;p&gt;Sambaのインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install samba
パッケージリストを読み込んでいます... 完了
依存関係ツリーを作成しています                
状態情報を読み取っています... 完了
以下の追加パッケージがインストールされます:
  attr libaio1 libasn1-8-heimdal libavahi-client3 libcups2
  libfile-copy-recursive-perl libhcrypto4-heimdal libhdb9-heimdal
  libheimbase1-heimdal libhx509-5-heimdal libkrb5-26-heimdal libldb1 libntdb1
  libroken18-heimdal libtdb1 libtevent0 libwind0-heimdal python-crypto
  python-dnspython python-ldb python-ntdb python-samba python-talloc
  python-tdb samba-common-bin samba-dsdb-modules samba-libs samba-vfs-modules
  tdb-tools update-inetd
提案パッケージ:
  cups-common python-crypto-dbg python-crypto-doc bind9 bind9utils ctdb
  ldb-tools smbldap-tools winbind heimdal-clients
以下のパッケージが新たにインストールされます:
  attr libaio1 libasn1-8-heimdal libavahi-client3 libcups2
  libfile-copy-recursive-perl libhcrypto4-heimdal libhdb9-heimdal
  libheimbase1-heimdal libhx509-5-heimdal libkrb5-26-heimdal libldb1 libntdb1
  libroken18-heimdal libtdb1 libtevent0 libwind0-heimdal python-crypto
  python-dnspython python-ldb python-ntdb python-samba python-talloc
  python-tdb samba samba-common-bin samba-dsdb-modules samba-libs
  samba-vfs-modules tdb-tools update-inetd
アップグレード: 0 個、新規インストール: 31 個、削除: 0 個、保留: 1 個。
8,999 kB のアーカイブを取得する必要があります。
この操作後に追加で 44.6 MB のディスク容量が消費されます。
続行しますか? [Y/n] y
取得:1 http://mirrordirector.raspbian.org/raspbian/ jessie/main libaio1 armhf 0.3.110-1 [9,228 B]
取得:2 http://mirrordirector.raspbian.org/raspbian/ jessie/main libroken18-heimdal armhf 1.6~rc2+dfsg-9+rpi1 [56.6 kB]
取得:3 http://mirrordirector.raspbian.org/raspbian/ jessie/main libasn1-8-heimdal armhf 1.6~rc2+dfsg-9+rpi1 [161 kB]
取得:4 http://mirrordirector.raspbian.org/raspbian/ jessie/main libavahi-client3 armhf 0.6.31-5 [50.6 kB]
取得:5 http://mirrordirector.raspbian.org/raspbian/ jessie/main libcups2 armhf 1.7.5-11+deb8u1 [253 kB]
取得:6 http://mirrordirector.raspbian.org/raspbian/ jessie/main libhcrypto4-heimdal armhf 1.6~rc2+dfsg-9+rpi1 [98.3 kB]
取得:7 http://mirrordirector.raspbian.org/raspbian/ jessie/main libheimbase1-heimdal armhf 1.6~rc2+dfsg-9+rpi1 [46.4 kB]
取得:8 http://mirrordirector.raspbian.org/raspbian/ jessie/main libwind0-heimdal armhf 1.6~rc2+dfsg-9+rpi1 [71.0 kB]
取得:9 http://mirrordirector.raspbian.org/raspbian/ jessie/main libhx509-5-heimdal armhf 1.6~rc2+dfsg-9+rpi1 [111 kB]
取得:10 http://mirrordirector.raspbian.org/raspbian/ jessie/main libkrb5-26-heimdal armhf 1.6~rc2+dfsg-9+rpi1 [188 kB]
取得:11 http://mirrordirector.raspbian.org/raspbian/ jessie/main libhdb9-heimdal armhf 1.6~rc2+dfsg-9+rpi1 [73.6 kB]
取得:12 http://mirrordirector.raspbian.org/raspbian/ jessie/main libtdb1 armhf 1.3.6-0+deb8u1 [37.1 kB]
取得:13 http://mirrordirector.raspbian.org/raspbian/ jessie/main libtevent0 armhf 0.9.28-0+deb8u1 [23.5 kB]
取得:14 http://mirrordirector.raspbian.org/raspbian/ jessie/main libldb1 armhf 2:1.1.20-0+deb8u1 [90.9 kB]
取得:15 http://mirrordirector.raspbian.org/raspbian/ jessie/main libntdb1 armhf 1.0-5 [37.8 kB]
取得:16 http://mirrordirector.raspbian.org/raspbian/ jessie/main python-ldb armhf 2:1.1.20-0+deb8u1 [26.0 kB]
取得:17 http://mirrordirector.raspbian.org/raspbian/ jessie/main python-talloc armhf 2.1.2-0+deb8u1 [9,912 B]
取得:18 http://mirrordirector.raspbian.org/raspbian/ jessie/main python-dnspython all 1.12.0-1 [101 kB]
取得:19 http://mirrordirector.raspbian.org/raspbian/ jessie/main python-ntdb armhf 1.0-5 [8,372 B]
取得:20 http://mirrordirector.raspbian.org/raspbian/ jessie/main python-tdb armhf 1.3.6-0+deb8u1 [14.0 kB]
取得:21 http://mirrordirector.raspbian.org/raspbian/ jessie/main python-crypto armhf 2.6.1-5 [248 kB]
取得:22 http://mirrordirector.raspbian.org/raspbian/ jessie/main samba-libs armhf 2:4.2.14+dfsg-0+deb8u2 [4,244 kB]
取得:23 http://mirrordirector.raspbian.org/raspbian/ jessie/main python-samba armhf 2:4.2.14+dfsg-0+deb8u2 [850 kB]
取得:24 http://mirrordirector.raspbian.org/raspbian/ jessie/main samba-common-bin armhf 2:4.2.14+dfsg-0+deb8u2 [562 kB]
取得:25 http://mirrordirector.raspbian.org/raspbian/ jessie/main samba-dsdb-modules armhf 2:4.2.14+dfsg-0+deb8u2 [276 kB]
取得:26 http://mirrordirector.raspbian.org/raspbian/ jessie/main tdb-tools armhf 1.3.6-0+deb8u1 [25.5 kB]
取得:27 http://mirrordirector.raspbian.org/raspbian/ jessie/main libfile-copy-recursive-perl all 0.38-1 [20.6 kB]
取得:28 http://mirrordirector.raspbian.org/raspbian/ jessie/main update-inetd all 4.43 [21.8 kB]
取得:29 http://mirrordirector.raspbian.org/raspbian/ jessie/main samba armhf 2:4.2.14+dfsg-0+deb8u2 [939 kB]
取得:30 http://mirrordirector.raspbian.org/raspbian/ jessie/main attr armhf 1:2.4.47-2 [41.3 kB]
取得:31 http://mirrordirector.raspbian.org/raspbian/ jessie/main samba-vfs-modules armhf 2:4.2.14+dfsg-0+deb8u2 [303 kB]
8,999 kB を 1分 8秒 で取得しました (131 kB/s)                                  
パッケージからテンプレートを展開しています: 100%
パッケージを事前設定しています ...
以前に未選択のパッケージ libaio1:armhf を選択しています。
(データベースを読み込んでいます ... 現在 31562 個のファイルとディレクトリがインストールされています。)
.../libaio1_0.3.110-1_armhf.deb を展開する準備をしています ...
libaio1:armhf (0.3.110-1) を展開しています...
以前に未選択のパッケージ libroken18-heimdal:armhf を選択しています。
.../libroken18-heimdal_1.6~rc2+dfsg-9+rpi1_armhf.deb を展開する準備をしています ...
libroken18-heimdal:armhf (1.6~rc2+dfsg-9+rpi1) を展開しています...
以前に未選択のパッケージ libasn1-8-heimdal:armhf を選択しています。
.../libasn1-8-heimdal_1.6~rc2+dfsg-9+rpi1_armhf.deb を展開する準備をしています ...
libasn1-8-heimdal:armhf (1.6~rc2+dfsg-9+rpi1) を展開しています...
以前に未選択のパッケージ libavahi-client3:armhf を選択しています。
.../libavahi-client3_0.6.31-5_armhf.deb を展開する準備をしています ...
libavahi-client3:armhf (0.6.31-5) を展開しています...
以前に未選択のパッケージ libcups2:armhf を選択しています。
.../libcups2_1.7.5-11+deb8u1_armhf.deb を展開する準備をしています ...
libcups2:armhf (1.7.5-11+deb8u1) を展開しています...
以前に未選択のパッケージ libhcrypto4-heimdal:armhf を選択しています。
.../libhcrypto4-heimdal_1.6~rc2+dfsg-9+rpi1_armhf.deb を展開する準備をしています ...
libhcrypto4-heimdal:armhf (1.6~rc2+dfsg-9+rpi1) を展開しています...
以前に未選択のパッケージ libheimbase1-heimdal:armhf を選択しています。
.../libheimbase1-heimdal_1.6~rc2+dfsg-9+rpi1_armhf.deb を展開する準備をしています ...
libheimbase1-heimdal:armhf (1.6~rc2+dfsg-9+rpi1) を展開しています...
以前に未選択のパッケージ libwind0-heimdal:armhf を選択しています。
.../libwind0-heimdal_1.6~rc2+dfsg-9+rpi1_armhf.deb を展開する準備をしています ...
libwind0-heimdal:armhf (1.6~rc2+dfsg-9+rpi1) を展開しています...
以前に未選択のパッケージ libhx509-5-heimdal:armhf を選択しています。
.../libhx509-5-heimdal_1.6~rc2+dfsg-9+rpi1_armhf.deb を展開する準備をしています ...
libhx509-5-heimdal:armhf (1.6~rc2+dfsg-9+rpi1) を展開しています...
以前に未選択のパッケージ libkrb5-26-heimdal:armhf を選択しています。
.../libkrb5-26-heimdal_1.6~rc2+dfsg-9+rpi1_armhf.deb を展開する準備をしています ...
libkrb5-26-heimdal:armhf (1.6~rc2+dfsg-9+rpi1) を展開しています...
以前に未選択のパッケージ libhdb9-heimdal:armhf を選択しています。
.../libhdb9-heimdal_1.6~rc2+dfsg-9+rpi1_armhf.deb を展開する準備をしています ...
libhdb9-heimdal:armhf (1.6~rc2+dfsg-9+rpi1) を展開しています...
以前に未選択のパッケージ libtdb1:armhf を選択しています。
.../libtdb1_1.3.6-0+deb8u1_armhf.deb を展開する準備をしています ...
libtdb1:armhf (1.3.6-0+deb8u1) を展開しています...
以前に未選択のパッケージ libtevent0:armhf を選択しています。
.../libtevent0_0.9.28-0+deb8u1_armhf.deb を展開する準備をしています ...
libtevent0:armhf (0.9.28-0+deb8u1) を展開しています...
以前に未選択のパッケージ libldb1:armhf を選択しています。
.../libldb1_2%3a1.1.20-0+deb8u1_armhf.deb を展開する準備をしています ...
libldb1:armhf (2:1.1.20-0+deb8u1) を展開しています...
以前に未選択のパッケージ libntdb1:armhf を選択しています。
.../libntdb1_1.0-5_armhf.deb を展開する準備をしています ...
libntdb1:armhf (1.0-5) を展開しています...
以前に未選択のパッケージ python-ldb を選択しています。
.../python-ldb_2%3a1.1.20-0+deb8u1_armhf.deb を展開する準備をしています ...
python-ldb (2:1.1.20-0+deb8u1) を展開しています...
以前に未選択のパッケージ python-talloc を選択しています。
.../python-talloc_2.1.2-0+deb8u1_armhf.deb を展開する準備をしています ...
python-talloc (2.1.2-0+deb8u1) を展開しています...
以前に未選択のパッケージ python-dnspython を選択しています。
.../python-dnspython_1.12.0-1_all.deb を展開する準備をしています ...
python-dnspython (1.12.0-1) を展開しています...
以前に未選択のパッケージ python-ntdb を選択しています。
.../python-ntdb_1.0-5_armhf.deb を展開する準備をしています ...
python-ntdb (1.0-5) を展開しています...
以前に未選択のパッケージ python-tdb を選択しています。
.../python-tdb_1.3.6-0+deb8u1_armhf.deb を展開する準備をしています ...
python-tdb (1.3.6-0+deb8u1) を展開しています...
以前に未選択のパッケージ python-crypto を選択しています。
.../python-crypto_2.6.1-5_armhf.deb を展開する準備をしています ...
python-crypto (2.6.1-5) を展開しています...
以前に未選択のパッケージ samba-libs:armhf を選択しています。
.../samba-libs_2%3a4.2.14+dfsg-0+deb8u2_armhf.deb を展開する準備をしています ...
samba-libs:armhf (2:4.2.14+dfsg-0+deb8u2) を展開しています...
以前に未選択のパッケージ python-samba を選択しています。
.../python-samba_2%3a4.2.14+dfsg-0+deb8u2_armhf.deb を展開する準備をしています ...
python-samba (2:4.2.14+dfsg-0+deb8u2) を展開しています...
以前に未選択のパッケージ samba-common-bin を選択しています。
.../samba-common-bin_2%3a4.2.14+dfsg-0+deb8u2_armhf.deb を展開する準備をしています ...
samba-common-bin (2:4.2.14+dfsg-0+deb8u2) を展開しています...
以前に未選択のパッケージ samba-dsdb-modules を選択しています。
.../samba-dsdb-modules_2%3a4.2.14+dfsg-0+deb8u2_armhf.deb を展開する準備をしています ...
samba-dsdb-modules (2:4.2.14+dfsg-0+deb8u2) を展開しています...
以前に未選択のパッケージ tdb-tools を選択しています。
.../tdb-tools_1.3.6-0+deb8u1_armhf.deb を展開する準備をしています ...
tdb-tools (1.3.6-0+deb8u1) を展開しています...
以前に未選択のパッケージ libfile-copy-recursive-perl を選択しています。
.../libfile-copy-recursive-perl_0.38-1_all.deb を展開する準備をしています ...
libfile-copy-recursive-perl (0.38-1) を展開しています...
以前に未選択のパッケージ update-inetd を選択しています。
.../update-inetd_4.43_all.deb を展開する準備をしています ...
update-inetd (4.43) を展開しています...
以前に未選択のパッケージ samba を選択しています。
.../samba_2%3a4.2.14+dfsg-0+deb8u2_armhf.deb を展開する準備をしています ...
samba (2:4.2.14+dfsg-0+deb8u2) を展開しています...
以前に未選択のパッケージ attr を選択しています。
.../attr_1%3a2.4.47-2_armhf.deb を展開する準備をしています ...
attr (1:2.4.47-2) を展開しています...
以前に未選択のパッケージ samba-vfs-modules を選択しています。
.../samba-vfs-modules_2%3a4.2.14+dfsg-0+deb8u2_armhf.deb を展開する準備をしています ...
samba-vfs-modules (2:4.2.14+dfsg-0+deb8u2) を展開しています...
man-db (2.7.0.2-5) のトリガを処理しています ...
systemd (215-17+deb8u5) のトリガを処理しています ...
libaio1:armhf (0.3.110-1) を設定しています ...
libroken18-heimdal:armhf (1.6~rc2+dfsg-9+rpi1) を設定しています ...
libasn1-8-heimdal:armhf (1.6~rc2+dfsg-9+rpi1) を設定しています ...
libavahi-client3:armhf (0.6.31-5) を設定しています ...
libcups2:armhf (1.7.5-11+deb8u1) を設定しています ...
libhcrypto4-heimdal:armhf (1.6~rc2+dfsg-9+rpi1) を設定しています ...
libheimbase1-heimdal:armhf (1.6~rc2+dfsg-9+rpi1) を設定しています ...
libwind0-heimdal:armhf (1.6~rc2+dfsg-9+rpi1) を設定しています ...
libhx509-5-heimdal:armhf (1.6~rc2+dfsg-9+rpi1) を設定しています ...
libkrb5-26-heimdal:armhf (1.6~rc2+dfsg-9+rpi1) を設定しています ...
libhdb9-heimdal:armhf (1.6~rc2+dfsg-9+rpi1) を設定しています ...
libtdb1:armhf (1.3.6-0+deb8u1) を設定しています ...
libtevent0:armhf (0.9.28-0+deb8u1) を設定しています ...
libldb1:armhf (2:1.1.20-0+deb8u1) を設定しています ...
libntdb1:armhf (1.0-5) を設定しています ...
python-ldb (2:1.1.20-0+deb8u1) を設定しています ...
python-talloc (2.1.2-0+deb8u1) を設定しています ...
python-dnspython (1.12.0-1) を設定しています ...
python-ntdb (1.0-5) を設定しています ...
python-tdb (1.3.6-0+deb8u1) を設定しています ...
python-crypto (2.6.1-5) を設定しています ...
samba-libs:armhf (2:4.2.14+dfsg-0+deb8u2) を設定しています ...
python-samba (2:4.2.14+dfsg-0+deb8u2) を設定しています ...
samba-common-bin (2:4.2.14+dfsg-0+deb8u2) を設定しています ...
samba-dsdb-modules (2:4.2.14+dfsg-0+deb8u2) を設定しています ...
tdb-tools (1.3.6-0+deb8u1) を設定しています ...
update-alternatives: /usr/bin/tdbbackup (tdbbackup) を提供するために自動モードで /usr/bin/tdbbackup.tdbtools を使います
libfile-copy-recursive-perl (0.38-1) を設定しています ...
update-inetd (4.43) を設定しています ...
samba (2:4.2.14+dfsg-0+deb8u2) を設定しています ...
グループ `sambashare&#39; (グループ ID 115) を追加しています...
完了。
attr (1:2.4.47-2) を設定しています ...
samba-vfs-modules (2:4.2.14+dfsg-0+deb8u2) を設定しています ...
libc-bin (2.19-18+deb8u6) のトリガを処理しています ...
systemd (215-17+deb8u5) のトリガを処理しています ...
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sambaの設定(後日見直し要素)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cp -p /etc/samba/smb.conf{,.org}
$ ls -l /etc/samba/smb.conf*
-rw-r--r-- 1 root root 9231 12月 31 18:33 /etc/samba/smb.conf
-rw-r--r-- 1 root root 9231 12月 31 18:33 /etc/samba/smb.conf.org
$
$ sudo vi /etc/samba/smb.conf
[global]
   dos charset = CP932
   unix charset = UTF-8
   unix extensions = no

   load printers = no
   printing = bsd
   printcap name = /dev/null

;   interfaces = 127.0.0.0/8 eth0
   interfaces = 127.0.0.0/8 192.168.40.0/24 eth0
   hosts allow = 192.168.40.0/24

;   map to guest = bad user
   map to guest = never

;   usershare allow guests = yes
   usershare allow guests = no

;[homes]
;   comment = Home Directories
;   browseable = no

;   read only = yes

;   create mask = 0700

;   directory mask = 0700

;   valid users = %S

;[printers]
;   comment = All Printers
;   browseable = no
;   path = /var/spool/samba
;   printable = yes
;   guest ok = no
;   read only = yes
;   create mask = 0700

;[print$]
;   comment = Printer Drivers
;   path = /var/lib/samba/printers
;   browseable = yes
;   read only = yes
;   guest ok = no

[share]
   path = /mnt/nas
   writable = yes
   valid users = @sambashare
   force user = root
   force group = adm
   create mask = 0664
   directory mask = 0775
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sambaを起動する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ testparm /etc/samba/smb.conf
Load smb config files from /etc/samba/smb.conf
Processing section &amp;quot;[share]&amp;quot;
Loaded services file OK.
Server role: ROLE_STANDALONE

Press enter to see a dump of your service definitions

# Global parameters
[global]
	dos charset = CP932
	interfaces = 127.0.0.0/8 192.168.40.0/24 eth0
	server role = standalone server
	obey pam restrictions = Yes
	pam password change = Yes
	passwd program = /usr/bin/passwd %u
	passwd chat = *Enter\snew\s*\spassword:* %n\n *Retype\snew\s*\spassword:* %n\n *password\supdated\ssuccessfully* .
	unix password sync = Yes
	syslog = 0
	log file = /var/log/samba/log.%m
	max log size = 1000
	unix extensions = No
	load printers = No
	printcap name = /dev/null
	dns proxy = No
	panic action = /usr/share/samba/panic-action %d
	idmap config * : backend = tdb
	hosts allow = 192.168.40.0/24
	printing = bsd


[share]
	path = /mnt/nas
	valid users = @sambashare
	force user = root
	force group = adm
	read only = No
	create mask = 0664
	directory mask = 0775
$
$ sudo systemctl restart smbd
$ sudo systemctl restart nmbd
$
$ sudo systemctl enable smbd
Synchronizing state for smbd.service with sysvinit using update-rc.d...
Executing /usr/sbin/update-rc.d smbd defaults
Executing /usr/sbin/update-rc.d smbd enable
$
$ sudo systemctl enable nmbd
Synchronizing state for nmbd.service with sysvinit using update-rc.d...
Executing /usr/sbin/update-rc.d nmbd defaults
Executing /usr/sbin/update-rc.d nmbd enable
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Samba接続用のユーザ作成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo useradd samba -u 1100 -g sambashare -s /bin/false
$ sudo passwd -l samba
passwd: パスワード期限切れ情報を変更しました
$
$ sudo pdbedit -a -u samba
new password:
retype new password:
Unix username:        samba
NT username:          
Account Flags:        [U          ]
User SID:             S-1-5-21-4142804337-213291639-510360124-1000
Primary Group SID:    S-1-5-21-4142804337-213291639-510360124-513
Full Name:            
Home Directory:       \\homenas1\samba
HomeDir Drive:        
Logon Script:         
Profile Path:         \\homenas1\samba\profile
Domain:               HOMENAS1
Account desc:         
Workstations:         
Munged dial:          
Logon time:           0
Logoff time:          never
Kickoff time:         never
Password last set:    月, 02  1月 2017 23:15:52 JST
Password can change:  月, 02  1月 2017 23:15:52 JST
Password must change: never
Last bad password   : 0
Bad password count  : 0
Logon hours         : FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
$
$ sudo pdbedit -Lw
samba:1100:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX:016FADE2356324CBD21E6685516D4A24:[U          ]:LCT-586A6098:
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MacからSambaに接続&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Finderを開く&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Command + K&lt;/code&gt;を入力する&lt;/li&gt;
&lt;li&gt;サーバアドレスに&lt;code&gt;smb://192.168.40.10/share&lt;/code&gt;を入力する&lt;/li&gt;
&lt;li&gt;ユーザの種類に&lt;code&gt;登録ユーザ&lt;/code&gt;を選択、名前に&lt;code&gt;samba&lt;/code&gt;、パスワードに&lt;code&gt;sambaユーザのパスワード&lt;/code&gt;を入力して接続をクリックする&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;参考url:7daa4bd7d9cd8ea181b8fb40ded40309&#34;&gt;参考URL&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://denshikousaku.net/raspberry-pi-file-server-part1-basic-samba&#34;&gt;Raspberry Piでファイルサーバ、Part1 Samba基本編 | ものづくりエクスペリメント&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ossfan.net/setup/samba-03.html&#34;&gt;Samba 4.2.3をCentOS 7.2にインストールしてファイルサーバとして設定 | OSSでLinuxサーバ構築 | OSS Fan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.virment.com/config-sambaserver/&#34;&gt;sambaサーバによるファイル共有環境の構築手順&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>家庭内インターネット接続環境を構築する その3</title>
      <link>http://www.shinayoshi.net/post/2017/01/01/setting-usb-storage/</link>
      <pubDate>Sun, 01 Jan 2017 18:28:38 +0900</pubDate>
      
      <guid>http://www.shinayoshi.net/post/2017/01/01/setting-usb-storage/</guid>
      <description>

&lt;h2 id=&#34;raspberry-pi-2でファイルサーバ構築:edd1b43dbf3196488adbf69244ff43d1&#34;&gt;Raspberry Pi 2でファイルサーバ構築&lt;/h2&gt;

&lt;p&gt;家庭内インターネット接続環境で使用するファイルサーバを構築します。
ファイルサーバの利用目的は以下の3つです。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;LAN内のファイル共有&lt;/li&gt;
&lt;li&gt;Raspberry Piバックアップ&lt;/li&gt;
&lt;li&gt;Syslog等のログ保管&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;今回はUSB Storageを使用する準備までを行います。
次回はNFSやSambaの設定を行っていきます。&lt;/p&gt;

&lt;h2 id=&#34;用意したもの:edd1b43dbf3196488adbf69244ff43d1&#34;&gt;用意したもの&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;品名&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;台数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Raspberry Pi 2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1台&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;USB Storage 1TB&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3台&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;USB Hub&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1台&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;物理構成:edd1b43dbf3196488adbf69244ff43d1&#34;&gt;物理構成&lt;/h2&gt;

&lt;p&gt;物理構成は以下のような構成を想定しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20170101_01/physical_composition.png&#34; alt=&#34;physical composition&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;設定:edd1b43dbf3196488adbf69244ff43d1&#34;&gt;設定&lt;/h2&gt;

&lt;h3 id=&#34;mdadmのインストール:edd1b43dbf3196488adbf69244ff43d1&#34;&gt;mdadmのインストール&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get upgrade
$ sudo apt-get install mdadm
パッケージリストを読み込んでいます... 完了
依存関係ツリーを作成しています                
状態情報を読み取っています... 完了
以下の追加パッケージがインストールされます:
  bsd-mailx exim4-base exim4-config exim4-daemon-light liblockfile-bin
  liblockfile1
提案パッケージ:
  mail-reader eximon4 exim4-doc-html exim4-doc-info spf-tools-perl swaks
推奨パッケージ:
  mailx default-mta mail-transport-agent
以下のパッケージが新たにインストールされます:
  bsd-mailx exim4-base exim4-config exim4-daemon-light liblockfile-bin
  liblockfile1 mdadm
アップグレード: 0 個、新規インストール: 7 個、削除: 0 個、保留: 1 個。
2,630 kB のアーカイブを取得する必要があります。
この操作後に追加で 4,960 kB のディスク容量が消費されます。
続行しますか? [Y/n] y
取得:1 http://mirrordirector.raspbian.org/raspbian/ jessie/main liblockfile-bin armhf 1.09-6 [18.2 kB]
取得:2 http://mirrordirector.raspbian.org/raspbian/ jessie/main liblockfile1 armhf 1.09-6 [14.7 kB]
取得:3 http://mirrordirector.raspbian.org/raspbian/ jessie/main exim4-config all 4.84.2-2+deb8u2 [503 kB]
取得:4 http://mirrordirector.raspbian.org/raspbian/ jessie/main exim4-base armhf 4.84.2-2+deb8u2 [1,046 kB]
取得:5 http://mirrordirector.raspbian.org/raspbian/ jessie/main exim4-daemon-light armhf 4.84.2-2+deb8u2 [578 kB]
取得:6 http://mirrordirector.raspbian.org/raspbian/ jessie/main bsd-mailx armhf 8.1.2-0.20141216cvs-2 [74.3 kB]
取得:7 http://mirrordirector.raspbian.org/raspbian/ jessie/main mdadm armhf 3.3.2-5+deb8u1 [397 kB]
2,630 kB を 5秒 で取得しました (467 kB/s)
パッケージを事前設定しています ...
以前に未選択のパッケージ liblockfile-bin を選択しています。
(データベースを読み込んでいます ... 現在 31247 個のファイルとディレクトリがインストールされています。)
.../liblockfile-bin_1.09-6_armhf.deb を展開する準備をしています ...
liblockfile-bin (1.09-6) を展開しています...
以前に未選択のパッケージ liblockfile1:armhf を選択しています。
.../liblockfile1_1.09-6_armhf.deb を展開する準備をしています ...
liblockfile1:armhf (1.09-6) を展開しています...
以前に未選択のパッケージ exim4-config を選択しています。
.../exim4-config_4.84.2-2+deb8u2_all.deb を展開する準備をしています ...
exim4-config (4.84.2-2+deb8u2) を展開しています...
以前に未選択のパッケージ exim4-base を選択しています。
.../exim4-base_4.84.2-2+deb8u2_armhf.deb を展開する準備をしています ...
exim4-base (4.84.2-2+deb8u2) を展開しています...
以前に未選択のパッケージ exim4-daemon-light を選択しています。
.../exim4-daemon-light_4.84.2-2+deb8u2_armhf.deb を展開する準備をしています ...
exim4-daemon-light (4.84.2-2+deb8u2) を展開しています...
以前に未選択のパッケージ bsd-mailx を選択しています。
.../bsd-mailx_8.1.2-0.20141216cvs-2_armhf.deb を展開する準備をしています ...
bsd-mailx (8.1.2-0.20141216cvs-2) を展開しています...
以前に未選択のパッケージ mdadm を選択しています。
.../mdadm_3.3.2-5+deb8u1_armhf.deb を展開する準備をしています ...
mdadm (3.3.2-5+deb8u1) を展開しています...
man-db (2.7.0.2-5) のトリガを処理しています ...
systemd (215-17+deb8u5) のトリガを処理しています ...
liblockfile-bin (1.09-6) を設定しています ...
liblockfile1:armhf (1.09-6) を設定しています ...
exim4-config (4.84.2-2+deb8u2) を設定しています ...
Adding system-user for exim (v4)
exim4-base (4.84.2-2+deb8u2) を設定しています ...
exim: DB upgrade, deleting hints-db
exim4-daemon-light (4.84.2-2+deb8u2) を設定しています ...
bsd-mailx (8.1.2-0.20141216cvs-2) を設定しています ...
update-alternatives: /usr/bin/mailx (mailx) を提供するために自動モードで /usr/bin/bsd-mailx を使います
mdadm (3.3.2-5+deb8u1) を設定しています ...
 ┌────────────────────────┤ mdadm を設定しています ├─────────────────────────┐
 │                                                                           │ 
 │ あなたのシステムのルートファイルシステムが MD アレイ (RAID) 上に配置され  | 
 │ ているならば、ブートシーケンスの初期段階で MD アレイを開始する必要があり  | 
 │ ます。ルートファイルシステムが MD のような論理ボリューム (LVM) 上にある   | 
 │ 場合は、構成しているアレイ全ての開始が必要です。                          | 
 │                                                                           | 
 │ どのアレイがルートファイルシステムの立ち上げに必要かを正確に知っており、  | 
 │ ブートシーケンスの後の時点まで意図しているもの以外全てのアレイ起動を遅ら  | 
 │ せたい場合、ここで最初に起動するアレイを入力してください。そうでない場合  | 
 │ 、&#39;all&#39; と入力して単に全ての利用可能なアレイを最初に立ち上げてください。  | 
 │                                                                           | 
 │ ルートファイルシステムのために、どのアレイも必要ない、あるいはどのアレイ  | 
 │ も起動したくは無いという場合は、空白のままに (あるいは &#39;none&#39; と入力) し  | 
 │ てください。これは、カーネルで自動的に起動される場合や起動時にはアレイは  | 
 │ 不要であるという場合です。                                                | 
 │                                                                           | 
 │                                  &amp;lt;了解&amp;gt;                                   | 
 │                                                                           │ 
 └───────────────────────────────────────────────────────────────────────────┘ 

 ┌─────────┤ mdadm を設定しています ├─────────┐
 │ ルートファイルシステムに必要な MD アレイ:  │ 
 │                                            │ 
 │ all_______________________________________ │ 
 │                                            │ 
 │                   &amp;lt;了解&amp;gt;                   │ 
 │                                            │ 
 └────────────────────────────────────────────┘ 
Generating mdadm.conf... done.
update-initramfs: deferring update (trigger activated)
update-rc.d: warning: start and stop actions are no longer supported; falling back to defaults
update-rc.d: warning: start and stop actions are no longer supported; falling back to defaults
libc-bin (2.19-18+deb8u6) のトリガを処理しています ...
systemd (215-17+deb8u5) のトリガを処理しています ...
initramfs-tools (0.120+deb8u2) のトリガを処理しています ...

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usbストレージの初期化:edd1b43dbf3196488adbf69244ff43d1&#34;&gt;USBストレージの初期化&lt;/h3&gt;

&lt;p&gt;1つ目のUSBストレージを接続して、フォーマットを行う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dmesg | grep sd
[ 8792.405426] sd 0:0:0:0: [sda] Spinning up disk...
[ 8792.412833] sd 0:0:0:0: Attached scsi generic sg0 type 0
[ 8798.460733] sd 0:0:0:0: [sda] 1953458176 512-byte logical blocks: (1.00 TB/931 GiB)
[ 8798.461289] sd 0:0:0:0: [sda] Write Protect is off
[ 8798.461313] sd 0:0:0:0: [sda] Mode Sense: 47 00 10 08
[ 8798.461831] sd 0:0:0:0: [sda] No Caching mode page found
[ 8798.461853] sd 0:0:0:0: [sda] Assuming drive cache: write through
[ 8798.526543] sd 0:0:0:0: [sda] Attached SCSI disk
$ sudo fdisk /dev/sda

Welcome to fdisk (util-linux 2.25.2).
Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.

Device does not contain a recognized partition table.
Created a new DOS disklabel with disk identifier 0x21f377b8.

Command (m for help): p
Disk /dev/sda: 931.5 GiB, 1000170586112 bytes, 1953458176 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x21f377b8



Command (m for help): n
Partition type
   p   primary (0 primary, 0 extended, 4 free)
   e   extended (container for logical partitions)
Select (default p): 

Using default response p.
Partition number (1-4, default 1): 
First sector (2048-1953458175, default 2048): 
Last sector, +sectors or +size{K,M,G,T,P} (2048-1953458175, default 1953458175): +838860800

Created a new partition 1 of type &#39;Linux&#39; and of size 400 GiB.

Command (m for help): n
Partition type
   p   primary (1 primary, 0 extended, 3 free)
   e   extended (container for logical partitions)
Select (default p): 

Using default response p.
Partition number (2-4, default 2): 
First sector (838862848-1953458175, default 838862848):  
Last sector, +sectors or +size{K,M,G,T,P} (838862848-1953458175, default 1953458175): +692060160

Created a new partition 2 of type &#39;Linux&#39; and of size 330 GiB.

Command (m for help): n
Partition type
   p   primary (2 primary, 0 extended, 2 free)
   e   extended (container for logical partitions)
Select (default p): 

Using default response p.
Partition number (3,4, default 3): 
First sector (1530923008-1953458175, default 1530923008): 
Last sector, +sectors or +size{K,M,G,T,P} (1530923008-1953458175, default 1953458175): +419430400

Created a new partition 3 of type &#39;Linux&#39; and of size 200 GiB.

Command (m for help): p
Disk /dev/sda: 931.5 GiB, 1000170586112 bytes, 1953458176 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x21f377b8

Device     Boot      Start        End   Sectors  Size Id Type
/dev/sda1             2048  838862847 838860800  400G 83 Linux
/dev/sda2        838862848 1530923007 692060160  330G 83 Linux
/dev/sda3       1530923008 1950353407 419430400  200G 83 Linux


Command (m for help): t
Partition number (1-3, default 3): 1
Hex code (type L to list all codes): fd

Changed type of partition &#39;Linux&#39; to &#39;Linux raid autodetect&#39;.

Command (m for help): t
Partition number (1-3, default 3): 2
Hex code (type L to list all codes): fd

Changed type of partition &#39;Linux&#39; to &#39;Linux raid autodetect&#39;.

Command (m for help): t
Partition number (1-3, default 3): 3
Hex code (type L to list all codes): fd

Changed type of partition &#39;Linux&#39; to &#39;Linux raid autodetect&#39;.

Command (m for help): p
Disk /dev/sda: 931.5 GiB, 1000170586112 bytes, 1953458176 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x21f377b8

Device     Boot      Start        End   Sectors  Size Id Type
/dev/sda1             2048  838862847 838860800  400G fd Linux raid autodetect
/dev/sda2        838862848 1530923007 692060160  330G fd Linux raid autodetect
/dev/sda3       1530923008 1950353407 419430400  200G fd Linux raid autodetect


Command (m for help): w
The partition table has been altered.
Calling ioctl() to re-read partition table.
Syncing disks.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2つ目のUSBストレージを接続して、フォーマットを行う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dmesg | grep sd
[11121.958187] sd 1:0:0:0: Attached scsi generic sg1 type 0
[11121.959776] sd 1:0:0:0: [sdb] Spinning up disk...
[11128.015762] sd 1:0:0:0: [sdb] 1953458176 512-byte logical blocks: (1.00 TB/931 GiB)
[11128.016326] sd 1:0:0:0: [sdb] Write Protect is off
[11128.016352] sd 1:0:0:0: [sdb] Mode Sense: 47 00 10 08
[11128.016885] sd 1:0:0:0: [sdb] No Caching mode page found
[11128.016907] sd 1:0:0:0: [sdb] Assuming drive cache: write through
[11128.078805] sd 1:0:0:0: [sdb] Attached SCSI disk
$ sudo fdisk /dev/sdb

Welcome to fdisk (util-linux 2.25.2).
Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.

Device does not contain a recognized partition table.
Created a new DOS disklabel with disk identifier 0x09c6efcf.

Command (m for help): p
Disk /dev/sdb: 931.5 GiB, 1000170586112 bytes, 1953458176 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x09c6efcf



Command (m for help): n
Partition type
   p   primary (0 primary, 0 extended, 4 free)
   e   extended (container for logical partitions)
Select (default p): 

Using default response p.
Partition number (1-4, default 1): 
First sector (2048-1953458175, default 2048): 
Last sector, +sectors or +size{K,M,G,T,P} (2048-1953458175, default 1953458175): +838860800

Created a new partition 1 of type &#39;Linux&#39; and of size 400 GiB.

Command (m for help): n
Partition type
   p   primary (1 primary, 0 extended, 3 free)
   e   extended (container for logical partitions)
Select (default p): 

Using default response p.
Partition number (2-4, default 2): 
First sector (838862848-1953458175, default 838862848): 
Last sector, +sectors or +size{K,M,G,T,P} (838862848-1953458175, default 1953458175): +692060160

Created a new partition 2 of type &#39;Linux&#39; and of size 330 GiB.

Command (m for help): n
Partition type
   p   primary (2 primary, 0 extended, 2 free)
   e   extended (container for logical partitions)
Select (default p): 

Using default response p.
Partition number (3,4, default 3): 
First sector (1530923008-1953458175, default 1530923008): 
Last sector, +sectors or +size{K,M,G,T,P} (1530923008-1953458175, default 1953458175): +419430400

Created a new partition 3 of type &#39;Linux&#39; and of size 200 GiB.

Command (m for help): p
Disk /dev/sdb: 931.5 GiB, 1000170586112 bytes, 1953458176 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x09c6efcf

Device     Boot      Start        End   Sectors  Size Id Type
/dev/sdb1             2048  838862847 838860800  400G 83 Linux
/dev/sdb2        838862848 1530923007 692060160  330G 83 Linux
/dev/sdb3       1530923008 1950353407 419430400  200G 83 Linux


Command (m for help): t
Partition number (1-3, default 3): 1
Hex code (type L to list all codes): fd

Changed type of partition &#39;Linux&#39; to &#39;Linux raid autodetect&#39;.

Command (m for help): t
Partition number (1-3, default 3): 2
Hex code (type L to list all codes): fd

Changed type of partition &#39;Linux&#39; to &#39;Linux raid autodetect&#39;.

Command (m for help): t
Partition number (1-3, default 3): 3
Hex code (type L to list all codes): fd

Changed type of partition &#39;Linux&#39; to &#39;Linux raid autodetect&#39;.

Command (m for help): p
Disk /dev/sdb: 931.5 GiB, 1000170586112 bytes, 1953458176 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x09c6efcf

Device     Boot      Start        End   Sectors  Size Id Type
/dev/sdb1             2048  838862847 838860800  400G fd Linux raid autodetect
/dev/sdb2        838862848 1530923007 692060160  330G fd Linux raid autodetect
/dev/sdb3       1530923008 1950353407 419430400  200G fd Linux raid autodetect


Command (m for help): w
The partition table has been altered.
Calling ioctl() to re-read partition table.
Syncing disks.

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mdadmでraid1の構築:edd1b43dbf3196488adbf69244ff43d1&#34;&gt;mdadmでraid1の構築&lt;/h3&gt;

&lt;p&gt;デバイスIDを確認する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo ls -l /dev/disk/by-id/
合計 0
lrwxrwxrwx 1 root root 13 12月 31 18:34 mmc-USDU1_0x66f01af2 -&amp;gt; ../../mmcblk0
lrwxrwxrwx 1 root root 15 12月 31 18:34 mmc-USDU1_0x66f01af2-part1 -&amp;gt; ../../mmcblk0p1
lrwxrwxrwx 1 root root 15 12月 31 18:34 mmc-USDU1_0x66f01af2-part2 -&amp;gt; ../../mmcblk0p2
lrwxrwxrwx 1 root root  9 12月 31 21:43 usb-WD_Elements_10B8_575834314132354E3330594B-0:0 -&amp;gt; ../../sdb
lrwxrwxrwx 1 root root 10 12月 31 21:43 usb-WD_Elements_10B8_575834314132354E3330594B-0:0-part1 -&amp;gt; ../../sdb1
lrwxrwxrwx 1 root root 10 12月 31 21:43 usb-WD_Elements_10B8_575834314132354E3330594B-0:0-part2 -&amp;gt; ../../sdb2
lrwxrwxrwx 1 root root 10 12月 31 21:43 usb-WD_Elements_10B8_575834314132354E3330594B-0:0-part3 -&amp;gt; ../../sdb3
lrwxrwxrwx 1 root root  9 12月 31 21:37 usb-WD_Elements_25A2_57583731413736363234444E-0:0 -&amp;gt; ../../sda
lrwxrwxrwx 1 root root 10 12月 31 21:37 usb-WD_Elements_25A2_57583731413736363234444E-0:0-part1 -&amp;gt; ../../sda1
lrwxrwxrwx 1 root root 10 12月 31 21:37 usb-WD_Elements_25A2_57583731413736363234444E-0:0-part2 -&amp;gt; ../../sda2
lrwxrwxrwx 1 root root 10 12月 31 21:37 usb-WD_Elements_25A2_57583731413736363234444E-0:0-part3 -&amp;gt; ../../sda3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mdadmコマンドでraid1を構築する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mdadm --create /dev/md0 --level=1 --raid-devices=2 /dev/disk/by-id/usb-WD_Elements_25A2_57583731413736363234444E-0\:0-part1 /dev/disk/by-id/usb-WD_Elements_10B8_575834314132354E3330594B-0\:0-part1 
mdadm: Note: this array has metadata at the start and
    may not be suitable as a boot device.  If you plan to
    store &#39;/boot&#39; on this device please ensure that
    your boot-loader understands md/v1.x metadata, or use
    --metadata=0.90
Continue creating array? yes
mdadm: Defaulting to version 1.2 metadata
mdadm: array /dev/md0 started.
$ sudo mdadm --create /dev/md1 --level=1 --raid-devices=2 /dev/disk/by-id/usb-WD_Elements_25A2_57583731413736363234444E-0\:0-part2 /dev/disk/by-id/usb-WD_Elements_10B8_575834314132354E3330594B-0\:0-part2 
mdadm: Note: this array has metadata at the start and
    may not be suitable as a boot device.  If you plan to
    store &#39;/boot&#39; on this device please ensure that
    your boot-loader understands md/v1.x metadata, or use
    --metadata=0.90
Continue creating array? yes
mdadm: Defaulting to version 1.2 metadata
mdadm: array /dev/md1 started.
$ sudo mdadm --create /dev/md2 --level=1 --raid-devices=2 /dev/disk/by-id/usb-WD_Elements_25A2_57583731413736363234444E-0\:0-part3 /dev/disk/by-id/usb-WD_Elements_10B8_575834314132354E3330594B-0\:0-part3 
mdadm: Note: this array has metadata at the start and
    may not be suitable as a boot device.  If you plan to
    store &#39;/boot&#39; on this device please ensure that
    your boot-loader understands md/v1.x metadata, or use
    --metadata=0.90
Continue creating array? yes
mdadm: Defaulting to version 1.2 metadata
mdadm: array /dev/md2 started.
$
$ sudo cat /proc/mdstat 
Personalities : [raid1] 
md2 : active raid1 sdb3[1] sda3[0]
      209584128 blocks super 1.2 [2/2] [UU]
      	resync=DELAYED
      bitmap: 2/2 pages [8KB], 65536KB chunk

md1 : active raid1 sdb2[1] sda2[0]
      345899008 blocks super 1.2 [2/2] [UU]
      	resync=DELAYED
      bitmap: 3/3 pages [12KB], 65536KB chunk

md0 : active raid1 sdb1[1] sda1[0]
      419299328 blocks super 1.2 [2/2] [UU]
      [&amp;gt;....................]  resync =  0.5% (2202240/419299328) finish=403.4min speed=17230K/sec
      bitmap: 4/4 pages [16KB], 65536KB chunk

unused devices: &amp;lt;none&amp;gt;
$
$ sudo mdadm --detail /dev/md*
mdadm: /dev/md does not appear to be an md device
/dev/md0:
        Version : 1.2
  Creation Time : Sat Dec 31 21:50:28 2016
     Raid Level : raid1
     Array Size : 419299328 (399.88 GiB 429.36 GB)
  Used Dev Size : 419299328 (399.88 GiB 429.36 GB)
   Raid Devices : 2
  Total Devices : 2
    Persistence : Superblock is persistent

  Intent Bitmap : Internal

    Update Time : Sat Dec 31 21:53:07 2016
          State : clean, resyncing 
 Active Devices : 2
Working Devices : 2
 Failed Devices : 0
  Spare Devices : 0

  Resync Status : 0% complete

           Name : homenas1:0  (local to host homenas1)
           UUID : ff0b51a1:559b9e27:476e5946:50ee7174
         Events : 31

    Number   Major   Minor   RaidDevice State
       0       8        1        0      active sync   /dev/sda1
       1       8       17        1      active sync   /dev/sdb1
/dev/md1:
        Version : 1.2
  Creation Time : Sat Dec 31 21:51:17 2016
     Raid Level : raid1
     Array Size : 345899008 (329.88 GiB 354.20 GB)
  Used Dev Size : 345899008 (329.88 GiB 354.20 GB)
   Raid Devices : 2
  Total Devices : 2
    Persistence : Superblock is persistent

  Intent Bitmap : Internal

    Update Time : Sat Dec 31 21:51:17 2016
          State : clean, resyncing (DELAYED) 
 Active Devices : 2
Working Devices : 2
 Failed Devices : 0
  Spare Devices : 0

           Name : homenas1:1  (local to host homenas1)
           UUID : 8ae07a1b:967f0164:d564ec68:7e77c145
         Events : 0

    Number   Major   Minor   RaidDevice State
       0       8        2        0      active sync   /dev/sda2
       1       8       18        1      active sync   /dev/sdb2
/dev/md2:
        Version : 1.2
  Creation Time : Sat Dec 31 21:51:43 2016
     Raid Level : raid1
     Array Size : 209584128 (199.88 GiB 214.61 GB)
  Used Dev Size : 209584128 (199.88 GiB 214.61 GB)
   Raid Devices : 2
  Total Devices : 2
    Persistence : Superblock is persistent

  Intent Bitmap : Internal

    Update Time : Sat Dec 31 21:51:43 2016
          State : clean, resyncing (DELAYED) 
 Active Devices : 2
Working Devices : 2
 Failed Devices : 0
  Spare Devices : 0

           Name : homenas1:2  (local to host homenas1)
           UUID : 3cb34c46:3ace2238:e6c98f2e:6aa29e8e
         Events : 0

    Number   Major   Minor   RaidDevice State
       0       8        3        0      active sync   /dev/sda3
       1       8       19        1      active sync   /dev/sdb3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;raid1のフォーマット:edd1b43dbf3196488adbf69244ff43d1&#34;&gt;raid1のフォーマット&lt;/h3&gt;

&lt;p&gt;raid1デバイスをext4でフォーマットする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkfs -t ext4 /dev/md0 
mke2fs 1.42.12 (29-Aug-2014)
Creating filesystem with 104824832 4k blocks and 26206208 inodes
Filesystem UUID: 29e7e530-5125-48b9-a0c7-539e285dbac3
Superblock backups stored on blocks: 
	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 
	4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968, 
	102400000

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (32768 blocks): done
Writing superblocks and filesystem accounting information: done     

$
$ sudo mkfs -t ext4 /dev/md1
mke2fs 1.42.12 (29-Aug-2014)
Creating filesystem with 86474752 4k blocks and 21618688 inodes
Filesystem UUID: 3cf0d3fe-0d04-4fe0-8fe2-b383a669fc3e
Superblock backups stored on blocks: 
	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 
	4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (32768 blocks): done
Writing superblocks and filesystem accounting information: done     

$
$ sudo mkfs -t ext4 /dev/md2
mke2fs 1.42.12 (29-Aug-2014)
Creating filesystem with 52396032 4k blocks and 13099008 inodes
Filesystem UUID: 2968a01e-1116-4895-b06c-c70208ecd6a4
Superblock backups stored on blocks: 
	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 
	4096000, 7962624, 11239424, 20480000, 23887872

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (32768 blocks): done
Writing superblocks and filesystem accounting information: done     

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;raid1デバイスをマウント:edd1b43dbf3196488adbf69244ff43d1&#34;&gt;raid1デバイスをマウント&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkdir /mnt/nas
$ sudo mount -t ext4 /dev/md0 /mnt/nas
$ sudo chmod 775 /mnt/nas
$ sudo chown root:adm /mnt/nas
$ 
$ sudo mkdir /mnt/rpibackup
$ sudo mount -t ext4 /dev/md1 /mnt/rpibackup
$ sudo chmod 775 /mnt/rpibackup
$ sudo chown root:adm /mnt/rpibackup
$ 
$ sudo mkdir /mnt/syslog
$ sudo mount -t ext4 /dev/md2 /mnt/syslog
$ sudo chmod 775 /mnt/syslog
$ sudo chown root:adm /mnt/syslog
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;起動時にraid1デバイスをマウントする:edd1b43dbf3196488adbf69244ff43d1&#34;&gt;起動時にraid1デバイスをマウントする&lt;/h3&gt;

&lt;p&gt;起動時にraid1デバイスをマウントするためにfstabを設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo blkid
/dev/md0: UUID=&amp;quot;29e7e530-5125-48b9-a0c7-539e285dbac3&amp;quot; TYPE=&amp;quot;ext4&amp;quot;
/dev/md1: UUID=&amp;quot;3cf0d3fe-0d04-4fe0-8fe2-b383a669fc3e&amp;quot; TYPE=&amp;quot;ext4&amp;quot;
/dev/md2: UUID=&amp;quot;2968a01e-1116-4895-b06c-c70208ecd6a4&amp;quot; TYPE=&amp;quot;ext4&amp;quot;
$
$ sudo cp -p /etc/fstab{,.org}
$ ls -l /etc/fstab*
-rw-r--r-- 1 root root 302  9月 23 12:53 /etc/fstab
-rw-r--r-- 1 root root 302  9月 23 12:53 /etc/fstab.org
$
$ sudo vi /etc/fstab
UUID=&amp;quot;29e7e530-5125-48b9-a0c7-539e285dbac3&amp;quot;     /mnt/nas        ext4    defaults,nofail 0       0
UUID=&amp;quot;3cf0d3fe-0d04-4fe0-8fe2-b383a669fc3e&amp;quot;     /mnt/rpibackup  ext4    defaults,nofail 0       0
UUID=&amp;quot;2968a01e-1116-4895-b06c-c70208ecd6a4&amp;quot;     /mnt/syslog     ext4    defaults,nofail 0       0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;USBストレージのUUIDが判明するまでマウント作業を遅延させる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cp -p /boot/cmdline.txt{,.org}
$ ls -l /boot/cmdline.txt*
-rwxr-xr-x 1 root root 136  1月  1  1980 /boot/cmdline.txt
-rwxr-xr-x 1 root root 136  1月  1  1980 /boot/cmdline.txt.org
$
$ sudo vi /boot/cmdline.txt
dwc_otg.lpm_enable=0 console=serial0,115200 console=tty1 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait rootdelay=10
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RAID1デバイスの同期速度を変更する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat /proc/sys/dev/raid/speed_limit_min 
1000
$ sudo sh -c &amp;quot;echo 50000 &amp;gt; /proc/sys/dev/raid/speed_limit_min&amp;quot;
$ cat /proc/sys/dev/raid/speed_limit_min
50000
$
$ sudo cp -p /etc/sysctl.conf{,.org}
$ ls -l /etc/sysctl.conf*
-rw-r--r-- 1 root root 2084  3月  7  2015 /etc/sysctl.conf
-rw-r--r-- 1 root root 2084  3月  7  2015 /etc/sysctl.conf.org
$ sudo vi /etc/sysctl.conf
dev.raid.speed_limit_min = 50000
dev.raid.speed_limit_max = 200000
$
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;raid1-backup用ストレージの設定:edd1b43dbf3196488adbf69244ff43d1&#34;&gt;RAID1 Backup用ストレージの設定&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ dmesg | grep sd
[ 7875.564180] sd 2:0:0:0: Attached scsi generic sg2 type 0
[ 7875.571270] sd 2:0:0:0: [sdc] Spinning up disk...
[ 7880.622204] sd 2:0:0:0: [sdc] 1953458176 512-byte logical blocks: (1.00 TB/931 GiB)
[ 7880.622788] sd 2:0:0:0: [sdc] Write Protect is off
[ 7880.622813] sd 2:0:0:0: [sdc] Mode Sense: 47 00 10 08
[ 7880.623346] sd 2:0:0:0: [sdc] No Caching mode page found
[ 7880.623368] sd 2:0:0:0: [sdc] Assuming drive cache: write through
[ 7880.638880] sd 2:0:0:0: [sdc] Attached SCSI disk
$
$ sudo fdisk /dev/sdc 

Welcome to fdisk (util-linux 2.25.2).
Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.


Command (m for help): p
Disk /dev/sdc: 931.5 GiB, 1000170586112 bytes, 1953458176 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x6c9f0b39



Command (m for help): n
Partition type
   p   primary (0 primary, 0 extended, 4 free)
   e   extended (container for logical partitions)
Select (default p): 

Using default response p.
Partition number (1-4, default 1): 
First sector (2048-1953458175, default 2048): 
Last sector, +sectors or +size{K,M,G,T,P} (2048-1953458175, default 1953458175): 

Created a new partition 1 of type &#39;Linux&#39; and of size 931.5 GiB.

Command (m for help): p
Disk /dev/sdc: 931.5 GiB, 1000170586112 bytes, 1953458176 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x6c9f0b39

Device     Boot Start        End    Sectors   Size Id Type
/dev/sdc1        2048 1953458175 1953456128 931.5G 83 Linux


Command (m for help): w
The partition table has been altered.
Calling ioctl() to re-read partition table.
Syncing disks.

$
$ sudo mkfs -t ext4 /dev/sdc1 
mke2fs 1.42.12 (29-Aug-2014)
Creating filesystem with 244182016 4k blocks and 61046784 inodes
Filesystem UUID: 80e310e4-44d9-4de2-a3b7-a71915318f29
Superblock backups stored on blocks: 
	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 
	4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968, 
	102400000, 214990848

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (32768 blocks): done
Writing superblocks and filesystem accounting information: done     

$
$ sudo mkdir /backup
$ sudo mount -t ext4 /dev/sdc1 /backup/
$ sudo chmod 775 /backup/
$ sudo chown root:adm /backup/
$
$ sudo blkid
/dev/sdc1: UUID=&amp;quot;80e310e4-44d9-4de2-a3b7-a71915318f29&amp;quot; TYPE=&amp;quot;ext4&amp;quot; PARTUUID=&amp;quot;6c9f0b39-01&amp;quot;
$
$ sudo vi /etc/fstab
UUID=&amp;quot;80e310e4-44d9-4de2-a3b7-a71915318f29&amp;quot;     /backup ext4    defaults,nofail 0       0
$
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考url:edd1b43dbf3196488adbf69244ff43d1&#34;&gt;参考URL&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://projpi.com/diy-home-projects-with-a-raspberry-pi/raspberry-pi-raid-array-with-usb-hdds/&#34;&gt;Raspberry Pi raid array with USB HDDs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>家庭内インターネット接続環境を構築する その2</title>
      <link>http://www.shinayoshi.net/post/2016/10/22/raspberrypi-initial-setup/</link>
      <pubDate>Sat, 22 Oct 2016 22:43:46 +0900</pubDate>
      
      <guid>http://www.shinayoshi.net/post/2016/10/22/raspberrypi-initial-setup/</guid>
      <description>

&lt;h2 id=&#34;raspberry-pi-2共通初期設定:4734a81b60315110a1536277d531cee2&#34;&gt;Raspberry Pi 2共通初期設定&lt;/h2&gt;

&lt;p&gt;家庭内インターネット接続環境で使用するRaspberry Pi 2の初期設定を行います。&lt;/p&gt;

&lt;h2 id=&#34;前提:4734a81b60315110a1536277d531cee2&#34;&gt;前提&lt;/h2&gt;

&lt;p&gt;Raspberry Pi 2にRaspbian Jessie(2016-09-23-raspbian-jessie-lite.img)をインストールした環境の初期設定を想定します。
セキュリティ関連の設定は個別に行いますので、ここでは省略します。&lt;/p&gt;

&lt;h2 id=&#34;パッケージ更新:4734a81b60315110a1536277d531cee2&#34;&gt;パッケージ更新&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/documentation/raspbian/updating.md&#34;&gt;Updating and Upgrading Raspbian - Raspberry Pi Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ipアドレス固定化:4734a81b60315110a1536277d531cee2&#34;&gt;IPアドレス固定化&lt;/h2&gt;

&lt;p&gt;Raspberry Pi 2のIPアドレスを固定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cp -p /etc/dhcpcd.conf /etc/dhcpcd.conf.org
$ sudo vi /etc/dhcpcd.conf
#Add the following line
interface eth0
static ip_address=192.168.40.10/24
static routers=192.168.40.254
static domain_name_servers=192.168.100.1
#static domain_name=
#static domain_search=

interface eth1
static ip_address=172.31.10.110/24
static routers=
static domain_name_servers=
#static domain_name=
#static domain_search=
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;man dhcpcd.conf&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;usbポートの電流供給増加:4734a81b60315110a1536277d531cee2&#34;&gt;USBポートの電流供給増加&lt;/h2&gt;

&lt;p&gt;USBポートの電流供給を1.2A(4ポート合計)まで供給できるようにする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cp -p /boot/config.txt /boot/config.txt.org
$ sudo vi /boot/config.txt
#Add the following line
max_usb_current=1
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://elinux.org/RPiconfig&#34;&gt;RPiconfig - eLinux.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ntp設定:4734a81b60315110a1536277d531cee2&#34;&gt;NTP設定&lt;/h2&gt;

&lt;p&gt;NTP同期先を設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cp -p /etc/ntp.conf /etc/ntp.conf.org
$ sudo vi /etc/ntp.conf
#Add the line
server ntp.nict.jp iburst
server ntp.jst.mfeed.ad.jp iburst
# comment out
#server 0.debian.pool.ntp.org iburst
#server 1.debian.pool.ntp.org iburst
#server 2.debian.pool.ntp.org iburst
#server 3.debian.pool.ntp.org iburst
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NTPサーバを再起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl restart ntp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;時刻同期の状態を確認する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ntpq -p
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://vogel.at.webry.info/201501/article_5.html&#34;&gt;NTPサーバの設定 パソコン鳥のブログ/ウェブリブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;raspi-config関連:4734a81b60315110a1536277d531cee2&#34;&gt;raspi-config関連&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ sudo raspi-config
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;文字コード設定:4734a81b60315110a1536277d531cee2&#34;&gt;文字コード設定&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;「4 Internationalisation Options」を選択する。&lt;/li&gt;
&lt;li&gt;「I1 Change Locale」を選択する。&lt;/li&gt;
&lt;li&gt;「en_GB.UTF-8 UTF-8」の選択を外す。&lt;/li&gt;
&lt;li&gt;「ja_JP.UTF-8 UTF-8」を選択する。&lt;/li&gt;
&lt;li&gt;「Ok」を選択する。&lt;/li&gt;
&lt;li&gt;「ja_JP.UTF-8」を選択する。&lt;/li&gt;
&lt;li&gt;「Ok」を選択する。&lt;/li&gt;
&lt;li&gt;raspi-configの初期画面に戻る。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;タイムゾーン設定:4734a81b60315110a1536277d531cee2&#34;&gt;タイムゾーン設定&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;「4 Internationalisation Options」を選択する。&lt;/li&gt;
&lt;li&gt;「I2 Change Timezone」を選択する。&lt;/li&gt;
&lt;li&gt;「Asia」を選択する。&lt;/li&gt;
&lt;li&gt;「Tokyo」を選択する。&lt;/li&gt;
&lt;li&gt;raspi-configの初期画面に戻る。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;wifiの国設定:4734a81b60315110a1536277d531cee2&#34;&gt;Wifiの国設定&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;「4 Internationalisation Options」を選択する。&lt;/li&gt;
&lt;li&gt;「I4 Change Wi-fi Country」を選択する。&lt;/li&gt;
&lt;li&gt;「JP Japan」を選択する。&lt;/li&gt;
&lt;li&gt;「Ok」を選択する。&lt;/li&gt;
&lt;li&gt;raspi-configの初期画面に戻る。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;ホスト名変更:4734a81b60315110a1536277d531cee2&#34;&gt;ホスト名変更&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;「7 Advanced Options」を選択する。&lt;/li&gt;
&lt;li&gt;「A2 Hostname」を選択する。&lt;/li&gt;
&lt;li&gt;「Ok」を選択する。&lt;/li&gt;
&lt;li&gt;ホスト名を設定する。&lt;/li&gt;
&lt;li&gt;「Ok」を選択する。&lt;/li&gt;
&lt;li&gt;raspi-configの初期画面に戻る。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;raspi-config終了:4734a81b60315110a1536277d531cee2&#34;&gt;raspi-config終了&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;「Finish」を選択する。&lt;/li&gt;
&lt;li&gt;リブートの確認が求められるため、「Yes」を選択する。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>家庭内インターネット接続環境を構築する その1</title>
      <link>http://www.shinayoshi.net/post/2016/10/22/build-home-network-01/</link>
      <pubDate>Sat, 22 Oct 2016 19:59:16 +0900</pubDate>
      
      <guid>http://www.shinayoshi.net/post/2016/10/22/build-home-network-01/</guid>
      <description>

&lt;p&gt;FortiGate 60DとRaspberry Piを使用して家庭内インターネット接続環境を構築します。
最終的には以下のような構成を想定しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20161022_01/home-network.png&#34; alt=&#34;home network&#34; width=&#34;640px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;機材:e8a70867bb0ccfe3cfd50643695a747c&#34;&gt;機材&lt;/h2&gt;

&lt;p&gt;本環境を構築するために以下の機材を用意しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FortiGate 60D : 1台&lt;/li&gt;
&lt;li&gt;Raspberry Pi 2 : 5台&lt;/li&gt;
&lt;li&gt;USB LANアダプタ : 5個&lt;/li&gt;
&lt;li&gt;Switching HUB : 3台&lt;/li&gt;
&lt;li&gt;WANルータ : 1台&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体的な構築内容は次回から記載します。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raspbian(Jessie)でキャッシュDNSを構築する</title>
      <link>http://www.shinayoshi.net/post/2016/08/24/cache-dns-on-raspbian/</link>
      <pubDate>Wed, 24 Aug 2016 19:15:14 +0900</pubDate>
      
      <guid>http://www.shinayoshi.net/post/2016/08/24/cache-dns-on-raspbian/</guid>
      <description>

&lt;p&gt;Raspbian(Jessie)でキャッシュDNSを構築するまでのメモです。
Raspbianの基本的な設定は完了している前提です。&lt;/p&gt;

&lt;h2 id=&#34;bind9のインストール:de7ee9c067a99fe782c9ccc491d85d09&#34;&gt;bind9のインストール&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install bind9 dnsutils
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bind9の設定を行う。変更箇所が多かったので、変更箇所ではなく変更後のコンフィグを提示する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cat /etc/bind/named.conf.options
controls {
	inet 127.0.0.1 allow { localhost; } keys { rndc-key; };
};
include &amp;quot;/etc/bind/rndc.key&amp;quot;;

acl &amp;quot;internal-network&amp;quot; {
	localhost;
	127.0.0.1/32;
	192.168.10.0/24;
	192.168.20.0/24;
	192.168.30.0/24;
	192.168.40.0/24;
};

options {
	version &amp;quot;unknown&amp;quot;;

	directory &amp;quot;/var/cache/bind&amp;quot;;

	listen-on {
		internal-network;
	};

	querylog yes;
	allow-query {
		internal-network;
	};

	recursion yes;
	allow-recursion {
		internal-network;
	};

	forwarders {
		192.168.100.1;
	};

	notify no;

	max-ncache-ttl	300;
	max-cache-ttl	3600;
	recursive-clients	300;
	cleaning-interval	60;
	lame-ttl	600;
	max-cache-size	256m;

	allow-transfer {
		none;
	};

	allow-update {
		none;
	};
};

logging {
	channel &amp;quot;log_default&amp;quot; {
		file &amp;quot;/var/log/bind/named.log&amp;quot; versions 5 size 5m;
		print-time yes;
		severity info;
		print-category yes;
	};
	channel &amp;quot;alert&amp;quot; {
		file &amp;quot;/var/log/bind/alert.log&amp;quot; versions 8 size 4m;
		severity info;
		print-time yes;
		print-severity yes;
		print-category yes;
	};
	channel &amp;quot;query&amp;quot; {
		file &amp;quot;/var/log/bind/query.log&amp;quot; versions 8 size 50m;
		severity debug;
		print-time yes;
		print-severity yes;
		print-category yes;
	};

	category default { &amp;quot;log_default&amp;quot;; };
	category security { &amp;quot;alert&amp;quot;; };
	category queries { &amp;quot;query&amp;quot;; };
	category lame-servers { null; };
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンフィグの不備を確認する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo named-checkconf /etc/bind/named.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ログ保存先のディレクトリを作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkdir -p /var/log/bind
$ sudo chown bind:bind /var/log/bind
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bind9を再起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl restart bind9
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;iptablesの設定:de7ee9c067a99fe782c9ccc491d85d09&#34;&gt;iptablesの設定&lt;/h2&gt;

&lt;p&gt;iptablesでfirewallを設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo iptables -A INPUT -m state --state NEW -m udp -p udp -s 192.168.0.0/16 --dport 53 -j ACCEPT
$ sudo iptables -A INPUT -m state --state NEW -m tcp -p tcp -s 192.168.0.0/16 --dport 53 -j ACCEPT

$ sudo iptables -A OUTPU -m state --state NEW -m udp -p udp --dport 53 -j ACCEPT
$ sudo iptables -A OUTPU -m state --state NEW -m tcp -p tcp --dport 53 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;iptablesの設定を保存する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo sh -c &amp;quot;iptables-save &amp;gt; /etc/iptables/rules.v4&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dnsの設定:de7ee9c067a99fe782c9ccc491d85d09&#34;&gt;DNSの設定&lt;/h2&gt;

&lt;p&gt;キャッシュDNSを使用するように設定変更を行う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vi /etc/dhcpcd.conf
static domain_name_servers=127.0.0.1
$ sudo systemctl restart dhcpcd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raspbian(Jessie)にSquidをインストールする</title>
      <link>http://www.shinayoshi.net/post/2016/08/22/installing-squid-on-raspbian/</link>
      <pubDate>Mon, 22 Aug 2016 22:24:35 +0900</pubDate>
      
      <guid>http://www.shinayoshi.net/post/2016/08/22/installing-squid-on-raspbian/</guid>
      <description>

&lt;p&gt;Raspbian(Jessie)にSquidをインストールして内部NW向けプロキシサーバを構築するまでのメモです。&lt;/p&gt;

&lt;h2 id=&#34;raspbianの初期設定:b44e2973592bad70879d3cac4bdad4df&#34;&gt;Raspbianの初期設定&lt;/h2&gt;

&lt;p&gt;過去のブログ記事を参考に初期設定を実施する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;パッケージの最新化&lt;/li&gt;
&lt;li&gt;パッケージのインストール
&amp;ndash; chkconfig
&amp;ndash; tcpdump
&amp;ndash; telnet
&amp;ndash; dnsutils&lt;/li&gt;
&lt;li&gt;IPアドレスの固定化&lt;/li&gt;
&lt;li&gt;NTP設定&lt;/li&gt;
&lt;li&gt;rpi-configの設定
&amp;ndash; ディスク拡張
&amp;ndash; 文字コード設定
&amp;ndash; タイムゾーン設定
&amp;ndash; Wifiの国設定
&amp;ndash; ホスト名変更&lt;/li&gt;
&lt;li&gt;公開鍵認証方式の設定&lt;/li&gt;
&lt;li&gt;IPv6の無効化&lt;/li&gt;
&lt;li&gt;SELinuxの無効化&lt;/li&gt;
&lt;li&gt;iptablesの設定&lt;/li&gt;
&lt;li&gt;logwatchのインストール&lt;/li&gt;
&lt;li&gt;Zabbix Agentのインストール・監視登録&lt;/li&gt;
&lt;li&gt;SNMPDのインストール・Cacti登録&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;squidのインストール:b44e2973592bad70879d3cac4bdad4df&#34;&gt;Squidのインストール&lt;/h2&gt;

&lt;p&gt;Squidをインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install squid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Squidを設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cp -p /etc/squid/squid.conf{,.org}
$ sudo vi /etc/squid/squid.conf
$ sudo diff /etc/squid/squid.conf.org /etc/squid/squid.conf
609,611c609,616
&amp;lt; acl localnet src 10.0.0.0/8	# RFC1918 possible internal network
&amp;lt; acl localnet src 172.16.0.0/12	# RFC1918 possible internal network
&amp;lt; acl localnet src 192.168.0.0/16	# RFC1918 possible internal network
---
&amp;gt; #acl localnet src 10.0.0.0/8	# RFC1918 possible internal network
&amp;gt; #acl localnet src 172.16.0.0/12	# RFC1918 possible internal network
&amp;gt; #acl localnet src 192.168.0.0/16	# RFC1918 possible internal network
&amp;gt; acl localnet src 192.168.10.0/24
&amp;gt; acl localnet src 192.168.20.0/24
&amp;gt; acl localnet src 192.168.30.0/24
&amp;gt; acl localnet src 192.168.40.0/24
&amp;gt; 
676c681
&amp;lt; #http_access allow localnet
---
&amp;gt; http_access allow localnet
1738a1744
&amp;gt; cache_mem 256 MB
1747a1754
&amp;gt; maximum_object_size_in_memory 512 KB
1945a1953
&amp;gt; cache_dir ufs /var/spool/squid 10000 16 256
1988a1997
&amp;gt; maximum_object_size 20480 KB
2097a2107
&amp;gt; logformat combined %&amp;gt;a %ui %un [%tl] &amp;quot;%rm %ru HTTP/%rv&amp;quot; %Hs %&amp;lt;st &amp;quot;%{Referer}&amp;gt;h&amp;quot; &amp;quot;%{User-Agent}&amp;gt;h&amp;quot; %Ss:%Sh
2121c2131,2132
&amp;lt; access_log /var/log/squid/access.log squid
---
&amp;gt; #access_log /var/log/squid/access.log squid
&amp;gt; access_log /var/log/squid/access.log combined
2217a2229
&amp;gt; emulate_httpd_log off
2751c2763,2768
&amp;lt; refresh_pattern .		0	20%	4320
---
&amp;gt; refresh_pattern -i \.(gif|png|jpe?g|tif?f|bmp)$ 1440 25% 10080
&amp;gt; refresh_pattern -i \.(mpe?g|avi|ra?m|wmv|mov)$ 1440 25% 10080
&amp;gt; refresh_pattern -i \.(wav|mp3|mid)$ 1440 25% 10080
&amp;gt; refresh_pattern -i \.(class|swf|pdf)$ 1440 25% 10080
&amp;gt; refresh_pattern -i \.(js|css)$ 1440 25% 10080
&amp;gt; refresh_pattern . 45 20% 4320
2944a2962
&amp;gt; via off
3100a3119,3122
&amp;gt; header_access Referer deny all
&amp;gt; header_access X-Forwarded-For deny all
&amp;gt; header_access Via deny all
&amp;gt; header_access Cache-Control deny all
3392a3415
&amp;gt; visible_hostname unknown
4699a4723
&amp;gt; forwarded_for off
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Squidの設定に不備がないか確認する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo squid -k parse
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Squidの設定を有効にする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl reload squid
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.unix-power.net/linux/squid.html&#34;&gt;CentOS Squidの設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tech.ckme.co.jp/proxy.shtml&#34;&gt;Proxyサーバの設定（squid）：tech.ckme.co.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nabeshiki.tumblr.com/post/20000083416/2001-sd-squid&#34;&gt;Proxyキャッシュサーバ設定術・Squidの設定(2001年掲載) | なべしき&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.asial.co.jp/1076&#34;&gt;Privoxy + Ziproxy + Squidで高速フィルタリングサーバを作ってみた : アシアルブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;iptablesの通信許可設定:b44e2973592bad70879d3cac4bdad4df&#34;&gt;iptablesの通信許可設定&lt;/h2&gt;

&lt;p&gt;内部NWからSquidへの通信を許可する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo iptables -A INPUT -m state --state NEW -m tcp -p tcp -s 192.168.0.0/16 --dport 3128 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;iptablesの設定を保存する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo sh -c &amp;quot;iptables-save &amp;gt; /etc/iptables/rules.v4&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ブラウザのプロキシ設定:b44e2973592bad70879d3cac4bdad4df&#34;&gt;ブラウザのプロキシ設定&lt;/h2&gt;

&lt;p&gt;ブラウザ使用するプロキシ設定をSquidに変更する。&lt;/p&gt;

&lt;p&gt;Squidのログを確認してSquid経由でWebアクセスができていることを確認する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cat /var/log/squid/access.log
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;raspbianのプロキシ設定:b44e2973592bad70879d3cac4bdad4df&#34;&gt;Raspbianのプロキシ設定&lt;/h2&gt;

&lt;p&gt;起動時にプロキシを使用するように設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vi /etc/profile.d/proxy.sh
PROXY=&amp;quot;192.168.20.10:3128&amp;quot;
export http_proxy=&amp;quot;http://${PROXY}&amp;quot;
export https_proxy=&amp;quot;http://${PROXY}&amp;quot;
export no_proxy=&amp;quot;localhost,127.0.0.1,192.168.*&amp;quot;

export HTTP_PROXY=&amp;quot;${http_proxy}&amp;quot;
export HTTPS_PROXY=&amp;quot;${https_proxy}&amp;quot;
export NO_PROXY=&amp;quot;${no_proxy}&amp;quot;
$source /etc/profile.d/proxy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記コマンドではsudo時の環境変数には反映されない。そのため、sudo時には&lt;code&gt;-E&lt;/code&gt;オプションを指定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo -E apt-get update
$ sudo -E apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cactiにデバイスを登録する</title>
      <link>http://www.shinayoshi.net/post/2016/08/21/to-register-the-device-in-cacti/</link>
      <pubDate>Sun, 21 Aug 2016 11:05:38 +0900</pubDate>
      
      <guid>http://www.shinayoshi.net/post/2016/08/21/to-register-the-device-in-cacti/</guid>
      <description>

&lt;p&gt;Cactiに新規デバイスを登録するメモです。
SNMPv3を使用してSNMPの値を取得します。&lt;/p&gt;

&lt;h2 id=&#34;snmpdのインストール:96919d4705cb30bdfea22f7f270ecaaf&#34;&gt;snmpdのインストール&lt;/h2&gt;

&lt;p&gt;追加するデバイス(Server)にsnmpdをインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install snmpd snmp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;snmpconfツールを使用してsnmpd.confを作成する。
SNMPv3を使用する前提で質問に回答していきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ snmpconf -g basic_setup

The following installed configuration files were found:

   1:  /etc/snmp/snmp.conf
   2:  /etc/snmp/snmpd.conf

Would you like me to read them in?  Their content will be merged with the
output files created by this session.

Valid answer examples: &amp;quot;all&amp;quot;, &amp;quot;none&amp;quot;,&amp;quot;3&amp;quot;,&amp;quot;1,2,5&amp;quot;

Read in which (default = all): 2
************************************************ 
*** Beginning basic system information setup ***
************************************************ 
Do you want to configure the information returned in the system MIB group (contact info, etc)? (default = y): n
************************************** 
*** BEGINNING ACCESS CONTROL SETUP ***
************************************** 
Do you want to configure the agent&#39;s access control? (default = y): y
Do you want to allow SNMPv3 read-write user based access (default = y): n
Do you want to allow SNMPv3 read-only user based access (default = y): y

Configuring: rouser
Description:
  a SNMPv3 read-only user
    arguments:  user [noauth|auth|priv] [restriction_oid]

Enter the SNMPv3 user that should have read-only access to the system: snmpuser
The minimum security level required for that user [noauth|auth|priv, default = auth]: priv
The OID that this community should be restricted to [if appropriate]: 

Finished Output: rouser  snmpuser priv 
Do another rouser line? (default = y): n
Do you want to allow SNMPv1/v2c read-write community access (default = y): n
Do you want to allow SNMPv1/v2c read-only community access (default = y): n
**************************************** 
*** Beginning trap destination setup ***
**************************************** 
Do you want to configure where and if the agent will send traps? (default = y): n
**************************************** 
*** Beginning monitoring setup ***
**************************************** 
Do you want to configure the agent&#39;s ability to monitor various aspects of your system? (default = y): n


The following files were created:

  snmpd.conf  

These files should be moved to /usr/share/snmp if you
want them used by everyone on the system.  In the future, if you add 
the -i option to the command line I&#39;ll copy them there automatically for you.

Or, if you want them for your personal use only, copy them to
/home/pi/.snmp .  In the future, if you add the -p option to the
command line I&#39;ll copy them there automatically for you.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;snmpd.confを設置する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cp -p /etc/snmp/snmpd.conf{,.org}
$ sudo cp snmpd.conf /etc/snmp/snmpd.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SNMPv3ユーザを作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl stop snmpd
$ sudo cp -p /var/lib/snmp/snmpd.conf{,.org}
$ sudo vi /var/lib/snmp/snmpd.conf
createUser snmpuser SHA snmp_pass AES snmp_pass
$ sudo systemctl start snmpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SNMPv3で値を取得できることを確認する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ snmpwalk -v 3 -u snmpuser -l authPriv -a SHA -A snmp_pass -x AES -X snmp_pass localhost .
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infraexpert.com/study/tcpip21.html&#34;&gt;TCP/IP - SNMPとは&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;iptablesの通信許可:96919d4705cb30bdfea22f7f270ecaaf&#34;&gt;iptablesの通信許可&lt;/h2&gt;

&lt;p&gt;CactiからのSNMP通信を許可する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;##INPUTチェーン
#SNMPは許可
$ sudo iptables -A INPUT -m state --state NEW -m udp -p udp -s 192.168.30.0/24 --dport 161 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;iptablesの設定を保存する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo sh -c &amp;quot;iptables-save &amp;gt; /etc/iptables/rules.v4&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;cactiにデバイス-server-を登録:96919d4705cb30bdfea22f7f270ecaaf&#34;&gt;Cactiにデバイス(Server)を登録&lt;/h2&gt;

&lt;p&gt;↓Cactiにログイン。&lt;code&gt;User Name&lt;/code&gt;と&lt;code&gt;Password&lt;/code&gt;を入力して&lt;code&gt;Login&lt;/code&gt;をクリックする。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20160821_01/cacti_register_01.png&#34; alt=&#34;cacti_register_01&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓Cactiログイン後の画面。&lt;code&gt;Devices&lt;/code&gt;をクリックする。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20160821_01/cacti_register_02.png&#34; alt=&#34;cacti_register_02&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓デバイスの管理画面。&lt;code&gt;Add&lt;/code&gt;をクリックする。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20160821_01/cacti_register_03.png&#34; alt=&#34;cacti_register_03&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓デバイスの登録画面。必要事項を入力して&lt;code&gt;Create&lt;/code&gt;をクリックする。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20160821_01/cacti_register_04.png&#34; alt=&#34;cacti_register_04&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓デバイスの登録完了画面。&lt;code&gt;SNMP Information&lt;/code&gt;にデバイスの情報が表示されていることを確認する。&lt;code&gt;Create Graphs for this Host&lt;/code&gt;をクリックする。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20160821_01/cacti_register_05.png&#34; alt=&#34;cacti_register_05&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓作成したいグラフを選択して&lt;code&gt;Create&lt;/code&gt;をクリックする。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20160821_01/cacti_register_06.png&#34; alt=&#34;cacti_register_06&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓グラフが作成されたことを確認する。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20160821_01/cacti_register_07.png&#34; alt=&#34;cacti_register_07&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓左のメニューから&lt;code&gt;Graph Trees&lt;/code&gt;をクリックし、&lt;code&gt;Default Tree&lt;/code&gt;をクリックする。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20160821_01/cacti_register_08.png&#34; alt=&#34;cacti_register_08&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓ツリーの管理画面。&lt;code&gt;Add&lt;/code&gt;をクリックする。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20160821_01/cacti_register_09.png&#34; alt=&#34;cacti_register_09&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓ツリーへのデバイス登録画面。必要事項を入力して&lt;code&gt;Create&lt;/code&gt;をクリックする。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20160821_01/cacti_register_10.png&#34; alt=&#34;cacti_register_10&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓ツリーの管理画面。デバイスが登録されたことを確認する。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20160821_01/cacti_register_11.png&#34; alt=&#34;cacti_register_11&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓グラフ画面。追加したデバイスのグラフが表示されることを確認する。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20160821_01/cacti_register_12.png&#34; alt=&#34;cacti_register_12&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raspbian(Jessie)にCactiをインストールする</title>
      <link>http://www.shinayoshi.net/post/2016/08/20/installing-cacti-on-raspberrypi/</link>
      <pubDate>Sat, 20 Aug 2016 20:46:05 +0900</pubDate>
      
      <guid>http://www.shinayoshi.net/post/2016/08/20/installing-cacti-on-raspberrypi/</guid>
      <description>

&lt;p&gt;Raspbian(Jessie)にCactiを導入するまでのメモです。
Apache2やMySQLはインストール済みであることを前提としています。&lt;/p&gt;

&lt;h2 id=&#34;cactiのインストール:2f489629b1913a89dc29f01f282bd186&#34;&gt;Cactiのインストール&lt;/h2&gt;

&lt;p&gt;Cactiをインストールする。
途中でApache2の設定やMySQLのパスワードについて聞かれるので適宜回答する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install cacti cacti-spine

↓&amp;lt;了解&amp;gt;を選択してEnter
 ┌─────────────────────┤ libphp-adodb を設定しています ├─────────────────────┐
 │                                                                           │ 
 │ 警告: php に対するインクルードパスが変更されています!                     │ 
 │                                                                           │ 
 │ libphp-adobd は /usr/share/adodb にインストールされなくなっています。新   │ 
 │ しいインストールのパスは /usr/share/php/adodb です。                      │ 
 │                                                                           │ 
 │ php.ini ファイルを更新してください。web サーバの設定も変更する必要がある  │ 
 │ かもしれません。                                                          │ 
 │                                                                           │ 
 │                                  &amp;lt;了解&amp;gt;                                   │ 
 │                                                                           │ 
 └───────────────────────────────────────────────────────────────────────────┘ 

↓apache2を選択してEnter
 ┌────────────────────────┤ cacti を設定しています ├─────────────────────────┐
 │ Cacti が自動的に設定するウェブサーバを選んでください。                    │ 
 │                                                                           │ 
 │ ウェブサーバを手作業で設定したい場合は「どれでもない」を選んでください。  │ 
 │                                                                           │ 
 │ ウェブサーバ:                                                             │ 
 │                                                                           │ 
 │                               apache2                                     │ 
 │                               lighttpd                                    │ 
 │                               どれでもない                                │ 
 │                                                                           │ 
 │                                                                           │ 
 │                                  &amp;lt;了解&amp;gt;                                   │ 
 │                                                                           │ 
 └───────────────────────────────────────────────────────────────────────────┘ 

↓&amp;lt;はい&amp;gt;を選択してEnter
 ┌────────────────────────┤ cacti を設定しています ├─────────────────────────┐
 │                                                                           │ 
 │ cacti は利用できるようになる前にはデータベースをインストールして設定する  │ 
 │ 必要があります。この設定を dbconfig-common で管理するようにもできます。   │ 
 │                                                                           │ 
 │ あなたが熟練したデータベース管理者でこの設定について手動で何をするのかを  │ 
 │ 知っている場合、あるいはデータベースが既にインストール及び設定されている  │ 
 │ 場合は、この選択を選ばない方が良いでしょう。何をすればいいのかについての  │ 
 │ 詳細については、大抵 /usr/share/doc/cacti に置かれています。              │ 
 │                                                                           │ 
 │ そうでない場合は、恐らくこの設定を選ぶのが良いでしょう。                  │ 
 │                                                                           │ 
 │ cacti のデータベースを dbconfig-common で設定しますか?                    │ 
 │                                                                           │ 
 │                    &amp;lt;はい&amp;gt;                      &amp;lt;いいえ&amp;gt;                   │ 
 │                                                                           │ 
 └───────────────────────────────────────────────────────────────────────────┘ 

↓MySQLのrootユーザのパスワードを入力し、&amp;lt;了解&amp;gt;を選択してEnter
  ┌────────────────────────┤ cacti を設定しています ├────────────────────────┐
  │ このパッケージが MySQL データベースとユーザを作る際に使う管理者権限アカ  │ 
  │ ウントのパスワードを入力してください。                                   │ 
  │                                                                          │ 
  │ データベースの管理権限を持つユーザのパスワード:                          │ 
  │                                                                          │ 
  │ ________________________________________________________________________ │ 
  │                                                                          │ 
  │                   &amp;lt;了解&amp;gt;                     &amp;lt;取消&amp;gt;                      │ 
  │                                                                          │ 
  └──────────────────────────────────────────────────────────────────────────┘ 

↓MySQLのcactiユーザのパスワードを入力し、&amp;lt;了解&amp;gt;を選択してEnter
  ┌────────────────────────┤ cacti を設定しています ├────────────────────────┐
  │ データベースサーバに cacti が登録するパスワードを入力してください。空の  │ 
  │ ままにしておくと、ランダムパスワードが生成されます。                     │ 
  │                                                                          │ 
  │ cacti 用の MySQL アプリケーションパスワード:                             │ 
  │                                                                          │ 
  │ ________________________________________________________________________ │ 
  │                                                                          │ 
  │                   &amp;lt;了解&amp;gt;                     &amp;lt;取消&amp;gt;                      │ 
  │                                                                          │ 
  └──────────────────────────────────────────────────────────────────────────┘ 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;データベースをMyISAMからInnoDBに変更する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /usr/share/cacti/cli
$ sudo php convert_innodb.php
Converting All Non-Memory Cacti Database Tables to Innodb with Less than &#39;300000&#39; Records
Converting Table -&amp;gt; &#39;cdef&#39; Successful
Converting Table -&amp;gt; &#39;cdef_items&#39; Successful
Converting Table -&amp;gt; &#39;colors&#39; Successful
Converting Table -&amp;gt; &#39;data_input&#39; Successful
Converting Table -&amp;gt; &#39;data_input_data&#39; Successful
Converting Table -&amp;gt; &#39;data_input_fields&#39; Successful
Converting Table -&amp;gt; &#39;data_local&#39; Successful
Converting Table -&amp;gt; &#39;data_template&#39; Successful
Converting Table -&amp;gt; &#39;data_template_data&#39; Successful
Converting Table -&amp;gt; &#39;data_template_data_rra&#39; Successful
Converting Table -&amp;gt; &#39;data_template_rrd&#39; Successful
Converting Table -&amp;gt; &#39;graph_local&#39; Successful
Converting Table -&amp;gt; &#39;graph_template_input&#39; Successful
Converting Table -&amp;gt; &#39;graph_template_input_defs&#39; Successful
Converting Table -&amp;gt; &#39;graph_templates&#39; Successful
Converting Table -&amp;gt; &#39;graph_templates_gprint&#39; Successful
Converting Table -&amp;gt; &#39;graph_templates_graph&#39; Successful
Converting Table -&amp;gt; &#39;graph_templates_item&#39; Successful
Converting Table -&amp;gt; &#39;graph_tree&#39; Successful
Converting Table -&amp;gt; &#39;graph_tree_items&#39; Successful
Converting Table -&amp;gt; &#39;host&#39; Successful
Converting Table -&amp;gt; &#39;host_graph&#39; Successful
Converting Table -&amp;gt; &#39;host_snmp_cache&#39; Successful
Converting Table -&amp;gt; &#39;host_snmp_query&#39; Successful
Converting Table -&amp;gt; &#39;host_template&#39; Successful
Converting Table -&amp;gt; &#39;host_template_graph&#39; Successful
Converting Table -&amp;gt; &#39;host_template_snmp_query&#39; Successful
Converting Table -&amp;gt; &#39;plugin_config&#39; Successful
Converting Table -&amp;gt; &#39;plugin_db_changes&#39; Successful
Converting Table -&amp;gt; &#39;plugin_hooks&#39; Successful
Converting Table -&amp;gt; &#39;plugin_realms&#39; Successful
Converting Table -&amp;gt; &#39;poller&#39; Successful
Converting Table -&amp;gt; &#39;poller_command&#39; Successful
Converting Table -&amp;gt; &#39;poller_item&#39; Successful
Converting Table -&amp;gt; &#39;poller_output&#39; Successful
Converting Table -&amp;gt; &#39;poller_reindex&#39; Successful
Converting Table -&amp;gt; &#39;poller_time&#39; Successful
Converting Table -&amp;gt; &#39;rra&#39; Successful
Converting Table -&amp;gt; &#39;rra_cf&#39; Successful
Converting Table -&amp;gt; &#39;settings&#39; Successful
Converting Table -&amp;gt; &#39;settings_graphs&#39; Successful
Converting Table -&amp;gt; &#39;settings_tree&#39; Successful
Converting Table -&amp;gt; &#39;snmp_query&#39; Successful
Converting Table -&amp;gt; &#39;snmp_query_graph&#39; Successful
Converting Table -&amp;gt; &#39;snmp_query_graph_rrd&#39; Successful
Converting Table -&amp;gt; &#39;snmp_query_graph_rrd_sv&#39; Successful
Converting Table -&amp;gt; &#39;snmp_query_graph_sv&#39; Successful
Converting Table -&amp;gt; &#39;user_auth&#39; Successful
Converting Table -&amp;gt; &#39;user_auth_perms&#39; Successful
Converting Table -&amp;gt; &#39;user_auth_realm&#39; Successful
Converting Table -&amp;gt; &#39;user_log&#39; Successful
Converting Table -&amp;gt; &#39;version&#39; Successful
$
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;cactiへのアクセス:2f489629b1913a89dc29f01f282bd186&#34;&gt;Cactiへのアクセス&lt;/h2&gt;

&lt;p&gt;ブラウザからCactiのURL(&lt;code&gt;http://IPアドレス/cacti&lt;/code&gt;)にアクセスする。&lt;/p&gt;

&lt;p&gt;Cactiの初期設定画面が表示されるので、画面の指示に従いながら設定を行う。&lt;/p&gt;

&lt;p&gt;↓Nextをクリック&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20160820_01/cacti_install_01.png&#34; alt=&#34;cacti_install_01&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓Nextをクリック&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20160820_01/cacti_install_02.png&#34; alt=&#34;cacti_install_02&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓Errorがないことを確認してFinishをクリック&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20160820_01/cacti_install_03.png&#34; alt=&#34;cacti_install_03&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓admin/adminでログイン&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20160820_01/cacti_install_04.png&#34; alt=&#34;cacti_install_04&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓adminの新しいパスワードを入力してSaveをクリック&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20160820_01/cacti_install_05.png&#34; alt=&#34;cacti_install_05&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓ログイン後の初期画面&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20160820_01/cacti_install_06.png&#34; alt=&#34;cacti_install_06&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cowrieのセキュリティ設定</title>
      <link>http://www.shinayoshi.net/post/2016/08/16/security-setting-on-cowrie/</link>
      <pubDate>Tue, 16 Aug 2016 18:59:00 +0900</pubDate>
      
      <guid>http://www.shinayoshi.net/post/2016/08/16/security-setting-on-cowrie/</guid>
      <description>

&lt;p&gt;前回まででCowrieのインストールやKippo-Graphでの可視化を行った。
Cowrieを使用するにあたり追加でやっておきたいセキュリティ設定をメモする。&lt;/p&gt;

&lt;h2 id=&#34;ipv6の無効化:fe15561ef667c99ac763e1e39b0b43c7&#34;&gt;IPv6の無効化&lt;/h2&gt;

&lt;p&gt;IPv6は使用しないため、IPv6を無効化する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1
$ sudo sysctl -w net.ipv6.conf.default.disable_ipv6=1
$ sudo sysctl -a | grep disable_ipv6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再起動後もIPv6が無効化するように設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vi /etc/sysctl.d/10-disableipv6.conf
net.ipv6.conf.all.disable_ipv6=1
net.ipv6.conf.default.disable_ipv6=1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;selinuxの無効化:fe15561ef667c99ac763e1e39b0b43c7&#34;&gt;SELinuxの無効化&lt;/h2&gt;

&lt;p&gt;Raspbian(Jessie)ではデフォルトでSELinuxが使えないようなので、特にやることなし。&lt;/p&gt;

&lt;h2 id=&#34;iptablesの設定:fe15561ef667c99ac763e1e39b0b43c7&#34;&gt;iptablesの設定&lt;/h2&gt;

&lt;p&gt;iptablesでfirewallを設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Cowrieポートのポートフォワード(別手順で設定済み)
#$ sudo iptables -t nat -A PREROUTING -p tcp --dport 22 -j REDIRECT --to-port 2222

##INPUTチェーン
#IPスプーフィング対策
$ sudo iptables -A INPUT -p tcp --tcp-flags SYN,ACK SYN,ACK -m state --state NEW -j REJECT --reject-with tcp-reset

#セッションハイジャック対策
$ sudo iptables -A INPUT -p tcp ! --syn -m state --state NEW -j DROP

#不正なパケット拒否
$ sudo iptables -A INPUT -m state --state INVALID -j DROP

#内部からの通信を始めた場合のパケットは許可
$ sudo iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

#ループバックからの通信は通す
$ sudo iptables -A INPUT -i lo -j ACCEPT

#ICMPパケットは許可
$ sudo iptables -A INPUT -p icmp -j ACCEPT

#DHCPクライアントとしてDHCPに必要な通信は通す
#$ sudo iptables -A INPUT -p udp --dport 67 --sport 68 -j ACCEPT

#SSH(20022/tcp)は許可(ローカルネットワークからの接続のみ許可)
$ sudo iptables -A INPUT -m state --state NEW -m tcp -p tcp -s 192.168.10.0/24 --dport 20022 -j ACCEPT

#HTTPは許可(ローカルネットワークからの接続のみ許可)
$ sudo iptables -A INPUT -m state --state NEW -m tcp -p tcp -s 192.168.10.0/24 --dport 80 -j ACCEPT

#Cowrieは許可(5回まで新規接続許可。それ以降は1分に1回に制限。10分間無接続なら制限解除)
$ sudo iptables -A INPUT -p tcp --dport 2222 -m state --state NEW -m hashlimit --hashlimit-name ssh_limit --hashlimit 1/m --hashlimit-burst 5 --hashlimit-mode srcip --hashlimit-htable-expire 600000 -j ACCEPT

#Zabbix-Agentへの通信は許可
$ sudo iptables -A INPUT -m state --state NEW -m tcp -p tcp -s 192.168.30.0/24 --dport 10050 -j ACCEPT

##OUTPUTチェーン
#ループバックへの通信は通す
$ sudo iptables -A OUTPUT -o lo -j ACCEPT

#ICMP応答のパケットは通す
$ sudo iptables -A OUTPUT -p icmp -m state --state ESTABLISHED,RELATED -j ACCEPT

#外部からの通信を始めた場合のパケットを許可
$ sudo iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

#tcp-resetの通信は通す
$ sudo iptables -A OUTPUT -p tcp --tcp-flags FIN,SYN,RST RST -m state --state ESTABLISHED,RELATED -j ACCEPT

#DHCPクライアントとしてDHCPに必要な通信は通す
#$ sudo iptables -A OUTPUT -p udp --dport 68 --sport 67 -j ACCEPT

#ユーザrootが発したパケットは許可
$ sudo iptables -A OUTPUT -m owner --uid-owner 0 -j ACCEPT

#NTPは許可
$ sudo iptables -A OUTPUT -m state --state NEW -m udp -p udp --dport 123 -j ACCEPT

#Zabbix-Serverへの通信は許可
$ sudo iptables -A OUTPUT -m state --state NEW -m tcp -p tcp -d 192.168.30.0/24 --dport 10051 -j ACCEPT

#外部からの通信は拒否。外部への通信も拒否。
$ sudo iptables -P INPUT DROP
$ sudo iptables -P FORWARD DROP
$ sudo iptables -P OUTPUT DROP
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;iptablesの設定を保存する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo sh -c &amp;quot;iptables-save &amp;gt; /etc/iptables/rules.v4&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://techracho.bpsinc.jp/yamasita-taisuke/2013_05_01/8351&#34;&gt;iptablesで鉄壁？の守りを実現する3つのTips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.unix-power.net/linux/iptables.html&#34;&gt;CentOS iptablesによるパケットフィルタ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kassyjp.ninja-web.net/ras/jessie/iptables.htm&#34;&gt;2.iptables（ファイアウォール）のセットアップ - RaspberryPiで各種サーバー作り！ - ある阪大生の物置小屋&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ログ出力先をsyslogに変更:fe15561ef667c99ac763e1e39b0b43c7&#34;&gt;ログ出力先をsyslogに変更&lt;/h2&gt;

&lt;p&gt;twistdの作成するログは1000000MB程度でログローテートされてしまうため、Syslogに出力するように変更して日次でログローテートするように変更する。&lt;/p&gt;

&lt;p&gt;ログ保管用のディレクトリ作成。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkdir /var/log/cowrie
$ sudo chown cowrie:adm /var/log/cowrie/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;rsyslogの設定。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vi /etc/rsyslog.d/cowrie.conf
if $programname == &#39;cowrie&#39; then /var/log/cowrie/cowrie.log
&amp;amp; ~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;rsyslogの再起動。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl restart rsyslog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cowrieのログ出力先変更。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo su - cowrie
$ cd ${COWRIE_INSTALL_DIR}
$ vi start.sh
$ diff ./start.sh.back20160818 ./start.sh
31c31
&amp;lt;     twistd $XARGS -l log/cowrie.log --umask 0027 --pidfile cowrie.pid cowrie
---
&amp;gt;     twistd $XARGS --syslog --prefix cowrie --umask 0027 --pidfile cowrie.pid cowrie
33c33
&amp;lt;     authbind --deep twistd $XARGS -l log/cowrie.log --umask 0027 --pidfile cowrie.pid cowrie
---
&amp;gt;     authbind --deep twistd $XARGS --syslog --prefix cowrie --umask 0027 --pidfile cowrie.pid cowrie
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;logrotateの設定:fe15561ef667c99ac763e1e39b0b43c7&#34;&gt;logrotateの設定&lt;/h2&gt;

&lt;p&gt;logrotateをインストールする(通常はインストール済みのはず)。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install logrotate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cowrie用のlogrotate設定を作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vi /etc/logrotate.d/cowrie
/var/log/cowrie/cowrie.log
{
        daily
        rotate 92
        dateext
        create 0640 cowrie adm
        missingok
        ifempty
        compress
        postrotate
                invoke-rc.d rsyslog rotate &amp;gt; /dev/null
        endscript
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;logrotateをテスト実行し、エラーがないことを確認する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo logrotate -d /etc/logrotate.d/cowrie
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://server-setting.info/centos/loglotation.html&#34;&gt;ログローテーション(logrotate)を使ってみる ( httpd(apache)の設定例 ) | レンタルサーバー・自宅サーバー設定・構築のヒント&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://open-groove.net/linux/logrotate-test/&#34;&gt;logrotate（ログローテート）の動作確認 | OpenGroove&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;logwatchのインストール:fe15561ef667c99ac763e1e39b0b43c7&#34;&gt;logwatchのインストール&lt;/h2&gt;

&lt;p&gt;logwatchをインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install logwatch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;logwatchの実行結果を確認する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo logwatch --output stdout
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kippo-GraphをインストールしてCowrieのログを可視化する</title>
      <link>http://www.shinayoshi.net/post/2016/08/16/install-kippo-graph/</link>
      <pubDate>Tue, 16 Aug 2016 08:43:57 +0900</pubDate>
      
      <guid>http://www.shinayoshi.net/post/2016/08/16/install-kippo-graph/</guid>
      <description>

&lt;p&gt;Kippo-Graphの公式(&lt;a href=&#34;http://bruteforce.gr/kippo-graph&#34;&gt;Kippo-Graph - BruteForce Lab&amp;rsquo;s Blog&lt;/a&gt;)を参考にKippo-Graphをインストールするまでのメモです。&lt;/p&gt;

&lt;h2 id=&#34;mysqlのインストールと初期設定:d89df975e87a1641818c282be53c7899&#34;&gt;MySQLのインストールと初期設定&lt;/h2&gt;

&lt;p&gt;MySQLをインストールする。&lt;/p&gt;

&lt;p&gt;インストール途中でMySQLのrootアカウントのパスワードを求められるので、適宜設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get install mysql-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MySQLのセキュア設定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mysql_secure_installation




NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL
      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!


In order to log into MySQL to secure it, we&#39;ll need the current
password for the root user.  If you&#39;ve just installed MySQL, and
you haven&#39;t set the root password yet, the password will be blank,
so you should just press enter here.

Enter current password for root (enter for none): 
OK, successfully used password, moving on...

Setting the root password ensures that nobody can log into the MySQL
root user without the proper authorisation.

You already have a root password set, so you can safely answer &#39;n&#39;.

Change the root password? [Y/n] n
 ... skipping.

By default, a MySQL installation has an anonymous user, allowing anyone
to log into MySQL without having to have a user account created for
them.  This is intended only for testing, and to make the installation
go a bit smoother.  You should remove them before moving into a
production environment.

Remove anonymous users? [Y/n] Y
 ... Success!

Normally, root should only be allowed to connect from &#39;localhost&#39;.  This
ensures that someone cannot guess at the root password from the network.

Disallow root login remotely? [Y/n] Y
 ... Success!

By default, MySQL comes with a database named &#39;test&#39; that anyone can
access.  This is also intended only for testing, and should be removed
before moving into a production environment.

Remove test database and access to it? [Y/n] Y
 - Dropping test database...
ERROR 1008 (HY000) at line 1: Can&#39;t drop database &#39;test&#39;; database doesn&#39;t exist
 ... Failed!  Not critical, keep moving...
 - Removing privileges on test database...
 ... Success!

Reloading the privilege tables will ensure that all changes made so far
will take effect immediately.

Reload privilege tables now? [Y/n] Y
 ... Success!

Cleaning up...



All done!  If you&#39;ve completed all of the above steps, your MySQL
installation should now be secure.

Thanks for using MySQL!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MySQLの初期設定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vi /etc/mysql/my.cnf
[mysqld]
character-set-server=utf8
collation-server=utf8_general_ci
skip-character-set-client-handshake
default-storage-engine=InnoDB
innodb_file_per_table
innodb_buffer_pool_size=256M
skip-name-resolve

[mysqldump]
default-character-set=utf8

[mysql]
default-character-set=utf8
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/5.5/en/server-system-variables.html&#34;&gt;MySQL :: MySQL 5.5 Reference Manual :: 5.1.4 Server System Variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MySQLの再起動&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl restart mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;cowrieのログ出力先を変更:d89df975e87a1641818c282be53c7899&#34;&gt;Cowrieのログ出力先を変更&lt;/h2&gt;

&lt;p&gt;Cowrie用データベースの作成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mysql -uroot -p
Enter password:
mysql&amp;gt; create database cowrie character set utf8 collate utf8_bin;
mysql&amp;gt; grant all privileges on cowrie.* to cowrie@localhost identified by &#39;cowrie_password&#39;;
mysql&amp;gt; quit

$ cd ${COWRIE_INSTALL_DIR}
$ cat doc/sql/mysql.sql | mysql -ucowrie -p cowrie
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CowrieのログをMySQLのデータベースに出力する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ${COWRIE_INSTALL_DIR}
$ vi cowrie.cfg
↓コメントアウト
#[iutput_jsonloi]
#logfile = log/cowrie.json

#[output_mysql]
#host = localhost
#database = cowrie
#username = cowrie
#password = secret
#port = 3306
[output_mysql]
host = localhost
database = cowrie
username = cowrie
password = cowrie_password
port = 3306
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cowrieの再起動&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./stop.sh
$ ./start.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;apache2のインストール:d89df975e87a1641818c282be53c7899&#34;&gt;Apache2のインストール&lt;/h2&gt;

&lt;p&gt;Apache2をインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install apache2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apache2のセキュリティ設定。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vi /etc/apache2/conf-available/security.conf
ServerTokens Prod
ServerSignature Off
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apache2の文字コード設定。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vi /etc/apache2/conf-available/charset.conf
#AddDefaultCharset UTF-8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apache2のServerName設定。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo sh -c &amp;quot;echo ServerName ${HOSTNAME} &amp;gt; /etc/apache2/conf-available/fqdn.conf&amp;quot;
$ sudo a2enconf fqdn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Apache2の再起動。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apachectl configtest
$ sudo systemctl restart apache2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;kippo-graphのインストール:d89df975e87a1641818c282be53c7899&#34;&gt;Kippo-Graphのインストール&lt;/h2&gt;

&lt;p&gt;関連パッケージのインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install libapache2-mod-php5 php5-mysql php5-gd php5-curl
$ sudo apt-get install dnsutils
$ sudo systemctl restart apache2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kippo-Graphのインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ wget http://bruteforce.gr/wp-content/uploads/kippo-graph-1.5.1.tar.gz
$ sudo tar zxvf kippo-graph-1.5.1.tar.gz -C /usr/share
$ sudo vi /etc/apache2/conf-available/kippo-graph.conf
&amp;lt;IfModule mod_alias.c&amp;gt;
    Alias /kippo-graph /usr/share/kippo-graph-1.5.1
&amp;lt;/IfModule&amp;gt;
$ sudo a2enconf kippo-graph
$ sudo apachectl configtest
$ sudo systemctl restart apache2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kippo-Graphの設定。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo chmod 777 /usr/share/kippo-graph-1.5.1/generated-graphs/
$ sudo cp -p /usr/share/kippo-graph-1.5.1/config.php.dist /usr/share/kippo-graph-1.5.1/config.php
$ sudo vi /usr/share/kippo-graph-1.5.1/config.php
define(&#39;DB_HOST&#39;, &#39;localhost&#39;);
define(&#39;DB_USER&#39;, &#39;cowrie&#39;);
define(&#39;DB_PASS&#39;, &#39;cowrie_password&#39;);
define(&#39;DB_NAME&#39;, &#39;cowrie&#39;);
define(&#39;DB_PORT&#39;, &#39;3306&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;kippo-graphの修正:d89df975e87a1641818c282be53c7899&#34;&gt;Kippo-Graphの修正&lt;/h2&gt;

&lt;p&gt;KippoとCowrieのデータベースのテーブル構造の違いにより一部動かない機能(KIPPO-PLAYLOG)があった。&lt;/p&gt;

&lt;p&gt;PLAYLOGを再生するために以下のファイルを修正。一応、PLAYLOGが再生できるようになったが、他の部分に影響がないかは不明。。。試すとしても自己責任でお願いします。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;class/KippoPlayLog.class.php&lt;/code&gt;の修正&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /usr/share/kippo-graph-1.5.1
$ sudo cp -p class/KippoPlayLog.class.php class/KippoPlayLog.class.php.org
$ sudo vi class/KippoPlayLog.class.php
$ diff class/KippoPlayLog.class.php.org class/KippoPlayLog.class.php
21c21
&amp;lt;             SELECT ttylog.session, timestamp, ROUND(LENGTH(ttylog)/1024, 2) AS size
---
&amp;gt;             SELECT ttylog.session, timestamp, ROUND(size/1024, 2) AS size
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;include/play.php&lt;/code&gt;の修正&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /usr/share/kippo-graph-1.5.1
$ sudo cp -p include/play.php include/play.php.org
$ sudo vi include/play.php
$ diff play.php.org play.php
70c70
&amp;lt;                 $log = base64_encode($row[&#39;ttylog&#39;]);
---
&amp;gt;                 $log = base64_encode(file_get_contents($row[&#39;ttylog&#39;]));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ttylogへのシンボリックリンク作成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /usr/share/kippo-graph-1.5.1/include
$ sudo ln -s ${COWRIE_INSTALL_DIR}/log/ log
$ sudo chgrp www-data /home/cowrie/cowrie/log/tty/
$ sudo chmod g+s /home/cowrie/cowrie/log/tty/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cowrie起動スクリプトの修正&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo su - cowrie
$ cd ${COWRIE_INSTALL_DIR}/
$ cp -p start.sh start.sh.org
$ vi start.sh
$ diff start.sh.org start.sh
31c31
&amp;lt;     twistd $XARGS -l log/cowrie.log --umask 0077 --pidfile cowrie.pid cowrie
---
&amp;gt;     twistd $XARGS -l log/cowrie.log --umask 0027 --pidfile cowrie.pid cowrie
33c33
&amp;lt;     authbind --deep twistd $XARGS -l log/cowrie.log --umask 0077 --pidfile cowrie.pid cowrie
---
&amp;gt;     authbind --deep twistd $XARGS -l log/cowrie.log --umask 0027 --pidfile cowrie.pid cowrie
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cowrieの再起動&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./stop.sh
$ ./start.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raspbian(Jessie)にCowrieをインストールする</title>
      <link>http://www.shinayoshi.net/post/2016/08/15/install-cowrie-on-raspbian/</link>
      <pubDate>Mon, 15 Aug 2016 20:46:34 +0900</pubDate>
      
      <guid>http://www.shinayoshi.net/post/2016/08/15/install-cowrie-on-raspbian/</guid>
      <description>

&lt;p&gt;Raspbian(jessie)にCowrieをインストールしてSSHハニーポットを構築するメモです。
はじめはKippoを使用する予定だったのですが、Kippoの改良版であるCowrieを使用することにしました。&lt;/p&gt;

&lt;p&gt;個人のメモですので、もし本メモを参考にハニーポットを構築する際は自己責任でお願いします。&lt;/p&gt;

&lt;h2 id=&#34;raspbianの初期設定:4c0925631b42437e2f8c229197506152&#34;&gt;Raspbianの初期設定&lt;/h2&gt;

&lt;p&gt;Raspbianの初期設定として以下を行いました。&lt;/p&gt;

&lt;h3 id=&#34;パッケージの最新化:4c0925631b42437e2f8c229197506152&#34;&gt;パッケージの最新化&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ipアドレスの固定化:4c0925631b42437e2f8c229197506152&#34;&gt;IPアドレスの固定化&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vi /etc/dhcpcd.conf
#Add the following line
interface eth0
static ip_address=192.168.10.10/24
static routers=192.168.10.254
static domain_name_servers=192.168.100.1
#static domain_name=
#static domain_search=
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ntp設定:4c0925631b42437e2f8c229197506152&#34;&gt;NTP設定&lt;/h3&gt;

&lt;p&gt;NTP同期先を設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vi /etc/ntp.conf
#Add the line
server ntp.nict.jp iburst
server ntp.jst.mfeed.ad.jp iburst
# comment out
#server 0.debian.pool.ntp.org iburst
#server 1.debian.pool.ntp.org iburst
#server 2.debian.pool.ntp.org iburst
#server 3.debian.pool.ntp.org iburst
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NTPサーバを再起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl restart ntp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;時刻同期の状態を確認する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ntpq -p
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;raspi-config関連:4c0925631b42437e2f8c229197506152&#34;&gt;raspi-config関連&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo raspi-config
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;ディスク拡張&lt;/li&gt;
&lt;li&gt;文字コード設定&lt;/li&gt;
&lt;li&gt;タイムゾーン設定&lt;/li&gt;
&lt;li&gt;Wifiの国設定&lt;/li&gt;
&lt;li&gt;ホスト名変更&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;公開鍵認証方式の設定:4c0925631b42437e2f8c229197506152&#34;&gt;公開鍵認証方式の設定&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/home/pi/.ssh/id_rsa): 
Created directory &#39;/home/pi/.ssh&#39;.
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/pi/.ssh/id_rsa.
Your public key has been saved in /home/pi/.ssh/id_rsa.pub.

$ cd ~/.ssh/
$ cat id_rsa.pub &amp;gt;&amp;gt; authorized_keys
$ chmod 600 authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Raspbianで作成した秘密鍵をローカルPCにコピーする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ scp pi@192.168.10.10:~/.ssh/id_rsa ~/.ssh/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;公開鍵認証方式でsshログインできることを確認する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh -i ~/.ssh/id_rsa pi@192.168.10.10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sshサーバの設定:4c0925631b42437e2f8c229197506152&#34;&gt;SSHサーバの設定&lt;/h2&gt;

&lt;p&gt;Cowrieで&lt;code&gt;22/tcp&lt;/code&gt;を使用しているため、SSHサーバのポートを変更します。またログイン設定も変更します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vi /etc/ssh/sshd_config
#Port 22
Port 20022

#PermitRootLogin without-password
PermitRootLogin no

ChallengeResponseAuthentication no

#PasswordAuthentication yes
PasswordAuthentication no
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SSHサーバの設定を再起動する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl restart ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SSHサーバのポートを変更しているため、以降の手順でSSHログインするためにはポート番号を指定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh -i ~/.ssh/id_rsa -p 20022 pi@192.168.10.10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ユーザ設定:4c0925631b42437e2f8c229197506152&#34;&gt;ユーザ設定&lt;/h2&gt;

&lt;p&gt;rootユーザが無効化されていることを確認する(2列目が&lt;code&gt;L&lt;/code&gt;であることを確認)。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo passwd -S root
root L 05/27/2016 0 99999 7 -1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cowrieユーザを作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo adduser --disabled-password cowrie
ユーザ `cowrie&#39; を追加しています...
新しいグループ `cowrie&#39; (1001) を追加しています...
新しいユーザ `cowrie&#39; (1001) をグループ `cowrie&#39; として追加しています...
ホームディレクトリ `/home/cowrie&#39; を作成しています...
`/etc/skel&#39; からファイルをコピーしています...
cowrie のユーザ情報を変更中
新しい値を入力してください。標準設定値を使うならリターンを押してください
	フルネーム []: 
	部屋番号 []: 
	職場電話番号 []: 
	自宅電話番号 []: 
	その他 []: 
以上で正しいですか? [Y/n] y
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;cowrieのインストール:4c0925631b42437e2f8c229197506152&#34;&gt;Cowrieのインストール&lt;/h2&gt;

&lt;p&gt;Cowrienの公式サイトの&lt;a href=&#34;https://github.com/micheloosterhof/cowrie/blob/master/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt;を参考にインストールを行う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install python-twisted python-crypto python-pyasn1 python-gmpy2 python-mysqldb python-zope.interface

$ sudo su - cowrie
$ git clone http://github.com/micheloosterhof/cowrie
$ cd cowrie/
$ cp cowrie.cfg.dist cowrie.cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;cowrieの設定:4c0925631b42437e2f8c229197506152&#34;&gt;Cowrieの設定&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ vi cowrie.cfg
#sensor_name=myhostname
sensor_name=rpicowrie

#hostname = svr04
hostname = cowrie01
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;cowrieの起動と終了:4c0925631b42437e2f8c229197506152&#34;&gt;Cowrieの起動と終了&lt;/h2&gt;

&lt;p&gt;起動するときは以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./start.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;終了するときは以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./stop.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;cowrieポートのポートフォワード:4c0925631b42437e2f8c229197506152&#34;&gt;Cowrieポートのポートフォワード&lt;/h2&gt;

&lt;p&gt;Cowrieでは&lt;code&gt;2222/tcp&lt;/code&gt;でポート待ち受けをしているため、iptablesで22/tcpにポートフォワードする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo iptables -t nat -A PREROUTING -p tcp --dport 22 -j REDIRECT --to-port 2222
$ sudo iptables -t nat -n -L
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;iptables設定の保存:4c0925631b42437e2f8c229197506152&#34;&gt;iptables設定の保存&lt;/h2&gt;

&lt;p&gt;再起動時にもポートフォワード設定が有効になるようにiptablesの設定を保存する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install iptables-persistent
$ sudo systemctl enable netfilter-persistent
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raspbian(Jessie)にFortiGateのプライベートMIBを追加する</title>
      <link>http://www.shinayoshi.net/post/2016/08/13/add-fortigate-mib-on-raspbian/</link>
      <pubDate>Sat, 13 Aug 2016 00:34:26 +0900</pubDate>
      
      <guid>http://www.shinayoshi.net/post/2016/08/13/add-fortigate-mib-on-raspbian/</guid>
      <description>

&lt;p&gt;Raspbian(Jessie)にFortiGateのプライベートMIBを追加するまでのメモです。&lt;/p&gt;

&lt;h2 id=&#34;mibファイルのアップロード:7017348ad71b7a4303759dd4acee2115&#34;&gt;MIBファイルのアップロード&lt;/h2&gt;

&lt;p&gt;FortiGateのプライベートMIB(&lt;code&gt;FORTINET-CORE-MIB.mib&lt;/code&gt;、&lt;code&gt;FORTINET-FORTIGATE-MIB.mib&lt;/code&gt;)を&lt;code&gt;/home/pi&lt;/code&gt;直下にアップロードします。&lt;/p&gt;

&lt;h2 id=&#34;プライベートmibの設定:7017348ad71b7a4303759dd4acee2115&#34;&gt;プライベートMIBの設定&lt;/h2&gt;

&lt;p&gt;プライベートMIBファイルを&lt;code&gt;/usr/share/snmp/mibs/vendor&lt;/code&gt;に移動する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkdir /usr/share/snmp/mibs/vendor
$ sudo mv FORTINET-* /usr/share/snmp/mibs/vendor/
$ sudo chown root:root /usr/share/snmp/mibs/vendor/FORTINET-*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プライベートMIBを使用するように&lt;code&gt;snmp.conf&lt;/code&gt;を設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vi /etc/snmp/snmp.conf
mibdirs +/usr/share/snmp/mibs/vendor
mibs +FORTINET-CORE-MIB:FORTINET-FORTIGATE-MIB
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;プライベートmibの設定確認:7017348ad71b7a4303759dd4acee2115&#34;&gt;プライベートMIBの設定確認&lt;/h2&gt;

&lt;p&gt;FortiGateのMIBフィールド名が表示されることを確認する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ snmpwalk -v 2c -c public 192.168.1.1 .1.3.6.1.4.1.12356.101.4.1.4
FORTINET-FORTIGATE-MIB::fgSysMemUsage.0 = Gauge32: 29
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ZabbixでSNMPデバイスの監視を行う</title>
      <link>http://www.shinayoshi.net/post/2016/08/11/monitoring-snmp-devices-on-zabbix/</link>
      <pubDate>Thu, 11 Aug 2016 15:51:09 +0900</pubDate>
      
      <guid>http://www.shinayoshi.net/post/2016/08/11/monitoring-snmp-devices-on-zabbix/</guid>
      <description>

&lt;p&gt;Raspbian(Jessie)にインストールしたZabbixでSNMPデバイスの監視を行うまでのメモです。&lt;/p&gt;

&lt;p&gt;とりあえずSNMP Deviceの監視ができるようになりましたが、なぜこの手順でよいのか理解できていない部分が多いです。&lt;/p&gt;

&lt;h2 id=&#34;パッケージの更新:f5404dafe03c7d830d1b17663408aefc&#34;&gt;パッケージの更新&lt;/h2&gt;

&lt;p&gt;Zabbix Serverのパッケージを最新する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get update
$ sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;snmp関連パッケージのインストール:f5404dafe03c7d830d1b17663408aefc&#34;&gt;SNMP関連パッケージのインストール&lt;/h2&gt;

&lt;p&gt;Zabbix ServerにSNMP関連のパッケージをインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install snmp snmp-mibs-downloader
&lt;/code&gt;&lt;/pre&gt;

&lt;!-- $ sudo apt-get install snmpd --&gt;

&lt;!-- $ sudo apt-get install snmptrapd snmptt --&gt;

&lt;h2 id=&#34;snmpの設定:f5404dafe03c7d830d1b17663408aefc&#34;&gt;SNMPの設定&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;/usr/bin/download-mibs&lt;/code&gt;でダウンロードしたMIBSを読み込めるように設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vi /etc/snmp/snmp.conf
#mibs :
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;メモ：デフォルトでは以下のディレクトリを検索する。&lt;code&gt;snmpstatus --help&lt;/code&gt;の出力で確認。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;${HOME}/.snmp/mibs
/usr/share/snmp/mibs
/usr/share/snmp/mibs/iana
/usr/share/snmp/mibs/ietf
/usr/share/mibs/site
/usr/share/snmp/mibs
/usr/share/mibs/iana
/usr/share/mibs/ietf
/usr/share/mibs/netsnmp
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;zabbix-serverの再起動:f5404dafe03c7d830d1b17663408aefc&#34;&gt;Zabbix Serverの再起動&lt;/h2&gt;

&lt;p&gt;Zabbix Serverを再起動してSNMPの設定を読み込む(本当に必要？)。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl restart zabbix-server
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;zabbix-serverでのsnmp-device監視設定:f5404dafe03c7d830d1b17663408aefc&#34;&gt;Zabbix ServerでのSNMP Device監視設定&lt;/h2&gt;

&lt;p&gt;ブラウザからZabbix ServerのURL(&lt;code&gt;http://IPアドレス/zabbix&lt;/code&gt;)にアクセスしてログインする。&lt;/p&gt;

&lt;p&gt;「設定」⇒「ホスト」⇒「ホストの作成」を選択する。&lt;/p&gt;

&lt;p&gt;ホストの設定画面が表示されるので最低限以下を設定する。&lt;/p&gt;

&lt;p&gt;&amp;ldquo;ホスト&amp;rdquo;タブ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ホスト名：監視対象機器のホスト名。&lt;/li&gt;
&lt;li&gt;グループ：所属するグループ。適切なグループがなければ新規作成。&lt;/li&gt;
&lt;li&gt;エージェントのインターフェース：削除。&lt;/li&gt;
&lt;li&gt;SNMPインターフェース：追加。監視対象機器のIPアドレスを設定。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;ldquo;テンプレート&amp;rdquo;タブ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;テンプレートとのリンク：&amp;rdquo;Template SNMP Device&amp;rdquo;を追加。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;ldquo;マクロ&amp;rdquo;タブ&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;マクロ：&lt;code&gt;{$SNMP_COMMUNITY}&lt;/code&gt; ⇒ 値：&lt;code&gt;監視対象機器のコミュニティ名&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>