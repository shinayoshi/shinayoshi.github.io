<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Homepxy1 on shinayoshi&#39;s note</title>
    <link>http://www.shinayoshi.net/tags/homepxy1/</link>
    <description>Recent content in Homepxy1 on shinayoshi&#39;s note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Copyright (c) 2017 shinayoshi</copyright>
    <lastBuildDate>Mon, 09 Jan 2017 17:30:57 +0900</lastBuildDate>
    <atom:link href="http://www.shinayoshi.net/tags/homepxy1/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>家庭内インターネット接続環境を構築する その15</title>
      <link>http://www.shinayoshi.net/post/2017/01/09/setting-snmpd/</link>
      <pubDate>Mon, 09 Jan 2017 17:30:57 +0900</pubDate>
      
      <guid>http://www.shinayoshi.net/post/2017/01/09/setting-snmpd/</guid>
      <description>

&lt;p&gt;FortiGate 60DとRaspberry Piを使用して家庭内インターネット接続環境を構築します。
最終的には以下のような構成を想定しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20161022_01/home-network.png&#34; alt=&#34;home network&#34; width=&#34;640px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;前回はCactiを導入しました。
今回はCactiに&lt;code&gt;homenas1&lt;/code&gt;、&lt;code&gt;homemon1&lt;/code&gt;、&lt;code&gt;homemon2&lt;/code&gt;、&lt;code&gt;homepxy1&lt;/code&gt;、&lt;code&gt;homepot1&lt;/code&gt;を登録していきます。SNMPv3を使用してSNMPの値を取得します。&lt;/p&gt;

&lt;h2 id=&#34;snmpdのインストール:f59bc3c40d42508a4e65c03888e7814a&#34;&gt;snmpdのインストール&lt;/h2&gt;

&lt;p&gt;追加するデバイス(Server)にsnmpdをインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo -E apt-get install snmpd snmp
パッケージリストを読み込んでいます... 完了
依存関係ツリーを作成しています                
状態情報を読み取っています... 完了
以下の追加パッケージがインストールされます:
  libperl5.20 libsensors4 libsnmp-base libsnmp30
提案パッケージ:
  lm-sensors snmp-mibs-downloader snmptrapd
以下のパッケージが新たにインストールされます:
  libperl5.20 libsensors4 libsnmp-base libsnmp30 snmp snmpd
アップグレード: 0 個、新規インストール: 6 個、削除: 0 個、保留: 1 個。
3,836 kB のアーカイブを取得する必要があります。
この操作後に追加で 7,088 kB のディスク容量が消費されます。
続行しますか? [Y/n] y
取得:1 http://mirrordirector.raspbian.org/raspbian/ jessie/main libperl5.20 armhf 5.20.2-3+deb8u6 [1,354 B]
取得:2 http://mirrordirector.raspbian.org/raspbian/ jessie/main libsensors4 armhf 1:3.3.5-2 [48.9 kB]
取得:3 http://mirrordirector.raspbian.org/raspbian/ jessie/main libsnmp-base all 5.7.2.1+dfsg-1 [1,544 kB]
取得:4 http://mirrordirector.raspbian.org/raspbian/ jessie/main libsnmp30 armhf 5.7.2.1+dfsg-1 [2,040 kB]
取得:5 http://mirrordirector.raspbian.org/raspbian/ jessie/main snmp armhf 5.7.2.1+dfsg-1 [145 kB]
取得:6 http://mirrordirector.raspbian.org/raspbian/ jessie/main snmpd armhf 5.7.2.1+dfsg-1 [56.8 kB]
3,836 kB を 2秒 で取得しました (1,283 kB/s)
パッケージを事前設定しています ...
以前に未選択のパッケージ libsensors4:armhf を選択しています。
(データベースを読み込んでいます ... 現在 32914 個のファイルとディレクトリがインストールされています。)
.../libsensors4_1%3a3.3.5-2_armhf.deb を展開する準備をしています ...
libsensors4:armhf (1:3.3.5-2) を展開しています...
以前に未選択のパッケージ libperl5.20 を選択しています。
.../libperl5.20_5.20.2-3+deb8u6_armhf.deb を展開する準備をしています ...
libperl5.20 (5.20.2-3+deb8u6) を展開しています...
以前に未選択のパッケージ libsnmp-base を選択しています。
.../libsnmp-base_5.7.2.1+dfsg-1_all.deb を展開する準備をしています ...
libsnmp-base (5.7.2.1+dfsg-1) を展開しています...
以前に未選択のパッケージ libsnmp30:armhf を選択しています。
.../libsnmp30_5.7.2.1+dfsg-1_armhf.deb を展開する準備をしています ...
libsnmp30:armhf (5.7.2.1+dfsg-1) を展開しています...
以前に未選択のパッケージ snmp を選択しています。
.../snmp_5.7.2.1+dfsg-1_armhf.deb を展開する準備をしています ...
snmp (5.7.2.1+dfsg-1) を展開しています...
以前に未選択のパッケージ snmpd を選択しています。
.../snmpd_5.7.2.1+dfsg-1_armhf.deb を展開する準備をしています ...
snmpd (5.7.2.1+dfsg-1) を展開しています...
man-db (2.7.0.2-5) のトリガを処理しています ...
systemd (215-17+deb8u5) のトリガを処理しています ...
libsensors4:armhf (1:3.3.5-2) を設定しています ...
libperl5.20 (5.20.2-3+deb8u6) を設定しています ...
libsnmp-base (5.7.2.1+dfsg-1) を設定しています ...
libsnmp30:armhf (5.7.2.1+dfsg-1) を設定しています ...
snmp (5.7.2.1+dfsg-1) を設定しています ...
snmpd (5.7.2.1+dfsg-1) を設定しています ...
adduser: 警告: ホームディレクトリ `/var/lib/snmp&#39; は、現在作成中のユーザの所属になっていません。
libc-bin (2.19-18+deb8u6) のトリガを処理しています ...
systemd (215-17+deb8u5) のトリガを処理しています ...
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;snmpconfツールを使用してsnmpd.confを作成します。
SNMPv3を使用する前提で質問に回答していきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ snmpconf -g basic_setup

The following installed configuration files were found:

   1:  /etc/snmp/snmp.conf
   2:  /etc/snmp/snmpd.conf

Would you like me to read them in?  Their content will be merged with the
output files created by this session.

Valid answer examples: &amp;quot;all&amp;quot;, &amp;quot;none&amp;quot;,&amp;quot;3&amp;quot;,&amp;quot;1,2,5&amp;quot;

Read in which (default = all): 2
************************************************ 
*** Beginning basic system information setup ***
************************************************ 
Do you want to configure the information returned in the system MIB group (contact info, etc)? (default = y): n
************************************** 
*** BEGINNING ACCESS CONTROL SETUP ***
************************************** 
Do you want to configure the agent&#39;s access control? (default = y): y
Do you want to allow SNMPv3 read-write user based access (default = y): n
Do you want to allow SNMPv3 read-only user based access (default = y): y

Configuring: rouser
Description:
  a SNMPv3 read-only user
    arguments:  user [noauth|auth|priv] [restriction_oid]

Enter the SNMPv3 user that should have read-only access to the system: snmpuser
The minimum security level required for that user [noauth|auth|priv, default = auth]: priv
The OID that this community should be restricted to [if appropriate]: 

Finished Output: rouser  snmpuser priv 
Do another rouser line? (default = y): n
Do you want to allow SNMPv1/v2c read-write community access (default = y): n
Do you want to allow SNMPv1/v2c read-only community access (default = y): n
**************************************** 
*** Beginning trap destination setup ***
**************************************** 
Do you want to configure where and if the agent will send traps? (default = y): n
**************************************** 
*** Beginning monitoring setup ***
**************************************** 
Do you want to configure the agent&#39;s ability to monitor various aspects of your system? (default = y): n


The following files were created:

  snmpd.conf  

These files should be moved to /usr/share/snmp if you
want them used by everyone on the system.  In the future, if you add 
the -i option to the command line I&#39;ll copy them there automatically for you.

Or, if you want them for your personal use only, copy them to
/home/pi/.snmp .  In the future, if you add the -p option to the
command line I&#39;ll copy them there automatically for you.
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;snmpd.confを設置します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mv /etc/snmp/snmpd.conf{,.org}
$ sudo mv snmpd.conf /etc/snmp/
$
$ sudo chown root:root /etc/snmp/snmpd.conf
$ sudo chmod 600 /etc/snmp/snmpd.conf
$
$ ls -l /etc/snmp/*
-rw-r--r-- 1 root root  211  4月 15  2015 /etc/snmp/snmp.conf
-rw------- 1 root root  472  1月  9 17:39 /etc/snmp/snmpd.conf
-rw------- 1 root root 7116  4月 18  2015 /etc/snmp/snmpd.conf.org
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SNMPv3ユーザを作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl stop snmpd
$ sudo cp -p /var/lib/snmp/snmpd.conf{,.org}
$
$ ls -l /var/lib/snmp/snmpd.conf*
-rw------- 1 snmp snmp 1089  1月  9 17:43 /var/lib/snmp/snmpd.conf
-rw------- 1 snmp snmp 1089  1月  9 17:43 /var/lib/snmp/snmpd.conf.org
$
$ sudo vi /var/lib/snmp/snmpd.conf
createUser snmpuser SHA snmp_pass AES snmp_pass
$ sudo systemctl start snmpd
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SNMPv3で値を取得できることを確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ snmpwalk -v 3 -u snmpuser -l authPriv -a SHA -A snmp_pass -x AES -X snmp_pass localhost .
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infraexpert.com/study/tcpip21.html&#34;&gt;TCP/IP - SNMPとは&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;iptablesの通信許可:f59bc3c40d42508a4e65c03888e7814a&#34;&gt;iptablesの通信許可&lt;/h2&gt;

&lt;p&gt;CactiからのSNMP通信を許可します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;##INPUTチェーン
#SNMPは許可
$ sudo iptables -A INPUT -m state --state NEW -m udp -p udp -s 192.168.30.0/24 --dport 161 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;iptablesの設定を保存します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo netfilter-persistent save
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;cactiにデバイス-server-を登録:f59bc3c40d42508a4e65c03888e7814a&#34;&gt;Cactiにデバイス(Server)を登録&lt;/h2&gt;

&lt;p&gt;↓Cactiにログイン。&lt;code&gt;User Name&lt;/code&gt;と&lt;code&gt;Password&lt;/code&gt;を入力して&lt;code&gt;Login&lt;/code&gt;をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20170109_03/register-cacti-01.png&#34; alt=&#34;register-cacti-01&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓Cactiログイン後の画面。&lt;code&gt;Devices&lt;/code&gt;をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20170109_03/register-cacti-02.png&#34; alt=&#34;register-cacti-02&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓デバイスの管理画面。&lt;code&gt;Add&lt;/code&gt;をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20170109_03/register-cacti-03.png&#34; alt=&#34;register-cacti-03&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓デバイスの登録画面。必要事項を入力して&lt;code&gt;Create&lt;/code&gt;をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20170109_03/register-cacti-04.png&#34; alt=&#34;register-cacti-04&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓デバイスの登録完了画面。&lt;code&gt;SNMP Information&lt;/code&gt;にデバイスの情報が表示されていることを確認します。&lt;code&gt;Create Graphs for this Host&lt;/code&gt;をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20170109_03/register-cacti-05.png&#34; alt=&#34;register-cacti-05&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓作成したいグラフを選択して&lt;code&gt;Create&lt;/code&gt;をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20170109_03/register-cacti-06.png&#34; alt=&#34;register-cacti-06&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓グラフが作成されたことを確認します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20170109_03/register-cacti-07.png&#34; alt=&#34;register-cacti-07&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓左のメニューから&lt;code&gt;Graph Trees&lt;/code&gt;をクリックし、&lt;code&gt;Default Tree&lt;/code&gt;をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20170109_03/register-cacti-08.png&#34; alt=&#34;register-cacti-08&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓ツリーの管理画面。&lt;code&gt;Add&lt;/code&gt;をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20170109_03/register-cacti-09.png&#34; alt=&#34;register-cacti-09&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓ツリーへのデバイス登録画面。必要事項を入力して&lt;code&gt;Create&lt;/code&gt;をクリックします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20170109_03/register-cacti-10.png&#34; alt=&#34;register-cacti-10&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓ツリーの管理画面。デバイスが登録されたことを確認します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20170109_03/register-cacti-11.png&#34; alt=&#34;register-cacti-11&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;↓グラフ画面。追加したデバイスのグラフが表示されることを確認します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20170109_03/register-cacti-12.png&#34; alt=&#34;register-cacti-12&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>家庭内インターネット接続環境を構築する その13</title>
      <link>http://www.shinayoshi.net/post/2017/01/09/setting-zabbix-agent/</link>
      <pubDate>Mon, 09 Jan 2017 12:04:12 +0900</pubDate>
      
      <guid>http://www.shinayoshi.net/post/2017/01/09/setting-zabbix-agent/</guid>
      <description>

&lt;p&gt;FortiGate 60DとRaspberry Piを使用して家庭内インターネット接続環境を構築します。
最終的には以下のような構成を想定しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20161022_01/home-network.png&#34; alt=&#34;home network&#34; width=&#34;640px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;前回はZabbix Serverを導入しました。
今回は&lt;code&gt;homenas1&lt;/code&gt;、&lt;code&gt;homemon1&lt;/code&gt;、&lt;code&gt;homemon2&lt;/code&gt;、&lt;code&gt;homepxy1&lt;/code&gt;、&lt;code&gt;homepot1&lt;/code&gt;にZabbix Agentを導入していきます。&lt;/p&gt;

&lt;h2 id=&#34;zabbix-agentのインストール:46d78a109e92aa27b1ca04b613e55e42&#34;&gt;Zabbix Agentのインストール&lt;/h2&gt;

&lt;p&gt;Zabbix Agentをインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo -E apt-get install zabbix-agent
パッケージリストを読み込んでいます... 完了
依存関係ツリーを作成しています                
状態情報を読み取っています... 完了
以下の追加パッケージがインストールされます:
  libcurl3-gnutls libpci3 pciutils
以下のパッケージが新たにインストールされます:
  libcurl3-gnutls libpci3 pciutils zabbix-agent
アップグレード: 0 個、新規インストール: 4 個、削除: 0 個、保留: 1 個。
819 kB のアーカイブを取得する必要があります。
この操作後に追加で 2,344 kB のディスク容量が消費されます。
続行しますか? [Y/n] y
取得:1 http://mirrordirector.raspbian.org/raspbian/ jessie/main libpci3 armhf 1:3.2.1-3 [48.2 kB]
取得:2 http://mirrordirector.raspbian.org/raspbian/ jessie/main libcurl3-gnutls armhf 7.38.0-4+deb8u5 [225 kB]
取得:3 http://mirrordirector.raspbian.org/raspbian/ jessie/main pciutils armhf 1:3.2.1-3 [251 kB]
取得:4 http://mirrordirector.raspbian.org/raspbian/ jessie/main zabbix-agent armhf 1:2.2.7+dfsg-2+deb8u1 [296 kB]
819 kB を 2秒 で取得しました (346 kB/s)
以前に未選択のパッケージ libpci3:armhf を選択しています。
(データベースを読み込んでいます ... 現在 33530 個のファイルとディレクトリがインストールされています。)
.../libpci3_1%3a3.2.1-3_armhf.deb を展開する準備をしています ...
libpci3:armhf (1:3.2.1-3) を展開しています...
以前に未選択のパッケージ libcurl3-gnutls:armhf を選択しています。
.../libcurl3-gnutls_7.38.0-4+deb8u5_armhf.deb を展開する準備をしています ...
libcurl3-gnutls:armhf (7.38.0-4+deb8u5) を展開しています...
以前に未選択のパッケージ pciutils を選択しています。
.../pciutils_1%3a3.2.1-3_armhf.deb を展開する準備をしています ...
pciutils (1:3.2.1-3) を展開しています...
以前に未選択のパッケージ zabbix-agent を選択しています。
.../zabbix-agent_1%3a2.2.7+dfsg-2+deb8u1_armhf.deb を展開する準備をしています ...
zabbix-agent (1:2.2.7+dfsg-2+deb8u1) を展開しています...
man-db (2.7.0.2-5) のトリガを処理しています ...
systemd (215-17+deb8u5) のトリガを処理しています ...
libpci3:armhf (1:3.2.1-3) を設定しています ...
libcurl3-gnutls:armhf (7.38.0-4+deb8u5) を設定しています ...
pciutils (1:3.2.1-3) を設定しています ...
zabbix-agent (1:2.2.7+dfsg-2+deb8u1) を設定しています ...

Creating config file /etc/zabbix/zabbix_agentd.conf with new version
libc-bin (2.19-18+deb8u6) のトリガを処理しています ...
systemd (215-17+deb8u5) のトリガを処理しています ...
$
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;zabbix-agentの設定:46d78a109e92aa27b1ca04b613e55e42&#34;&gt;Zabbix Agentの設定&lt;/h3&gt;

&lt;p&gt;Zabbix Agentを設定します。
以下では&lt;code&gt;homepxy1&lt;/code&gt;を設定した際の例を記載します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cp -p /etc/zabbix/zabbix_agentd.conf{,.org}
$ ls -l /etc/zabbix/zabbix_agentd.conf*
-rw-r--r-- 1 root root 7570  9月 18 03:38 /etc/zabbix/zabbix_agentd.conf
-rw-r--r-- 1 root root 7570  9月 18 03:38 /etc/zabbix/zabbix_agentd.conf.org
$
$ sudo vi /etc/zabbix/zabbix_agentd.conf
#Server=127.0.0.1
Server=192.168.30.10,192.168.30.20

#ServerActive=127.0.0.1
ServerActive=192.168.30.10,192.168.30.20

#Hostname=Zabbix server
Hostname=homepxy1
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Zabbix Agentを再起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl restart zabbix-agent
$ sudo systemctl enable zabbix-agent
Synchronizing state for zabbix-agent.service with sysvinit using update-rc.d...
Executing /usr/sbin/update-rc.d zabbix-agent defaults
Executing /usr/sbin/update-rc.d zabbix-agent enable
$
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;iptablesの通信許可-iptablesを設定しているホストのみ:46d78a109e92aa27b1ca04b613e55e42&#34;&gt;iptablesの通信許可(iptablesを設定しているホストのみ)&lt;/h3&gt;

&lt;p&gt;Zabbix Serverとの通信を許可する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#Zabbix-Agentへの通信は許可
$ sudo iptables -A INPUT -m state --state NEW -m tcp -p tcp -s 192.168.30.0/24 --dport 10050 -j ACCEPT

#Zabbix-Serverへの通信は許可
$ sudo iptables -A OUTPUT -m state --state NEW -m tcp -p tcp -d 192.168.30.0/24 --dport 10051 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;iptablesの設定を保存します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo netfilter-persistent save
run-parts: executing /usr/share/netfilter-persistent/plugins.d/15-ip4tables save
run-parts: executing /usr/share/netfilter-persistent/plugins.d/25-ip6tables save
$
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;zabbix-serverでの監視登録:46d78a109e92aa27b1ca04b613e55e42&#34;&gt;Zabbix Serverでの監視登録&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Zabbixへのログイン&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ブラウザからZabbix ServerのURL(&lt;code&gt;http://IPアドレス/zabbix&lt;/code&gt;)にアクセスしてログインします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20170109_01/zabbix-agent-install-01.png&#34; alt=&#34;zabbix-agent-install-01&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;監視対象ホストの追加&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Configuration&lt;/code&gt; -&amp;gt; &lt;code&gt;Hosts&lt;/code&gt;を選択します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20170109_01/zabbix-agent-install-02.png&#34; alt=&#34;zabbix-agent-install-02&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Create host&lt;/code&gt;を選択し、&lt;code&gt;Host&lt;/code&gt;タブの以下の項目を入力します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host name: homepxy1
Groups: Linux servers
Agent interfaces: 192.168.20.10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20170109_01/zabbix-agent-install-03.png&#34; alt=&#34;zabbix-agent-install-03&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Templates&lt;/code&gt;タブの以下の項目を入力します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Linked templates: Template OS Linux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20170109_01/zabbix-agent-install-04.png&#34; alt=&#34;zabbix-agent-install-04&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Save&lt;/code&gt;をクリックします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;監視対象ホストの追加確認&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Hosts&lt;/code&gt;のリストに追加したホスト名が表示されていること、StatusがMonitoredになっていることを確認します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20170109_01/zabbix-agent-install-05.png&#34; alt=&#34;zabbix-agent-install-05&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以下は対象ホストをすべて登録した状態になります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20170109_01/zabbix-agent-install-06.png&#34; alt=&#34;zabbix-agent-install-06&#34; width=&#34;320px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>家庭内インターネット接続環境を構築する その6</title>
      <link>http://www.shinayoshi.net/post/2017/01/03/setting-proxy/</link>
      <pubDate>Tue, 03 Jan 2017 23:25:23 +0900</pubDate>
      
      <guid>http://www.shinayoshi.net/post/2017/01/03/setting-proxy/</guid>
      <description>

&lt;p&gt;FortiGate 60DとRaspberry Piを使用して家庭内インターネット接続環境を構築します。
最終的には以下のような構成を想定しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20161022_01/home-network.png&#34; alt=&#34;home network&#34; width=&#34;640px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;前回に引き続き&lt;code&gt;homepxy1&lt;/code&gt;を構築していきます。&lt;/p&gt;

&lt;h2 id=&#34;raspberry-pi-2でプロキシサーバ構築:4d2b653e7f73799c1b8de9cc6a404282&#34;&gt;Raspberry Pi 2でプロキシサーバ構築&lt;/h2&gt;

&lt;p&gt;家庭内インターネット接続環境からインターネットに接続するためにキャッシュDNSサーバとプロキシサーバを構築します。
今回はプロキシサーバを構築していきます。&lt;/p&gt;

&lt;h3 id=&#34;squidの設定:4d2b653e7f73799c1b8de9cc6a404282&#34;&gt;Squidの設定&lt;/h3&gt;

&lt;p&gt;squidのインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install squid
パッケージリストを読み込んでいます... 完了
依存関係ツリーを作成しています                
状態情報を読み取っています... 完了
以下の追加パッケージがインストールされます:
  squid-common squid-langpack
提案パッケージ:
  squidclient squid-cgi logcheck-database smbclient winbind
以下のパッケージが新たにインストールされます:
  squid squid-common squid-langpack
アップグレード: 0 個、新規インストール: 3 個、削除: 0 個、保留: 1 個。
1,106 kB のアーカイブを取得する必要があります。
この操作後に追加で 3,882 kB のディスク容量が消費されます。
続行しますか? [Y/n] y
取得:1 http://mirrordirector.raspbian.org/raspbian/ jessie/main squid-langpack all 20140506-1 [150 kB]
取得:2 http://mirrordirector.raspbian.org/raspbian/ jessie/main squid-common all 2.7.STABLE9-4.1 [352 kB]
取得:3 http://mirrordirector.raspbian.org/raspbian/ jessie/main squid armhf 2.7.STABLE9-4.1+b1 [604 kB]
1,106 kB を 4秒 で取得しました (267 kB/s)
パッケージを事前設定しています ...
以前に未選択のパッケージ squid-langpack を選択しています。
(データベースを読み込んでいます ... 現在 31342 個のファイルとディレクトリがインストールされています。)
.../squid-langpack_20140506-1_all.deb を展開する準備をしています ...
squid-langpack (20140506-1) を展開しています...
以前に未選択のパッケージ squid-common を選択しています。
.../squid-common_2.7.STABLE9-4.1_all.deb を展開する準備をしています ...
squid-common (2.7.STABLE9-4.1) を展開しています...
以前に未選択のパッケージ squid を選択しています。
.../squid_2.7.STABLE9-4.1+b1_armhf.deb を展開する準備をしています ...
squid (2.7.STABLE9-4.1+b1) を展開しています...
systemd (215-17+deb8u5) のトリガを処理しています ...
man-db (2.7.0.2-5) のトリガを処理しています ...
squid-langpack (20140506-1) を設定しています ...
squid-common (2.7.STABLE9-4.1) を設定しています ...
squid (2.7.STABLE9-4.1+b1) を設定しています ...
Creating squid spool directory structure
2017/01/03 23:26:35| Creating Swap Directories
systemd (215-17+deb8u5) のトリガを処理しています ...
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Squidの設定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cp -p /etc/squid/squid.conf{,.org}
$ ls -l /etc/squid/squid.conf*
-rw------- 1 root root 169404  1月  3 23:26 /etc/squid/squid.conf
-rw------- 1 root root 169404  1月  3 23:26 /etc/squid/squid.conf.org
$
$ sudo vi /etc/squid/squid.conf
$ sudo diff /etc/squid/squid.conf.org /etc/squid/squid.conf
609,611c609,616
&amp;lt; acl localnet src 10.0.0.0/8	# RFC1918 possible internal network
&amp;lt; acl localnet src 172.16.0.0/12	# RFC1918 possible internal network
&amp;lt; acl localnet src 192.168.0.0/16	# RFC1918 possible internal network
---
&amp;gt; #acl localnet src 10.0.0.0/8	# RFC1918 possible internal network
&amp;gt; #acl localnet src 172.16.0.0/12	# RFC1918 possible internal network
&amp;gt; #acl localnet src 192.168.0.0/16	# RFC1918 possible internal network
&amp;gt; acl localnet src 192.168.10.0/24
&amp;gt; acl localnet src 192.168.20.0/24
&amp;gt; acl localnet src 192.168.30.0/24
&amp;gt; acl localnet src 192.168.40.0/24
&amp;gt; 
676c681
&amp;lt; #http_access allow localnet
---
&amp;gt; http_access allow localnet
1738a1744
&amp;gt; cache_mem 256 MB
1747a1754
&amp;gt; maximum_object_size_in_memory 512 KB
1945a1953
&amp;gt; cache_dir ufs /var/spool/squid 10000 16 256
1988a1997
&amp;gt; maximum_object_size 20480 KB
2097a2107
&amp;gt; logformat combined %&amp;gt;a %ui %un [%tl] &amp;quot;%rm %ru HTTP/%rv&amp;quot; %Hs %&amp;lt;st &amp;quot;%{Referer}&amp;gt;h&amp;quot; &amp;quot;%{User-Agent}&amp;gt;h&amp;quot; %Ss:%Sh
2121c2131,2132
&amp;lt; access_log /var/log/squid/access.log squid
---
&amp;gt; #access_log /var/log/squid/access.log squid
&amp;gt; access_log /var/log/squid/access.log combined
2217a2229
&amp;gt; emulate_httpd_log off
2751c2763,2768
&amp;lt; refresh_pattern .		0	20%	4320
---
&amp;gt; refresh_pattern -i \.(gif|png|jpe?g|tif?f|bmp)$ 1440 25% 10080
&amp;gt; refresh_pattern -i \.(mpe?g|avi|ra?m|wmv|mov)$ 1440 25% 10080
&amp;gt; refresh_pattern -i \.(wav|mp3|mid)$ 1440 25% 10080
&amp;gt; refresh_pattern -i \.(class|swf|pdf)$ 1440 25% 10080
&amp;gt; refresh_pattern -i \.(js|css)$ 1440 25% 10080
&amp;gt; refresh_pattern . 45 20% 4320
2944a2962
&amp;gt; via off
3100a3119,3122
&amp;gt; header_access Referer deny all
&amp;gt; header_access X-Forwarded-For deny all
&amp;gt; header_access Via deny all
&amp;gt; header_access Cache-Control deny all
3392a3415
&amp;gt; visible_hostname unknown
4699a4723
&amp;gt; forwarded_for off
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Squidの設定不備を確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo squid -k parse
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Squidの起動&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl restart squid
$ sudo systemctl enable squid
Synchronizing state for squid.service with sysvinit using update-rc.d...
Executing /usr/sbin/update-rc.d squid defaults
Executing /usr/sbin/update-rc.d squid enable
$
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.unix-power.net/linux/squid.html&#34;&gt;CentOS Squidの設定&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tech.ckme.co.jp/proxy.shtml&#34;&gt;Proxyサーバの設定（squid）：tech.ckme.co.jp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nabeshiki.tumblr.com/post/20000083416/2001-sd-squid&#34;&gt;Proxyキャッシュサーバ設定術・Squidの設定(2001年掲載) | なべしき&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.asial.co.jp/1076&#34;&gt;Privoxy + Ziproxy + Squidで高速フィルタリングサーバを作ってみた : アシアルブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ブラウザのプロキシ設定:4d2b653e7f73799c1b8de9cc6a404282&#34;&gt;ブラウザのプロキシ設定&lt;/h3&gt;

&lt;p&gt;ブラウザ使用するプロキシ設定をSquidに変更する。&lt;/p&gt;

&lt;p&gt;Squidのログを確認してSquid経由でWebアクセスができていることを確認する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cat /var/log/squid/access.log
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;raspbianのプロキシ設定:4d2b653e7f73799c1b8de9cc6a404282&#34;&gt;Raspbianのプロキシ設定&lt;/h3&gt;

&lt;p&gt;起動時にプロキシを使用するように設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo vi /etc/profile.d/proxy.sh
PROXY=&amp;quot;192.168.20.10:3128&amp;quot;
export http_proxy=&amp;quot;http://${PROXY}&amp;quot;
export https_proxy=&amp;quot;http://${PROXY}&amp;quot;
export no_proxy=&amp;quot;localhost,127.0.0.1,192.168.*&amp;quot;

export HTTP_PROXY=&amp;quot;${http_proxy}&amp;quot;
export HTTPS_PROXY=&amp;quot;${https_proxy}&amp;quot;
export NO_PROXY=&amp;quot;${no_proxy}&amp;quot;
$ source /etc/profile.d/proxy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記コマンドではsudo時の環境変数には反映されない。そのため、sudo時には&lt;code&gt;-E&lt;/code&gt;オプションを指定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo -E apt-get update
$ sudo -E apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://karaage.hatenadiary.jp/entry/2015/11/26/073000&#34;&gt;Mac/Linux/Raspberry Piでプロキシサーバを手軽に設定する方法 - karaage. [からあげ]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>家庭内インターネット接続環境を構築する その5</title>
      <link>http://www.shinayoshi.net/post/2017/01/03/setting-cache-dns/</link>
      <pubDate>Tue, 03 Jan 2017 22:22:47 +0900</pubDate>
      
      <guid>http://www.shinayoshi.net/post/2017/01/03/setting-cache-dns/</guid>
      <description>

&lt;p&gt;FortiGate 60DとRaspberry Piを使用して家庭内インターネット接続環境を構築します。
最終的には以下のような構成を想定しています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.shinayoshi.net/img/20161022_01/home-network.png&#34; alt=&#34;home network&#34; width=&#34;640px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;今回は&lt;code&gt;homepxy1&lt;/code&gt;を構築していきます。&lt;/p&gt;

&lt;h2 id=&#34;raspberry-pi-2でキャッシュdnsサーバ構築:a3b948e685fd47b3236875750b0610c7&#34;&gt;Raspberry Pi 2でキャッシュDNSサーバ構築&lt;/h2&gt;

&lt;p&gt;家庭内インターネット接続環境からインターネットに接続するためにキャッシュDNSサーバとプロキシサーバを構築します。
まずはキャッシュDNSサーバを構築していきます。&lt;/p&gt;

&lt;h3 id=&#34;bind9の設定:a3b948e685fd47b3236875750b0610c7&#34;&gt;bind9の設定&lt;/h3&gt;

&lt;p&gt;bind9のインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install bind9 dnsutils
パッケージリストを読み込んでいます... 完了
依存関係ツリーを作成しています                
状態情報を読み取っています... 完了
以下の追加パッケージがインストールされます:
  bind9utils
提案パッケージ:
  bind9-doc ufw rblcheck
以下のパッケージが新たにインストールされます:
  bind9 bind9utils dnsutils
アップグレード: 0 個、新規インストール: 3 個、削除: 0 個、保留: 1 個。
562 kB のアーカイブを取得する必要があります。
この操作後に追加で 1,620 kB のディスク容量が消費されます。
続行しますか? [Y/n] y
取得:1 http://mirrordirector.raspbian.org/raspbian/ jessie/main dnsutils armhf 1:9.9.5.dfsg-9+deb8u8 [113 kB]
取得:2 http://mirrordirector.raspbian.org/raspbian/ jessie/main bind9utils armhf 1:9.9.5.dfsg-9+deb8u8 [157 kB]
取得:3 http://mirrordirector.raspbian.org/raspbian/ jessie/main bind9 armhf 1:9.9.5.dfsg-9+deb8u8 [292 kB]
562 kB を 2秒 で取得しました (229 kB/s)
パッケージを事前設定しています ...
以前に未選択のパッケージ dnsutils を選択しています。
(データベースを読み込んでいます ... 現在 31244 個のファイルとディレクトリがインストールされています。)
.../dnsutils_1%3a9.9.5.dfsg-9+deb8u8_armhf.deb を展開する準備をしています ...
dnsutils (1:9.9.5.dfsg-9+deb8u8) を展開しています...
以前に未選択のパッケージ bind9utils を選択しています。
.../bind9utils_1%3a9.9.5.dfsg-9+deb8u8_armhf.deb を展開する準備をしています ...
bind9utils (1:9.9.5.dfsg-9+deb8u8) を展開しています...
以前に未選択のパッケージ bind9 を選択しています。
.../bind9_1%3a9.9.5.dfsg-9+deb8u8_armhf.deb を展開する準備をしています ...
bind9 (1:9.9.5.dfsg-9+deb8u8) を展開しています...
man-db (2.7.0.2-5) のトリガを処理しています ...
systemd (215-17+deb8u5) のトリガを処理しています ...
dnsutils (1:9.9.5.dfsg-9+deb8u8) を設定しています ...
bind9utils (1:9.9.5.dfsg-9+deb8u8) を設定しています ...
bind9 (1:9.9.5.dfsg-9+deb8u8) を設定しています ...
グループ `bind&#39; (グループ ID 114) を追加しています...
完了。
システムユーザ `bind&#39; (UID 109) を追加しています...
新しいユーザ `bind&#39; (UID 109) をグループ `bind&#39; に追加しています...
ホームディレクトリ `/var/cache/bind&#39; は作成しません。
wrote key file &amp;quot;/etc/bind/rndc.key&amp;quot;
#
systemd (215-17+deb8u5) のトリガを処理しています ...
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bind9の設定&lt;/p&gt;

&lt;p&gt;※変更箇所が多いため、変更箇所ではなく変更後のコンフィグを記載します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cp -p /etc/bind/named.conf.options{,.org}
$ ls -l /etc/bind/named.conf.options*
-rw-r--r-- 1 root bind 890  1月  3 22:26 /etc/bind/named.conf.options
-rw-r--r-- 1 root bind 890  1月  3 22:26 /etc/bind/named.conf.options.org
$
$ sudo vi /etc/bind/named.conf.options
controls {
	inet 127.0.0.1 allow { localhost; } keys { rndc-key; };
};
include &amp;quot;/etc/bind/rndc.key&amp;quot;;

acl &amp;quot;internal-network&amp;quot; {
	localhost;
	127.0.0.1/32;
	192.168.10.0/24;
	192.168.20.0/24;
	192.168.30.0/24;
	192.168.40.0/24;
};

options {
	version &amp;quot;unknown&amp;quot;;

	directory &amp;quot;/var/cache/bind&amp;quot;;

	listen-on {
		internal-network;
	};

	querylog yes;
	allow-query {
		internal-network;
	};

	recursion yes;
	allow-recursion {
		internal-network;
	};

	forwarders {
		192.168.100.1;
	};

	notify no;

	max-ncache-ttl	300;
	max-cache-ttl	3600;
	recursive-clients	300;
	cleaning-interval	60;
	lame-ttl	600;
	max-cache-size	256m;

	allow-transfer {
		none;
	};

	allow-update {
		none;
	};
};

logging {
	channel &amp;quot;log_default&amp;quot; {
		file &amp;quot;/var/log/bind/named.log&amp;quot; versions 5 size 5m;
		print-time yes;
		severity info;
		print-category yes;
	};
	channel &amp;quot;alert&amp;quot; {
		file &amp;quot;/var/log/bind/alert.log&amp;quot; versions 8 size 4m;
		severity info;
		print-time yes;
		print-severity yes;
		print-category yes;
	};
	channel &amp;quot;query&amp;quot; {
		file &amp;quot;/var/log/bind/query.log&amp;quot; versions 8 size 50m;
		severity debug;
		print-time yes;
		print-severity yes;
		print-category yes;
	};

	category default { &amp;quot;log_default&amp;quot;; };
	category security { &amp;quot;alert&amp;quot;; };
	category queries { &amp;quot;query&amp;quot;; };
	category lame-servers { null; };
};
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bind9のコンフィグ不備を確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo named-checkconf /etc/bind/named.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ログ保存先のディレクトリ作成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo mkdir -p /var/log/bind
$ sudo chown bind:bind /var/log/bind
$ ls -ld /var/log/bind
drwxr-xr-x 2 bind bind 4096  1月  3 22:39 /var/log/bind
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bind9の起動&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl restart bind9
$ sudo systemctl enable bind9
Synchronizing state for bind9.service with sysvinit using update-rc.d...
Executing /usr/sbin/update-rc.d bind9 defaults
Executing /usr/sbin/update-rc.d bind9 enable
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dnsクライアントの設定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo cp -p /etc/dhcpcd.conf{,.backup20160103}
$ ls -l /etc/dhcpcd.conf*
-rw-rw-r-- 1 root netdev 1553  9月 23 13:24 /etc/dhcpcd.conf
-rw-rw-r-- 1 root netdev 1553  9月 23 13:24 /etc/dhcpcd.conf.backup20160103
-rw-rw-r-- 1 root netdev 1247 10月 17  2015 /etc/dhcpcd.conf.org
$
$ sudo vi /etc/dhcpcd.conf
static domain_name_servers=127.0.0.1
$
$ diff /etc/dhcpcd.conf.backup20160103 /etc/dhcpcd.conf
46c46
&amp;lt; static domain_name_servers=192.168.100.1
---
&amp;gt; static domain_name_servers=127.0.0.1
$
$ sudo systemctl restart dhcpcd
$ cat /etc/resolv.conf 
# Generated by resolvconf
nameserver 127.0.0.1
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bind9による名前解決の確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dig www.google.co.jp

; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.9.5-9+deb8u8-Raspbian &amp;lt;&amp;lt;&amp;gt;&amp;gt; www.google.co.jp
;; global options: +cmd
;; Got answer:
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 455
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;www.google.co.jp.		IN	A

;; ANSWER SECTION:
www.google.co.jp.	187	IN	A	172.217.26.99

;; Query time: 70 msec
;; SERVER: 127.0.0.1#53(127.0.0.1)
;; WHEN: Tue Jan 03 22:55:14 JST 2017
;; MSG SIZE  rcvd: 61

$ dig -x 8.8.8.8

; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.9.5-9+deb8u8-Raspbian &amp;lt;&amp;lt;&amp;gt;&amp;gt; -x 8.8.8.8
;; global options: +cmd
;; Got answer:
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 3656
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 13, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
;; QUESTION SECTION:
;8.8.8.8.in-addr.arpa.		IN	PTR

;; ANSWER SECTION:
8.8.8.8.in-addr.arpa.	3600	IN	PTR	google-public-dns-a.google.com.

;; AUTHORITY SECTION:
.			3449	IN	NS	h.root-servers.net.
.			3449	IN	NS	m.root-servers.net.
.			3449	IN	NS	c.root-servers.net.
.			3449	IN	NS	l.root-servers.net.
.			3449	IN	NS	b.root-servers.net.
.			3449	IN	NS	f.root-servers.net.
.			3449	IN	NS	g.root-servers.net.
.			3449	IN	NS	k.root-servers.net.
.			3449	IN	NS	e.root-servers.net.
.			3449	IN	NS	d.root-servers.net.
.			3449	IN	NS	a.root-servers.net.
.			3449	IN	NS	j.root-servers.net.
.			3449	IN	NS	i.root-servers.net.

;; Query time: 70 msec
;; SERVER: 127.0.0.1#53(127.0.0.1)
;; WHEN: Tue Jan 03 22:57:45 JST 2017
;; MSG SIZE  rcvd: 304

$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>