<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on shinayoshi&#39;s note</title>
    <link>http://www.shinayoshi.net/tags/java/</link>
    <description>Recent content in Java on shinayoshi&#39;s note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Copyright (c) 2017 shinayoshi</copyright>
    <lastBuildDate>Sat, 06 May 2017 15:56:59 +0900</lastBuildDate>
    <atom:link href="http://www.shinayoshi.net/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>OCJP, Silver SE 8を取得しました</title>
      <link>http://www.shinayoshi.net/post/2017/05/06/get_a_java_se_8_silver/</link>
      <pubDate>Sat, 06 May 2017 15:56:59 +0900</pubDate>
      
      <guid>http://www.shinayoshi.net/post/2017/05/06/get_a_java_se_8_silver/</guid>
      <description>

&lt;p&gt;2017年7月にJava 9のリリースが予定されている中で、「Oracle Certified Java Programmer, Silver SE 8 (1Z0-808)」を取得しました。
資格取得までに勉強したことをメモしておきます。&lt;/p&gt;

&lt;h2 id=&#34;java経験:a2b7eb23385017c639e28ffb3d4d429e&#34;&gt;Java経験&lt;/h2&gt;

&lt;p&gt;私のJava経験は以下ととおりです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2010年にSun認定JavaプログラマSE6(SJC-P)を取得&lt;/li&gt;
&lt;li&gt;Javaはたまに趣味で書く程度(仕事ではプログラミングはしていません)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;勉強方法:a2b7eb23385017c639e28ffb3d4d429e&#34;&gt;勉強方法&lt;/h2&gt;

&lt;p&gt;試験まで以下の参考書を使用して勉強しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;オラクル認定資格教科書 Javaプログラマ Silver SE 8&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SJC-Pを取得していたこともあり、基本的な文法やオブジェクト指向については復習程度の学習で問題ありませんでした。&lt;/p&gt;

&lt;p&gt;参考書の1章から8章までを一通り読んでから模擬試験問題にチャレンジしました。
Java SE 8で新しく勉強した部分で不安がありましたが、正解率90%ぐらいとれたため試験に申し込みました。&lt;/p&gt;

&lt;h2 id=&#34;新しく勉強した内容:a2b7eb23385017c639e28ffb3d4d429e&#34;&gt;新しく勉強した内容&lt;/h2&gt;

&lt;p&gt;過去に取得したSJC-PからSilver SE 8を取得するにあたり新しく勉強した内容は以下のとおりです。&lt;/p&gt;

&lt;h3 id=&#34;2進数表記:a2b7eb23385017c639e28ffb3d4d429e&#34;&gt;2進数表記&lt;/h3&gt;

&lt;p&gt;0bを先頭につけることで2進数を表現できるようになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ex)
0b1010    // 10進数で10
0b1111    // 10進数で15
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;数値リテラルのアンダーバー:a2b7eb23385017c639e28ffb3d4d429e&#34;&gt;数値リテラルのアンダーバー&lt;/h3&gt;

&lt;p&gt;数値リテラルにアンダーバーを使用してカンマのように表現できるようになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ex)
1_234
5_6
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;インタフェースのdefaultメソッドとstaticメソッド:a2b7eb23385017c639e28ffb3d4d429e&#34;&gt;インタフェースのdefaultメソッドとstaticメソッド&lt;/h3&gt;

&lt;p&gt;インタフェースにメソッドの実装を記載できるようになりました。
結果、多重継承が実現可能となりました。&lt;/p&gt;

&lt;p&gt;インタフェースと抽象クラスで同じようなことができるようになったため、使い分けが難しそうです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ex)
interface MyInterface {
    void method1();
    default void method2() { System.out.println(&amp;quot;method2&amp;quot;); }
    static void method3() { System.out.println(&amp;quot;method3&amp;quot;); }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ラムダ式:a2b7eb23385017c639e28ffb3d4d429e&#34;&gt;ラムダ式&lt;/h3&gt;

&lt;p&gt;ラムダ式という構文が追加されました。ラムダ式を使用するとこれまで匿名クラスを使用していた場面での実装を、よりシンプルにできます。&lt;/p&gt;

&lt;p&gt;ラムダ式を使用するにあたり、Java SE 8のAPIに関数型インタフェースというものが追加されています。(参考：&lt;a href=&#34;https://docs.oracle.com/javase/jp/8/docs/api/java/util/function/package-summary.html&#34;&gt;java.util.function (Java Platform SE 8)&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ex)
import java.util.function.Predicate;
public class LambdaSample {
    public static void main(String[] args) {
        // ラムダ式(省略あり)
        Predicate&amp;lt;String&amp;gt; pre = str -&amp;gt; str.isEmpty();

        /*
        // ラムダ式(省略なし)
        Predicate&amp;lt;String&amp;gt; pre = (String str) -&amp;gt; { return str.isEmpty(); };
        */

        /*
        // 匿名クラスの実装
        Predicate&amp;lt;String&amp;gt; pre = new Predicate&amp;lt;String&amp;gt;() {
            public boolean test(String str) {
                return str.isEmpty();
            }
        };
        */

        System.out.println(pre.test(&amp;quot;&amp;quot;));
        System.out.println(pre.test(&amp;quot;LambdaSample&amp;quot;));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;date-and-time-api:a2b7eb23385017c639e28ffb3d4d429e&#34;&gt;Date and Time API&lt;/h3&gt;

&lt;p&gt;Dateクラスの代わりとなる新しいDate/Time APIが追加されました。
例えば、LocalDateクラスやLocalTimeクラス、LocalDateTimeクラス等が追加されています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ex)
LocalDate date = LocalDate.now();
LocalTime time = LocalTime.parse(&amp;quot;18:23:11&amp;quot;);
LocalDateTime dateTime = LocalDateTime.of(2017, 5, 6, 18, 23, 11);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;今後:a2b7eb23385017c639e28ffb3d4d429e&#34;&gt;今後&lt;/h2&gt;

&lt;p&gt;Oracle Certified Java Programmer, Gold SE 8 (1Z0-809)の取得に向けて勉強をしています。&lt;/p&gt;

&lt;p&gt;勉強を始めたばかりなのですが、Gold SE 8ではSilver SE 8以上に深い言語仕様の理解と標準APIの理解が必要なことがわかります。&lt;/p&gt;

&lt;p&gt;仕事でJavaを書くことはないのですが、趣味に生かしていければと考えています。&lt;/p&gt;

&lt;p&gt;以上です。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>